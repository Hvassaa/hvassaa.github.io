var searchIndex = JSON.parse('{\
"abstract_integers":{"doc":"This crate defines specification-friendly natural integers …","t":[8,8,18,3,3,8,8,8,8,8,8,4,13,18,8,8,13,13,4,8,8,8,8,8,8,13,13,8,8,8,8,8,4,13,13,8,8,13,13,8,8,8,13,8,8,8,4,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,3,13,3,8,3,3,3,3,3,8,8,8,16,16,8,8,8,8,4,8,8,16,8,16,13,3,16,13,8,11,11,0,14,14,14,14,14,14,14,14,14,14,14,14,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,8,8,8,8,8,8,8,8,8,8,8,10,13,8,10,10,10,10,10,10,10,10,10,8,8,4,8,16,8,13,10,10,11,10,11,10,8,8,8,8,8,8,8,8,8,8,16,16,16,10,3,8,8,8,10,8,8,8,8,8,11,8,8,8,8,8,8,8,8,8,5,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,0,0,5,10,10,10,10,10,10,10,5,10,10,10,10,10,5,5,5,10,11,10,10,10,10,10,11,10,10,10,0,10,11,11,11,10,10,11,11,10,11,11,11,11,11,10,11,11,10,10,11,11,11,10,11,11,10,0,10,0,10,11,11,10,10,10,10,10,10,11,10,10,10,10,12,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,10,0,0,5,10,10,10,10,0,10,10,11,10,10,10,10,10,10,10,10,11,11,0,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,10,11,11,11,10,10,11,11,11,11,11,11,10,10,10,10,10,10,10,10,5,10,8,8,8,10,10,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,11,10,10,11,10,10,10,10,10,10,10,11,10,10,10,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,8,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["Add","AddAssign","BREAK","BigInt","BigUint","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Bound","Break","CONTINUE","CheckedSub","CoerceUnsized","Complete","Continue","ControlFlow","Deref","DerefMut","DispatchFromDyn","Div","DivAssign","Drop","Equal","Excluded","Fn","FnMut","FnOnce","FromResidual","Generator","GeneratorState","Greater","Included","Index","IndexMut","Less","Minus","Mul","MulAssign","Neg","NoSign","Not","One","OneSidedRange","Ordering","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","ParseIntError","Plus","Range","RangeBounds","RangeFrom","RangeFull","RangeInclusive","RangeTo","RangeToInclusive","Rem","RemAssign","Residual","Residual","Return","Shl","ShlAssign","Shr","ShrAssign","Sign","Sub","SubAssign","Target","Try","TryType","Unbounded","Yeet","Yield","Yielded","Zero","abs","abs_sub","abstract_int","abstract_int","abstract_nat_mod","abstract_public","abstract_public_modular_integer","abstract_public_nat_mod","abstract_secret","abstract_secret_modular_integer","abstract_signed","abstract_signed_public_integer","abstract_signed_secret_integer","abstract_unsigned","abstract_unsigned_public_integer","abstract_unsigned_secret_integer","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","advance_back_by","advance_by","as_mut","as_ref","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch","break_value","call","call_mut","call_once","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_sub","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp","cmp","cmp","cmp","contains","contains","contains","contains","contains","contains","continue_value","count_ones","default","default","default","default","define_abstract_integer_checked","define_refined_modular_integer","deref","deref_mut","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","divides","drop","end","end","end","end","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extended_gcd_lcm","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_i128","from_i128","from_i64","from_i64","from_output","from_output","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_residual","from_residual","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","gcd","gcd","gcd_lcm","gcd_lcm","get","get","get","get","get","get","get","get","get","get","get","get","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","into_parts","is_break","is_continue","is_empty","is_empty","is_eq","is_even","is_even","is_ge","is_gt","is_le","is_lt","is_multiple_of","is_multiple_of","is_ne","is_negative","is_odd","is_odd","is_one","is_one","is_one","is_positive","is_sorted","is_sorted","is_zero","is_zero","is_zero","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","kind","last","last","lcm","lcm","magnitude","map","map_break","map_continue","max","max","min","min","mod_floor","mod_floor","modpow","modpow","modular_integer","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nat_mod","neg","neg","neg","neg","new","new","new","next","next","next","next_back","next_back","next_multiple_of","next_multiple_of","not","not","not","nth","nth","nth","nth_back","nth_back","nth_root","nth_root","nth_root","nth_root","one","one","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prev_multiple_of","prev_multiple_of","product","product","provide","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","resume","reverse","rfold","set_bit","set_bit","set_one","set_one","set_one","set_zero","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signum","size_hint","size_hint","size_hint","sqrt","sqrt","sqrt","sqrt","start","start","start","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","then","then_with","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i64","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_u128","to_u128","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64_digits","to_u64_digits","trailing_ones","trailing_zeros","trailing_zeros","traits","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_rfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zero","zero","AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","E","Empty","Euclid","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","Output","Output","Output","PI","ParseFloatError","Pow","PrimInt","RefNum","SQRT_2","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","TAU","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs","abs","abs_sub","abs_sub","abs_sub","acos","acosh","as_","asin","asinh","atan","atan2","atanh","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","cbrt","ceil","checked_add","checked_div","checked_div_euclid","checked_mul","checked_neg","checked_pow","checked_rem","checked_rem_euclid","checked_shl","checked_shr","checked_sub","clamp","clamp_max","clamp_min","classify","copysign","cos","cosh","count_ones","count_zeros","div_euclid","epsilon","exp","exp2","exp_m1","float","floor","fmt","fmt","fmt","fract","from","from","from","from_be","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_le","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hypot","identities","infinity","int","integer_decode","into","into","inv","is_finite","is_infinite","is_nan","is_negative","is_normal","is_one","is_positive","is_sign_negative","is_sign_positive","is_zero","kind","leading_ones","leading_zeros","ln","ln_1p","log","log10","log2","max","max_value","max_value","min","min_positive_value","min_value","min_value","mul_add","mul_add","mul_add_assign","nan","neg_infinity","neg_zero","one","one","ops","pow","pow","pow","pow","powf","powi","real","recip","rem_euclid","reverse_bits","rotate_left","rotate_right","round","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","set_one","set_zero","sign","signed_shl","signed_shr","signum","signum","signum","sin","sin_cos","sinh","sqrt","swap_bytes","tan","tanh","to_be","to_degrees","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_le","to_radians","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trailing_ones","trailing_zeros","trunc","try_from","try_from","try_into","try_into","type_id","type_id","unsigned_shl","unsigned_shr","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","zero","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["abstract_integersabstract_integers::traitsabstract_integers::traits::bounds","","","","","","","abstract_integers::traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","abstract_integers::traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","abstract_integers::traits::identities","","","","","","","","","","abstract_integers::traits::int","","","","","","","","","","","","","","","","","","","","abstract_integers::traits::ops","","","","","","","abstract_integers::traits::ops::checked","","","","","","","","","","","","","","","","abstract_integers::traits::ops::euclid","","","","","","abstract_integers::traits::ops::inv","","","abstract_integers::traits::ops::mul_add","","","","","abstract_integers::traits::ops::overflowing","","","","","","abstract_integers::traits::ops::saturating","","","","","","","","","abstract_integers::traits::ops::wrapping","","","","","","","","","","","","abstract_integers::traits::pow","","","","","abstract_integers::traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","abstract_integers::traits::sign","","","","","","","","",""],"d":["The addition operator <code>+</code>.","The addition assignment operator <code>+=</code>.","APIs like <code>try_for_each</code> don’t need values with <code>Break</code>, so …","A big signed integer type.","A big unsigned integer type.","The bitwise AND operator <code>&amp;</code>.","The bitwise AND assignment operator <code>&amp;=</code>.","The bitwise OR operator <code>|</code>.","The bitwise OR assignment operator <code>|=</code>.","The bitwise XOR operator <code>^</code>.","The bitwise XOR assignment operator <code>^=</code>.","An endpoint of a range of keys.","Exit the operation without running subsequent phases.","It’s frequently the case that there’s no value needed …","Performs subtraction that returns <code>None</code> instead of wrapping …","Trait that indicates that this is a pointer or a wrapper …","The generator completed with a return value.","Move on to the next phase of the operation as normal.","Used to tell an operation whether it should exit early or …","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>.","<code>DispatchFromDyn</code> is used in the implementation of object …","The division operator <code>/</code>.","The division assignment operator <code>/=</code>.","Custom code within the destructor.","An ordering where a compared value is equal to another.","An exclusive bound.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to specify which residuals can be converted into …","The trait implemented by builtin generator types.","The result of a generator resumption.","An ordering where a compared value is greater than another.","An inclusive bound.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in mutable …","An ordering where a compared value is less than another.","","The multiplication operator <code>*</code>.","The multiplication assignment operator <code>*=</code>.","The unary negation operator <code>-</code>.","","The unary logical negation operator <code>!</code>.","Defines a multiplicative identity element for <code>Self</code>.","<code>OneSidedRange</code> is implemented for built-in range types that …","An <code>Ordering</code> is the result of a comparison between two …","The resulting type after applying the <code>+</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>*</code> operator.","The resulting type after applying the <code>/</code> operator.","The resulting type after applying the <code>%</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>!</code> operator.","The resulting type after applying the <code>&amp;</code> operator.","The resulting type after applying the <code>|</code> operator.","The resulting type after applying the <code>^</code> operator.","The resulting type after applying the <code>&lt;&lt;</code> operator.","The resulting type after applying the <code>&gt;&gt;</code> operator.","The returned type after the call operator is used.","The returned type after indexing.","The type of the value produced by <code>?</code> when <em>not</em> …","An error which can be returned when parsing an integer.","","A (half-open) range bounded inclusively below and …","<code>RangeBounds</code> is implemented by Rust’s built-in range …","A range only bounded inclusively below (<code>start..</code>).","An unbounded range (<code>..</code>).","A range bounded inclusively below and above (<code>start..=end</code>).","A range only bounded exclusively above (<code>..end</code>).","A range only bounded inclusively above (<code>..=end</code>).","The remainder operator <code>%</code>.","The remainder assignment operator <code>%=</code>.","Allows retrieving the canonical type implementing <code>Try</code> that …","The type of the value passed to <code>FromResidual::from_residual</code>","The type of value this generator returns.","The left shift operator <code>&lt;&lt;</code>. Note that because this trait …","The left shift assignment operator <code>&lt;&lt;=</code>.","The right shift operator <code>&gt;&gt;</code>. Note that because this trait …","The right shift assignment operator <code>&gt;&gt;=</code>.","A Sign is a <code>BigInt</code>’s composing element.","The subtraction operator <code>-</code>.","The subtraction assignment operator <code>-=</code>.","The resulting type after dereferencing.","The <code>?</code> operator and <code>try {}</code> blocks.","The “return” type of this meta-function.","An infinite endpoint. Indicates that there is no bound in …","Implement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …","The type of value this generator yields.","The generator suspended with a value.","Defines an additive identity element for <code>Self</code>.","","","","","","","","","","","","","","","","","Performs the <code>+</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>+=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","Converts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.","Converts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","Performs the <code>&amp;</code> operation.","","","","","","","","","Performs the <code>&amp;=</code> operation.","","","","","Performs the <code>|</code> operation.","","","","","","","","","Performs the <code>|=</code> operation.","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","Performs the <code>^</code> operation.","","","","","","","","","Performs the <code>^=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Used in <code>?</code> to decide whether the operator should produce a …","","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","Performs the call operation.","Performs the call operation.","Performs the call operation.","Returns the truncated principal cube root of <code>self</code> – see …","","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","","Subtracts two numbers, checking for underflow. If …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Map a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …","","","","","","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","Returns the number of one bits.","","","","","Defines a bounded natural integer with regular arithmetic …","Defines a bounded natural integer with modular arithmetic …","Dereferences the value.","Mutably dereferences the value.","","Performs the <code>/</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>/=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Executes the destructor for this type.","Returns the upper bound of the range (inclusive).","The upper bound of the range (exclusive).","The upper bound of the range (exclusive).","The upper bound of the range (inclusive)","End index bound.","","","","","","","","","","","","","","","","","","","","","","","","","","Greatest common divisor, least common multiple, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","Constructs the type from its <code>Output</code> type.","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Constructs the type from a compatible <code>Residual</code> type.","","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","Performs the mutable indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Destructures the <code>RangeInclusive</code> into (lower bound, upper …","","","","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Returns <code>true</code> if this is a <code>Break</code> variant.","Returns <code>true</code> if this is a <code>Continue</code> variant.","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the ordering is the <code>Equal</code> variant.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…","Returns <code>true</code> if the ordering is the <code>Greater</code> variant.","Returns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …","Returns <code>true</code> if the ordering is the <code>Less</code> variant.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.","","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","","","","","","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Outputs the detailed cause of parsing an integer failing.","","","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","Maps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …","","","","","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","Performs the <code>*</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>*=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","Performs the unary <code>-</code> operation.","","","Negate Sign value.","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","Creates a new inclusive range. Equivalent to writing …","","","","","","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","Performs the unary <code>!</code> operation.","","","","","","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","Performs the <code>%</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>%=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","Resumes the execution of this generator.","Reverses the <code>Ordering</code>.","","Sets or clears the bit in the given position, using the two…","Sets or clears the bit in the given position","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","","Performs the <code>&lt;&lt;</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>&lt;&lt;=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>&gt;&gt;</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>&gt;&gt;=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.","","","","","Returns the truncated principal square root of <code>self</code> – …","","Returns the truncated principal square root of <code>self</code> – …","","Returns the lower bound of the range (inclusive).","The lower bound of the range (inclusive).","The lower bound of the range (inclusive).","Start index bound.","","","","","","","","","","","","Performs the <code>-</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>-=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","Chains two orderings.","Chains the ordering with the given function.","","","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","","","","","","","","","","","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Returns the number of least-significant bits that are ones.","Returns the number of least-significant bits that are zero,","Returns the number of least-significant bits that are zero,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","","","A generic interface for casting between machine scalars …","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Return Euler’s number.","","","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","","A generic trait for converting a number to a value.","","Unary operator for retrieving the multiplicative inverse, …","","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","An interface for casting between machine scalars.","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","Defines a multiplicative identity element for <code>Self</code>.","The result after applying the operator.","The resulting type after applying the fused multiply-add.","The result after applying the operator.","Return Archimedes’ constant <code>π</code>.","","Binary operator for raising a value to a power.","Generic trait for primitive integers.","The trait for <code>Num</code> references which implement numeric …","Return <code>sqrt(2.0)</code>.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Useful functions for signed numbers (i.e. numbers that can …","Return the full circle constant <code>τ</code>.","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Convert a value to another, using the <code>as</code> operator.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Performs euclid division that returns <code>None</code> instead of …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Raises a value to the power of exp, returning <code>None</code> if an …","Finds the remainder of dividing two numbers, checking for …","Finds the euclid remainder of dividing two numbers, …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Calculates Euclidean division, the matching method for …","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","","Returns the largest integer less than or equal to a number.","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","Returns the argument unchanged.","Returns the argument unchanged.","Convert an integer from big endian to the target’s …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Convert an integer from little endian to the target’s …","Convert from a string and radix (typically <code>2..=36</code>).","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Calculate the length of the hypotenuse of a right-angle …","","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the multiplicative inverse of <code>self</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns true if the number is negative and false if the …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","Returns <code>self</code> to the power <code>rhs</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Convert <code>self</code> to big endian from the target’s endianness.","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Convert <code>self</code> to little endian from the target’s …","Converts degrees to radians.","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Return the integer part of a number.","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,20,0,0,0,0,0,0,0,0,0,20,20,0,0,24,20,0,0,0,0,0,0,0,23,17,0,0,0,0,0,0,23,17,0,0,23,18,0,0,0,18,0,0,0,0,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,0,18,0,0,0,0,0,0,0,0,0,0,65,66,0,0,0,0,0,0,0,67,0,68,17,0,66,24,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,69,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,15,15,17,17,1,14,1,14,1,14,1,14,58,1,1,1,1,14,14,14,14,70,1,1,14,14,59,1,1,1,1,14,14,14,14,71,1,1,14,14,1,14,60,1,1,1,1,14,14,14,14,72,1,1,14,14,1,14,18,22,23,20,24,25,15,26,27,28,29,17,33,1,14,18,22,23,20,24,25,15,26,27,28,29,17,33,65,20,20,73,74,63,1,1,14,14,1,1,14,1,1,14,1,1,14,75,1,1,14,1,14,18,22,23,20,24,25,15,26,27,28,29,17,1,14,1,14,18,22,23,20,24,25,15,26,27,28,29,17,17,1,14,18,23,24,76,15,26,27,28,29,20,14,1,14,25,15,0,0,67,77,22,54,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,78,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,14,79,28,15,27,29,76,25,15,15,26,26,27,27,28,28,29,29,1,14,18,22,23,20,24,25,15,26,27,28,29,17,1,1,1,1,1,1,1,14,14,14,14,14,14,18,22,22,23,20,24,25,15,26,27,28,29,17,33,28,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,18,22,23,20,24,25,15,26,27,28,29,17,33,1,1,14,1,14,1,14,1,14,1,14,65,20,1,14,1,14,80,20,1,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,25,25,15,15,26,26,27,27,28,28,29,29,25,25,15,15,26,26,27,27,28,28,29,29,25,25,15,15,26,26,27,27,28,28,29,29,25,25,15,15,26,26,27,27,28,28,29,29,1,14,18,23,20,24,25,15,26,27,28,29,17,64,25,25,15,15,26,26,27,27,28,28,29,29,81,25,25,15,15,26,26,27,27,28,28,29,29,1,14,18,22,23,20,24,25,15,26,27,28,29,17,33,28,15,26,28,1,20,20,15,28,23,1,14,23,23,23,23,1,14,23,1,1,14,82,1,14,1,15,28,83,1,14,1,14,1,14,22,15,28,1,14,1,17,20,20,15,28,15,28,1,14,1,14,0,53,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,18,84,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,0,56,1,1,18,1,14,28,15,26,28,15,28,1,14,57,1,1,15,26,28,15,28,1,1,14,14,0,82,1,14,1,14,1,14,18,23,24,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,14,1,14,22,55,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,85,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,66,23,28,1,14,82,1,14,83,1,14,61,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,86,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,62,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,87,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,15,26,28,1,1,14,14,28,15,26,76,25,15,15,26,26,27,27,28,28,29,29,52,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,88,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,23,23,1,14,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,18,22,23,20,24,25,15,26,27,28,29,17,1,14,1,14,1,1,1,14,1,14,22,1,14,1,14,1,14,1,14,14,1,14,0,28,1,14,14,14,14,14,14,14,14,14,18,22,23,20,24,25,15,26,27,28,29,17,33,1,14,18,22,23,20,24,25,15,26,27,28,29,17,33,28,1,14,18,22,23,20,24,25,15,26,27,28,29,17,33,0,83,1,14,0,0,0,0,0,0,0,0,0,0,0,89,49,0,89,89,89,89,89,89,89,89,89,0,0,0,0,90,0,49,89,89,89,89,89,89,0,0,0,0,0,0,0,0,0,0,91,92,93,89,0,0,0,0,89,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,94,95,0,94,95,94,94,96,94,94,94,94,94,49,50,49,50,0,0,0,94,94,97,98,99,100,101,0,102,99,103,104,75,0,0,0,94,94,94,94,105,105,106,94,94,94,94,0,94,49,50,50,94,107,49,50,105,108,108,108,108,108,108,108,108,105,90,108,108,108,108,108,108,94,0,94,0,94,49,50,91,94,94,94,95,94,82,95,94,94,83,50,105,105,94,94,94,94,94,94,109,94,94,94,109,94,94,92,110,94,94,94,0,82,0,0,0,105,93,94,94,0,94,106,105,105,105,94,111,112,113,111,114,82,83,0,105,105,0,94,95,94,94,94,94,105,94,94,105,94,115,115,115,115,115,115,115,115,105,94,50,115,115,115,115,115,115,105,105,94,49,50,49,50,49,50,105,105,116,117,118,119,120,121,0,83,0,0,0,109,122,109,123,0,0,0,0,96,0,107,108,108,108,108,108,108,108,108,108,108,108,108,108,108,115,115,115,115,115,115,115,115,115,115,115,115,115,115,89,89,89,89,89,89,89,89,89,89,0,0,0,89,89,89,89,89,89,89,89,89,94,124,94,94,94,94,94,94,94,94,94,94,124,124,94,94,94,94,124,94,94,94,94,94,124,94,124,94,124,94,124,94,94,124,94,124,94,124,94,124,94,124,94,124,94,94,94,94,94,94,124,124,94,94,124,124,94,124,94,94,124,94,124,94,124,94,94,94,124,94,124,94,124,94,124,94,94,94,94,94,94,124,94,124,94,94,124,0,0,82,83,0,82,82,83,0,83,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,98,100,101,102,103,104,75,0,0,99,99,106,106,0,91,91,0,0,92,92,110,0,0,0,125,126,127,0,0,0,0,111,112,113,111,114,0,0,0,0,0,0,116,117,118,119,120,121,93,0,0,0,93,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,0,0,0,95,0,95,95,95,0,95],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[1,1],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[1,2],1],[[1,3],1],[[1,4],1],[[1,5],1],[[1,6],1],[[1,7],1],[[1,8],1],[[1,8],1],[[1,9],1],[[1,1],1],[[1,10],1],[[1,1],1],[[1,1],1],[[1,9],1],[[1,4],1],[[1,8],1],[[1,11],1],[[1,10],1],[[1,12],1],[[1,1],1],[[1,13],1],[[1,5],1],[[1,7],1],[[1,12],1],[[1,4],1],[[1,2],1],[[1,11],1],[[1,7],1],[[1,5],1],[[1,6],1],[[1,4],1],[[1,12],1],[[1,11],1],[[1,7],1],[[1,9],1],[[1,3],1],[[1,8],1],[[1,2],1],[[1,13],1],[[1,3],1],[[1,6],1],[[1,6],1],[[1,12],1],[[1,9],1],[[1,10],1],[[1,5],1],[[1,11],1],[[1,13],1],[[1,13],1],[[1,3],1],[[1,10],1],[[1,2],1],[[14,3],14],[[14,5],14],[[14,3],14],[[14,4],14],[[14,4],14],[[14,3],14],[[14,10],14],[[14,8],14],[[14,13],14],[[14,14],14],[[14,13],14],[[14,3],14],[[14,14],14],[[14,5],14],[[14,14],14],[[14,4],14],[[14,14],14],[[14,10],14],[[14,13],14],[[14,8],14],[[14,10],14],[[14,10],14],[[14,5],14],[[14,4],14],[[14,8],14],[[14,5],14],[[14,8],14],[[14,13],14],[[]],[[1,13]],[[1,1]],[[1,11]],[[1,1]],[[1,10]],[[1,9]],[[1,7]],[[1,6]],[[1,2]],[[1,4]],[[1,3]],[[1,5]],[[1,8]],[[1,12]],[[14,13]],[[14,4]],[[14,10]],[[14,5]],[[14,3]],[[14,14]],[[14,8]],[[14,14]],[[15,8],[[16,[8]]]],[[15,8],[[16,[8]]]],[17,17],[17,17],[[1,18]],[14],[[]],[[]],[[]],[[]],[[1,13],19],[[14,13],19],[[]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[]],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[[]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[]],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[1,13],[14,13],[[]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[]],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[20,20],[20,21],[[]],[[]],[[]],[1,1],[1,1],[14,14],[14,14],[[1,1],[[21,[1]]]],[[1,1],[[21,[1]]]],[[14,14],[[21,[14]]]],[[1,1],[[21,[1]]]],[[1,1],[[21,[1]]]],[[14,14],[[21,[14]]]],[[1,1],[[21,[1]]]],[[1,1],[[21,[1]]]],[[14,14],[[21,[14]]]],[[],21],[[1,1],[[21,[1]]]],[[1,1],[[21,[1]]]],[[14,14],[[21,[14]]]],[1,1],[14,14],[18,18],[22,22],[23,23],[20,20],[24,24],[25,25],[15,15],[26,26],[27,27],[28,28],[29,29],[17,17],[[1,1]],[[14,14]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[[1,1],23],[[14,14],23],[[18,18],23],[[23,23],23],[[24,24],23],[[],19],[15,19],[26,19],[27,19],[28,19],[29,19],[20,21],[14,13],[[],1],[[],14],[[],25],[[],15],0,0,[[]],[[]],[22,30],[[]],[[1,8],1],[[1,6],1],[[1,7],1],[[1,3],1],[[1,13],1],[[1,3],1],[[1,4],1],[[1,9],1],[[1,5],1],[[1,7],1],[[1,2],1],[[1,6],1],[[1,10],1],[[1,2],1],[[1,5],1],[[1,11],1],[[1,10],1],[[1,6],1],[[1,7],1],[[1,12],1],[[1,5],1],[[1,11],1],[[1,10],1],[[1,1],1],[[1,4],1],[[1,11],1],[[1,8],1],[[1,2],1],[[1,4],1],[[1,8],1],[[1,13],1],[[1,12],1],[[1,10],1],[[1,13],1],[[1,7],1],[[1,6],1],[[1,3],1],[[1,1],1],[[1,12],1],[[1,9],1],[[1,3],1],[[1,4],1],[[1,1],1],[[1,5],1],[[1,13],1],[[1,9],1],[[1,11],1],[[1,12],1],[[1,2],1],[[1,1],1],[[1,9],1],[[1,8],1],[[14,14],14],[[14,8],14],[[14,10],14],[[14,10],14],[[14,4],14],[[14,14],14],[[14,4],14],[[14,5],14],[[14,13],14],[[14,3],14],[[14,8],14],[[14,3],14],[[14,13],14],[[14,14],14],[[14,13],14],[[14,4],14],[[14,3],14],[[14,8],14],[[14,10],14],[[14,8],14],[[14,5],14],[[14,10],14],[[14,5],14],[[14,4],14],[[14,5],14],[[14,13],14],[[14,3],14],[[14,14],14],[[]],[[1,10]],[[1,7]],[[1,4]],[[1,8]],[[1,9]],[[1,12]],[[1,1]],[[1,11]],[[1,1]],[[1,2]],[[1,13]],[[1,6]],[[1,3]],[[1,5]],[[14,3]],[[14,4]],[[14,8]],[[14,14]],[[14,10]],[[14,13]],[[14,14]],[[14,5]],[[1,1],1],[[14,14],14],[[1,1],1],[[14,14],14],[[1,1]],[[14,14]],[[1,1]],[[14,14]],[[1,1],19],[[14,14],19],[[]],[28],0,0,0,[[],17],[25,17],[15,17],[15,17],[26,17],[26,17],[27,17],[27,17],[28,17],[28,17],[29,17],[29,17],[[1,1],19],[[14,14],19],[[18,18],19],[[22,22],19],[[23,23],19],[[20,20],19],[[24,24],19],[[25,25],19],[[15,15],19],[[26,26],19],[[27,27],19],[[28,28],19],[[29,29],19],[[17,17],19],[[1,1]],[[1,31],[[16,[32]]]],[[1,31],[[16,[32]]]],[[1,31],[[16,[32]]]],[[1,31],[[16,[32]]]],[[1,31],[[16,[32]]]],[[1,31],[[16,[32]]]],[[14,31],[[16,[32]]]],[[14,31],[[16,[32]]]],[[14,31],[[16,[32]]]],[[14,31],[[16,[32]]]],[[14,31],[[16,[32]]]],[[14,31],[[16,[32]]]],[[18,31],[[16,[32]]]],[[22,31],[[16,[32]]]],[[22,31],[[16,[32]]]],[[23,31],[[16,[32]]]],[[20,31],[[16,[32]]]],[[24,31],[[16,[32]]]],[[25,31],[[16,[32]]]],[[15,31],[[16,[32]]]],[[26,31],[[16,[32]]]],[[27,31],[[16,[32]]]],[[28,31],[[16,[32]]]],[[29,31],[[16,[32]]]],[[17,31],[[16,[32]]]],[[33,31],[[16,[32]]]],[28],[11,1],[7,1],[10,1],[3,1],[2,1],[[]],[4,1],[9,1],[12,1],[5,1],[14,1],[8,1],[13,1],[6,1],[[]],[8,14],[3,14],[5,14],[13,14],[4,14],[10,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[18,14],1],[18,1],[[],14],[18,1],[[],14],[34,[[21,[1]]]],[34,[[21,[14]]]],[9,[[21,[1]]]],[9,[[21,[14]]]],[11,[[21,[1]]]],[11,[[21,[14]]]],[[]],[[],20],[[18,3],[[21,[1]]]],[3,[[21,[14]]]],[[18,3],[[21,[1]]]],[3,[[21,[14]]]],[[]],[[[20,[35]]],20],[[],1],[[],1],[18,1],[[],14],[30,[[16,[1,36]]]],[30,[[16,[14,36]]]],[[30,3],[[16,[1,36]]]],[[30,3],[[16,[14,36]]]],[5,[[21,[1]]]],[5,[[21,[14]]]],[13,[[21,[1]]]],[13,[[21,[14]]]],[[1,1],1],[[14,14],14],[[1,1]],[[14,14]],[25,21],[[25,30],21],[[[15,[8]],30],21],[[[15,[8]]],21],[[[26,[8]]],21],[[[26,[8]],30],21],[[[27,[8]]],21],[[[27,[8]],30],21],[[[28,[8]]],21],[[[28,[8]],30],21],[[[29,[8]]],21],[[[29,[8]],30],21],[25,21],[[25,30],21],[[[15,[8]],30],21],[[[15,[8]]],21],[[[26,[8]]],21],[[[26,[8]],30],21],[[[27,[8]]],21],[[[27,[8]],30],21],[[[28,[8]],30],21],[[[28,[8]]],21],[[[29,[8]]],21],[[[29,[8]],30],21],[[25,30]],[25],[[[15,[8]],30]],[[[15,[8]]]],[[[26,[8]],30]],[[[26,[8]]]],[[[27,[8]],30]],[[[27,[8]]]],[[[28,[8]]]],[[[28,[8]],30]],[[[29,[8]]]],[[[29,[8]],30]],[[25,30]],[25],[[[15,[8]],30]],[[[15,[8]]]],[[[26,[8]],30]],[[[26,[8]]]],[[[27,[8]]]],[[[27,[8]],30]],[[[28,[8]]]],[[[28,[8]],30]],[[[29,[8]]]],[[[29,[8]],30]],[1],[14],[18],[23],[20],[24],[25],[15],[26],[27],[28],[29],[17],[[]],[25],[[25,30]],[[[15,[8]],30]],[[[15,[8]]]],[[[26,[8]]]],[[[26,[8]],30]],[[[27,[8]],30]],[[[27,[8]]]],[[[28,[8]],30]],[[[28,[8]]]],[[[29,[8]]]],[[[29,[8]],30]],[[]],[[25,30]],[25],[[[15,[8]]]],[[[15,[8]],30]],[[[26,[8]]]],[[[26,[8]],30]],[[[27,[8]],30]],[[[27,[8]]]],[[[28,[8]]]],[[[28,[8]],30]],[[[29,[8]],30]],[[[29,[8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28],[[]],[[]],[[]],[1],[20,19],[20,19],[15,19],[28,19],[23,19],[1,19],[14,19],[23,19],[23,19],[23,19],[23,19],[[1,1],19],[[14,14],19],[23,19],[1,19],[1,19],[14,19],[[],19],[1,19],[14,19],[1,19],[15,19],[28,19],[[],19],[1,19],[14,19],[1,37],[14,37],[1,38],[14,38],[22,39],[15,21],[28,21],[[1,1],1],[[14,14],14],[1,14],[17,17],[20,20],[20,20],[15,21],[28,21],[15,21],[28,21],[[1,1],1],[[14,14],14],[[1,1,1],1],[[14,14,14],14],0,[[]],[[1,3],1],[[1,10],1],[[1,10],1],[[1,6],1],[[1,7],1],[[1,9],1],[[1,2],1],[[1,6],1],[[1,13],1],[[1,5],1],[[1,3],1],[[1,1],1],[[1,5],1],[[1,12],1],[[1,11],1],[[1,1],1],[[1,4],1],[[1,11],1],[[1,12],1],[[1,10],1],[[1,9],1],[[1,4],1],[[1,2],1],[[1,7],1],[[1,13],1],[[1,13],1],[[1,12],1],[[1,4],1],[[1,10],1],[[1,11],1],[[1,1],1],[[1,13],1],[[1,12],1],[[1,4],1],[[1,8],1],[[1,2],1],[[1,3],1],[[1,8],1],[[1,7],1],[[1,2],1],[[1,1],1],[[1,7],1],[[1,8],1],[[1,6],1],[[1,11],1],[[1,5],1],[[1,8],1],[[1,9],1],[[1,3],1],[[1,6],1],[[1,9],1],[[1,5],1],[[14,10],14],[[14,10],14],[[14,13],14],[[14,5],14],[[14,4],14],[[14,4],14],[[14,3],14],[[14,8],14],[[14,8],14],[[14,3],14],[[14,8],14],[[14,13],14],[[14,14],14],[[14,10],14],[[14,3],14],[[14,10],14],[[14,4],14],[[14,8],14],[[14,3],14],[[14,5],14],[[14,5],14],[[14,14],14],[[14,5],14],[[14,14],14],[[14,14],14],[[14,13],14],[[14,4],14],[[14,13],14],[[18,18],18],[[]],[[1,11]],[[1,8]],[[1,4]],[[1,13]],[[1,2]],[[1,9]],[[1,12]],[[1,7]],[[1,5]],[[1,6]],[[1,10]],[[1,3]],[[1,1]],[[1,1]],[[14,10]],[[14,5]],[[14,14]],[[14,8]],[[14,14]],[[14,3]],[[14,4]],[[14,13]],0,[[]],[1,1],[1,1],[18,18],[[18,[41,[3,40]]],1],[[[41,[3,40]]],14],[[],28],[15,21],[26,21],[28,21],[15,21],[28,21],[[1,1],1],[[14,14],14],[[]],[1,1],[1,1],[[15,8],21],[[26,8],21],[[28,8],21],[[15,8],21],[[28,8],21],[[1,3],1],[[1,3],1],[[14,3],14],[[14,3],14],[[]],[[]],[[],1],[[],14],[3,[[21,[1]]]],[3,[[21,[14]]]],[[1,1],[[21,[23]]]],[[14,14],[[21,[23]]]],[[18,18],[[21,[23]]]],[[23,23],[[21,[23]]]],[[24,24],[[21,[23]]]],[[1,4],1],[[1,10],1],[[1,5],1],[[1,13],1],[[1,8],1],[[1,10],1],[[1,3],1],[[1,13],1],[[1,5],1],[[1,5],1],[[1,14],1],[[1,4],1],[[1,3],1],[[1,14],1],[[1,8],1],[[1,13],1],[[1,3],1],[[1,4],1],[[1,5],1],[[1,4],1],[[1,13],1],[[1,3],1],[[1,10],1],[[1,3],1],[[1,8],1],[[1,8],1],[[1,14],1],[[1,10],1],[[1,14],1],[[14,3],14],[[14,5],14],[[14,4],14],[[14,10],14],[[14,3],14],[[14,14],14],[[14,3],14],[[14,8],14],[[14,10],14],[[14,14],14],[[14,14],14],[[14,10],14],[[14,3],14],[[14,4],14],[[14,5],14],[[14,8],14],[[14,4],14],[[14,8],14],[[14,5],14],[[14,14],14],[[14,10],14],[[14,13],14],[[14,13],14],[[14,13],14],[[14,8],14],[[14,4],14],[[14,5],14],[[14,13],14],[[14,3],14],[[1,1],1],[[14,14],14],[[],1],[[],14],[42],[[]],[[1,7],1],[[1,13],1],[[1,12],1],[[1,10],1],[[1,8],1],[[1,6],1],[[1,4],1],[[1,1],1],[[1,4],1],[[1,10],1],[[1,6],1],[[1,8],1],[[1,6],1],[[1,9],1],[[1,12],1],[[1,12],1],[[1,7],1],[[1,3],1],[[1,11],1],[[1,11],1],[[1,1],1],[[1,8],1],[[1,5],1],[[1,9],1],[[1,10],1],[[1,5],1],[[1,2],1],[[1,4],1],[[1,7],1],[[1,11],1],[[1,10],1],[[1,12],1],[[1,6],1],[[1,13],1],[[1,3],1],[[1,1],1],[[1,11],1],[[1,2],1],[[1,3],1],[[1,9],1],[[1,7],1],[[1,1],1],[[1,3],1],[[1,4],1],[[1,2],1],[[1,13],1],[[1,9],1],[[1,5],1],[[1,13],1],[[1,5],1],[[1,8],1],[[1,2],1],[[14,10],14],[[14,3],14],[[14,4],14],[[14,5],14],[[14,14],14],[[14,3],14],[[14,5],14],[[14,13],14],[[14,3],14],[[14,4],14],[[14,8],14],[[14,4],14],[[14,5],14],[[14,4],14],[[14,14],14],[[14,5],14],[[14,8],14],[[14,10],14],[[14,13],14],[[14,10],14],[[14,8],14],[[14,10],14],[[14,14],14],[[14,8],14],[[14,14],14],[[14,3],14],[[14,13],14],[[14,13],14],[[]],[[1,4]],[[1,7]],[[1,2]],[[1,12]],[[1,5]],[[1,13]],[[1,10]],[[1,11]],[[1,3]],[[1,8]],[[1,9]],[[1,1]],[[1,6]],[[1,1]],[[14,8]],[[14,10]],[[14,13]],[[14,14]],[[14,3]],[[14,14]],[[14,5]],[[14,4]],[43,24],[23,23],[28],[[1,13,19]],[[14,13,19]],[[]],[1],[14],[[]],[1],[14],[[]],[[1,7],1],[[1,9],1],[[1,5],1],[[1,13],1],[[1,10],1],[[1,8],1],[[1,8],1],[[1,11],1],[[1,2],1],[[1,9],1],[[1,4],1],[[1,11],1],[[1,10],1],[[1,2],1],[[1,8],1],[[1,5],1],[[1,3],1],[[1,12],1],[[1,7],1],[[1,10],1],[[1,6],1],[[1,8],1],[[1,3],1],[[1,5],1],[[1,13],1],[[1,10],1],[[1,9],1],[[1,3],1],[[1,2],1],[[1,12],1],[[1,13],1],[[1,7],1],[[1,11],1],[[1,7],1],[[1,12],1],[[1,6],1],[[1,12],1],[[1,5],1],[[1,4],1],[[1,2],1],[[1,6],1],[[1,13],1],[[1,6],1],[[1,9],1],[[1,11],1],[[1,4],1],[[1,4],1],[[1,3],1],[[14,13],14],[[14,11],14],[[14,13],14],[[14,2],14],[[14,4],14],[[14,2],14],[[14,8],14],[[14,6],14],[[14,9],14],[[14,10],14],[[14,8],14],[[14,12],14],[[14,7],14],[[14,6],14],[[14,8],14],[[14,6],14],[[14,10],14],[[14,4],14],[[14,13],14],[[14,9],14],[[14,7],14],[[14,9],14],[[14,10],14],[[14,4],14],[[14,12],14],[[14,5],14],[[14,4],14],[[14,3],14],[[14,3],14],[[14,2],14],[[14,7],14],[[14,11],14],[[14,7],14],[[14,11],14],[[14,13],14],[[14,9],14],[[14,5],14],[[14,12],14],[[14,5],14],[[14,10],14],[[14,12],14],[[14,11],14],[[14,3],14],[[14,6],14],[[14,2],14],[[14,8],14],[[14,5],14],[[14,3],14],[[]],[[1,4]],[[1,5]],[[1,2]],[[1,9]],[[1,13]],[[1,3]],[[1,12]],[[1,11]],[[1,10]],[[1,7]],[[1,3]],[[1,10]],[[1,4]],[[1,8]],[[1,8]],[[1,5]],[[1,2]],[[1,9]],[[1,7]],[[1,6]],[[1,6]],[[1,11]],[[1,12]],[[1,13]],[[14,7]],[[14,5]],[[14,3]],[[14,4]],[[14,11]],[[14,9]],[[14,7]],[[14,12]],[[14,12]],[[14,8]],[[14,10]],[[14,9]],[[14,6]],[[14,8]],[[14,11]],[[14,2]],[[14,10]],[[14,5]],[[14,6]],[[14,4]],[[14,13]],[[14,2]],[[14,3]],[[14,13]],[[]],[[1,7],1],[[1,4],1],[[1,2],1],[[1,8],1],[[1,5],1],[[1,3],1],[[1,4],1],[[1,12],1],[[1,5],1],[[1,7],1],[[1,8],1],[[1,12],1],[[1,13],1],[[1,8],1],[[1,6],1],[[1,11],1],[[1,9],1],[[1,13],1],[[1,8],1],[[1,11],1],[[1,9],1],[[1,3],1],[[1,10],1],[[1,13],1],[[1,4],1],[[1,9],1],[[1,12],1],[[1,2],1],[[1,6],1],[[1,6],1],[[1,10],1],[[1,3],1],[[1,2],1],[[1,9],1],[[1,10],1],[[1,2],1],[[1,4],1],[[1,12],1],[[1,13],1],[[1,11],1],[[1,3],1],[[1,5],1],[[1,6],1],[[1,11],1],[[1,7],1],[[1,10],1],[[1,7],1],[[1,5],1],[[14,9],14],[[14,7],14],[[14,3],14],[[14,5],14],[[14,4],14],[[14,10],14],[[14,13],14],[[14,12],14],[[14,10],14],[[14,9],14],[[14,5],14],[[14,5],14],[[14,8],14],[[14,8],14],[[14,12],14],[[14,3],14],[[14,11],14],[[14,4],14],[[14,8],14],[[14,7],14],[[14,6],14],[[14,9],14],[[14,9],14],[[14,2],14],[[14,7],14],[[14,6],14],[[14,2],14],[[14,3],14],[[14,11],14],[[14,5],14],[[14,12],14],[[14,6],14],[[14,11],14],[[14,2],14],[[14,10],14],[[14,12],14],[[14,13],14],[[14,8],14],[[14,6],14],[[14,7],14],[[14,10],14],[[14,2],14],[[14,11],14],[[14,3],14],[[14,13],14],[[14,13],14],[[14,4],14],[[14,4],14],[[]],[[1,12]],[[1,3]],[[1,9]],[[1,5]],[[1,13]],[[1,10]],[[1,2]],[[1,2]],[[1,4]],[[1,4]],[[1,13]],[[1,12]],[[1,11]],[[1,9]],[[1,10]],[[1,3]],[[1,6]],[[1,8]],[[1,6]],[[1,7]],[[1,8]],[[1,7]],[[1,5]],[[1,11]],[[14,3]],[[14,4]],[[14,3]],[[14,12]],[[14,11]],[[14,6]],[[14,13]],[[14,7]],[[14,7]],[[14,10]],[[14,10]],[[14,2]],[[14,5]],[[14,8]],[[14,4]],[[14,2]],[[14,11]],[[14,13]],[[14,5]],[[14,12]],[[14,9]],[[14,6]],[[14,9]],[[14,8]],[1,18],[1,1],[15],[26],[28],[1,1],[1,1],[14,14],[14,14],[28],0,0,[[],17],[25,17],[15,17],[15,17],[26,17],[26,17],[27,17],[27,17],[28,17],[28,17],[29,17],[29,17],[[]],[[1,3],1],[[1,8],1],[[1,12],1],[[1,3],1],[[1,4],1],[[1,4],1],[[1,9],1],[[1,13],1],[[1,1],1],[[1,7],1],[[1,6],1],[[1,5],1],[[1,13],1],[[1,8],1],[[1,4],1],[[1,10],1],[[1,9],1],[[1,1],1],[[1,1],1],[[1,3],1],[[1,12],1],[[1,12],1],[[1,2],1],[[1,11],1],[[1,11],1],[[1,10],1],[[1,6],1],[[1,11],1],[[1,6],1],[[1,5],1],[[1,7],1],[[1,2],1],[[1,9],1],[[1,2],1],[[1,12],1],[[1,3],1],[[1,10],1],[[1,7],1],[[1,2],1],[[1,11],1],[[1,7],1],[[1,13],1],[[1,13],1],[[1,4],1],[[1,5],1],[[1,5],1],[[1,9],1],[[1,8],1],[[1,1],1],[[1,10],1],[[1,8],1],[[1,6],1],[[14,10],14],[[14,14],14],[[14,5],14],[[14,14],14],[[14,13],14],[[14,14],14],[[14,8],14],[[14,13],14],[[14,4],14],[[14,5],14],[[14,10],14],[[14,4],14],[[14,4],14],[[14,5],14],[[14,3],14],[[14,4],14],[[14,10],14],[[14,3],14],[[14,3],14],[[14,8],14],[[14,5],14],[[14,13],14],[[14,10],14],[[14,8],14],[[14,8],14],[[14,14],14],[[14,3],14],[[14,13],14],[[]],[[1,10]],[[1,12]],[[1,1]],[[1,7]],[[1,8]],[[1,11]],[[1,4]],[[1,3]],[[1,13]],[[1,5]],[[1,1]],[[1,2]],[[1,9]],[[1,6]],[[14,8]],[[14,13]],[[14,10]],[[14,14]],[[14,3]],[[14,4]],[[14,14]],[[14,5]],[[],1],[[],14],[[23,23],23],[23,23],[1,[[21,[1]]]],[14,[[21,[1]]]],[1,[[21,[14]]]],[1,[[21,[14]]]],[14,[[21,[14]]]],[1],[14,[[41,[4,40]]]],[1],[14,[[41,[4,40]]]],[1,[[21,[44]]]],[14,[[21,[44]]]],[1,[[21,[34]]]],[14,[[21,[34]]]],[1,[[21,[9]]]],[14,[[21,[9]]]],[1,[[21,[11]]]],[14,[[21,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,3]],[[14,3],[[41,[4,40]]]],[[1,3]],[[14,3],[[41,[4,40]]]],[1,[[41,[4,40]]]],[1,[[41,[4,40]]]],[[1,3],45],[[14,3],45],[[],45],[[],45],[[],45],[1,[[21,[5]]]],[14,[[21,[5]]]],[1],[14,[[41,[3,40]]]],[1,[[21,[13]]]],[14,[[21,[13]]]],[1],[14,[[41,[13,40]]]],[14,13],[1,[[21,[13]]]],[14,[[21,[13]]]],0,[28],[[],16],[7,[[16,[14,46]]]],[2,[[16,[14,46]]]],[11,[[16,[14,46]]]],[1,[[16,[14,[46,[1]]]]]],[12,[[16,[14,46]]]],[9,[[16,[14,46]]]],[1,[[16,[14,46]]]],[6,[[16,[14,46]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[28],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[]],[[]],[[],1],[[],14],0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,[[]],0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],21],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[8,21],[[],21],[[],21],[3,21],[3,21],[[],21],[[]],[[]],[[]],[[],48],[[]],[[]],[[]],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],0,[[]],[[49,31],[[16,[32]]]],[[50,31],[[16,[32]]]],[[50,31],[[16,[32]]]],[[]],[[],21],[[]],[[]],[[]],[44,21],[34,21],[9,21],[6,21],[7,21],[11,21],[12,21],[2,21],[[]],[[30,3],16],[5,21],[10,21],[3,21],[13,21],[4,21],[8,21],[[]],0,[[]],0,[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[8],[3],[[]],[[]],[7],0,[[]],[[]],[[]],[3],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[21,[44]]]],[[],[[21,[34]]]],[[],[[21,[9]]]],[[],[[21,[6]]]],[[],[[21,[7]]]],[[],[[21,[11]]]],[[],[[21,[12]]]],[[],[[21,[2]]]],[[]],[[]],[[],45],[[],[[21,[5]]]],[[],[[21,[10]]]],[[],[[21,[3]]]],[[],[[21,[13]]]],[[],[[21,[4]]]],[[],[[21,[8]]]],[[],3],[[],3],[[]],[[],16],[[],16],[[],16],[[],16],[[],47],[[],47],[3],[3],[[]],[[]],[[]],[3],[3],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[],21],[[],21],[44,21],[34,21],[9,21],[6,21],[7,21],[11,21],[12,21],[2,21],[5,21],[10,21],[3,21],[13,21],[4,21],[8,21],[[],[[21,[44]]]],[[],[[21,[34]]]],[[],[[21,[9]]]],[[],[[21,[6]]]],[[],[[21,[7]]]],[[],[[21,[11]]]],[[],[[21,[12]]]],[[],[[21,[2]]]],[[],[[21,[5]]]],[[],[[21,[10]]]],[[],[[21,[3]]]],[[],[[21,[13]]]],[[],[[21,[4]]]],[[],[[21,[8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],48],[[],48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],3],[[],3],[[]],[[]],[[],3],[[],3],[3],[[]],[3],[3],[3],[3],[[]],[[]],[[]],[[],3],[[],3],[3],[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],21],[[],21],[[],21],[[],21],[[],21],[3,21],[3,21],[[],21],0,0,[[],21],[[],21],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[3],[3],[[]],0,0,[8,21],[8],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],19],[[],19],[[]],[[]]],"p":[[3,"BigInt"],[15,"isize"],[15,"u32"],[15,"u8"],[15,"u128"],[15,"i16"],[15,"i32"],[15,"usize"],[15,"i128"],[15,"u16"],[15,"i64"],[15,"i8"],[15,"u64"],[3,"BigUint"],[3,"Range"],[4,"Result"],[4,"Bound"],[4,"Sign"],[15,"bool"],[4,"ControlFlow"],[4,"Option"],[3,"ParseIntError"],[4,"Ordering"],[4,"GeneratorState"],[3,"RangeFull"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeInclusive"],[3,"RangeToInclusive"],[15,"str"],[3,"Formatter"],[3,"Error"],[3,"Yeet"],[15,"f64"],[4,"Infallible"],[3,"ParseBigIntError"],[3,"U32Digits"],[3,"U64Digits"],[4,"IntErrorKind"],[3,"Global"],[3,"Vec"],[3,"Demand"],[3,"Pin"],[15,"f32"],[3,"String"],[3,"TryFromBigIntError"],[3,"TypeId"],[4,"FpCategory"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"FnOnce"],[8,"Index"],[8,"Try"],[8,"Generator"],[8,"Deref"],[8,"Residual"],[8,"AddAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"Fn"],[8,"FnMut"],[8,"CheckedSub"],[8,"RangeBounds"],[8,"DerefMut"],[8,"DivAssign"],[8,"Drop"],[8,"FromResidual"],[8,"IndexMut"],[8,"One"],[8,"Zero"],[8,"MulAssign"],[8,"RemAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"SubAssign"],[8,"FloatConst"],[8,"Num"],[8,"Inv"],[8,"MulAdd"],[8,"Pow"],[8,"Float"],[8,"Signed"],[8,"AsPrimitive"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedEuclid"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"PrimInt"],[8,"Euclid"],[8,"NumCast"],[8,"FromPrimitive"],[8,"Bounded"],[8,"MulAddAssign"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"ToPrimitive"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"FloatCore"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Real"]],"a":{"!":[43],"%":[71,72],"%=":[72],"&":[5],"&*":[19],"&=":[6],"*":[19,20,39,40],"*=":[40],"+":[0,1],"+=":[1],"-":[41,81,82],"-=":[82],"..":[64,66,67,69],"..=":[68,70],"/":[22,23],"/=":[23],"<<":[76],"<<=":[77],">>":[78],">>=":[79],"?":[84],"[":[35,36],"[]":[35,36],"]":[35,36],"^":[9],"^=":[10],"|":[7],"|=":[8]}},\
"hacspec_halo2":{"doc":"Protocol","t":[6,6,3,6,5,5,11,11,5,5,5,5,5,5,5,5,5,11,5,5,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11],"n":["CRS","InputVar","PublicParams","Term","add_polyx","add_scalar_polyx","borrow","borrow_mut","calculate_L_or_R","check_not_zero","commit_polyx","compute_h","compute_vanishing_polynomial","divide_leading_terms","divide_poly","eval_multi_poly","eval_polyx","from","halo2","inner_product","into","legrange_basis","legrange_poly","msm","mul_scalar_polyx","multi_poly_with_x","multi_poly_with_x_pow","multi_to_uni_poly","multiply_poly_by_single_term","poly_degree","reduce_multi_poly","reduce_multi_term","sigma","step_1","step_10","step_11","step_12","step_13","step_14","step_15","step_16","step_17","step_18","step_19","step_2","step_20","step_21","step_22","step_23","step_24","step_25","step_26","step_3","step_4","step_5","step_6","step_7","step_8","step_9","sub_polyx","sub_scalar_polyx","trim_poly","try_from","try_into","type_id"],"q":["hacspec_halo2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Common Reference Struct","A representation of input variable in multivariate …","A struct for the public parameters, pp Since the group and …","A term in a multivariate polynomial","Add two polynomials, return resulting polynomial","Add a scalar (constant) from a polynomial, return …","","","Auxilary function for computing L_j or R_j in step 24","Checks if all entries in a polynomial is 0","Pedersen vector commitment (1.3 in protocol)","Compute the h(x) polynomial, used in step 4 and 13","Compute vanishing polynomial over n-order multiplicative …","divide the leading terms of two polynomials, returning a …","Perform polynomial long division, returning the quotient …","Evaluate a multivariate polynomials and return the …","Evaluate a polynomial at point, return the evaluation","Returns the argument unchanged.","","Inner product, between to equal length vectors of field …","Calls <code>U::from(self)</code>.","Finds the legrange basis for a set of <code>points</code> and a single …","Find lowest degree polynomial passing through a set points …","Multiscalar multiplicatoin, auxiliary function for …","Multiply a polynomial by a scalar, return resulting …","","","Evaluate a multivariate polynomial in variables such that …","Multiply a polynomial with a single term (e.g. 5x^3), with …","Get the degree of a polynomial","Evaluate a polynomial in some specified variables and …","Evaluate a term with specified variable inputs Helper …","Implementation of the σ mapping from the protocol","","Step 10 This functions initializes the s sequence of …","Step 11 Get the list of Q’s (Q_0, …, Q_{n_q - 1})","Step 12 Get the list of q’s (q_0, …, q_{n_q - 1})","Step 13 Get the list of r’s (r_0, …, r_{n_q - 1})","Step 14 Get the commitment Q’","This function emulates sending a challenge. It takes a …","Step 16 Get the u ∈ F^{n_q} vector","This function emulates sending a challenge. It takes a …","Arguments","Step 19 Get the p(X) polynomial","","Step 20","Step 21","Step 22 Get the P’ curve-point/group-element","Step 23 Get the p’(X) polynomial","Step 24","Step 25","Varifiers final check of the protocol","","Step 4 Beginning of the vanishing argument","Step 5 split polynomial of degree n_g(n-1)-n up into n_…","Step 6","Step 7 Computes the sum from step 7 in the protocol …","Step 8 This functions calculates h’(X) from the h_i …","Step 9 This functions returns r(x) and creates a seq …","Subtract two polynomials, return resulting polynomial","Subtract a scalar (constant) from a polynomial, return …","Trim a polynomial of trailing zeros (zero-terms) and …","","",""],"i":[0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,9,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9],"f":[0,0,0,0,[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],1],[[2,[1]]]],[[]],[[]],[[[2,[1]],[2,[1]],[2,[3]],1,3,3],3],[[[2,[1]]],4],[[[2,[1]],1],3],[[[2,[1]]],[[2,[1]]]],[[1,5],[[2,[1]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]]]],[[2,[2,[1]]],1],[[[2,[1]],1],1],[[]],[[]],[[[2,[1]],[2,[1]]],1],[[]],[[2,1],[[2,[1]]]],[2,[[2,[1]]]],[[[2,[1]],[2,[3]]],3],[[[2,[1]],1],[[2,[1]]]],[[[2,[1]]],[[2,[1]]]],[[[2,[1]],6],[[2,[1]]]],[[2,2],[[2,[1]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]]],5],[[2,2],2],[[2,6]],[[5,2],[[2,[5]]]],[[]],[[1,[2,[[2,[5]]]],1,[2,[[2,[1]]]],5,5],[[2,[[2,[1]]]]]],[[5,5,1,3,3,[2,[3]],[2,[[2,[5]]]]],[[2,[3]]]],[[5,5,1,[2,[1]],[2,[1]],[2,[[2,[1]]]],[2,[[2,[5]]]]],[[2,[[2,[1]]]]]],[[5,5,5,1,1,1,1,[2,[[2,[1]]]],[2,[[2,[5]]]],[2,[[2,[1]]]],[2,[1]]],[[2,[[2,[1]]]]]],[[1,5,5,[2,[[2,[1]]]],[2,[[2,[1]]]],[2,[[2,[5]]]],1],3],[1,1],[[5,1,[2,[[2,[1]]]]],[[2,[1]]]],[1,1],[[1,1,1,1,1,5,5,1,3,[2,[3]],[2,[1]],[2,[[2,[1]]]],[2,[[2,[5]]]]]],[[1,[2,[1]],[2,[[2,[1]]]]],[[2,[1]]]],[[]],[[[2,[1]],1],3],[[1,1]],[[3,3,3,1,1],3],[[[2,[1]],[2,[1]],1,1],[[2,[1]]]],[[[2,[1]],[2,[3]],1,1,3,3,5,6,[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[3]],3,[2,[3]],1,3,1,1,3,1,3],4],[[]],[[[2,[1]],1,5],[[2,[1]]]],[[[2,[1]],5],[[2,[[2,[1]]]]]],[[[2,[[2,[1]]]],[2,[1]]],[[2,[3]]]],[[[2,[3]],1,5],3],[[[2,[[2,[1]]]],1,5],[[2,[1]]]],[[[2,[1]],[2,[[2,[1]]]],6,6,1,[2,[[2,[5]]]],1]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],1],[[2,[1]]]],[[[2,[1]]],[[2,[1]]]],[[],7],[[],7],[[],8]],"p":[[3,"Fp"],[3,"Seq"],[6,"G1"],[15,"bool"],[15,"u128"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"PublicParams"]]},\
"hacspec_lib":{"doc":"The hacspec standard library","t":[0,14,14,14,14,14,14,0,14,14,14,14,0,14,0,14,14,14,14,14,0,14,14,14,14,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,18,3,3,8,8,8,8,8,8,4,13,18,8,8,13,13,4,8,8,14,14,8,8,8,8,8,8,8,13,16,16,13,8,8,8,8,8,16,8,4,13,3,5,5,5,5,3,5,5,5,5,3,5,5,5,5,3,5,5,5,5,3,5,5,5,5,13,8,8,8,13,13,8,8,8,18,8,13,8,8,8,8,10,11,11,11,11,11,11,11,11,11,11,11,8,8,4,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,3,8,8,14,14,13,8,8,16,16,3,8,3,3,3,3,3,8,8,8,16,16,8,8,16,16,8,8,8,8,8,4,8,8,8,3,8,8,10,11,11,11,11,11,11,11,11,11,11,11,16,8,8,8,16,3,3,5,5,5,5,5,5,5,5,5,3,3,5,5,5,5,5,5,5,5,3,3,5,5,5,5,5,5,5,5,3,3,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,13,8,8,8,8,8,8,3,3,16,13,10,11,11,11,11,11,11,11,11,11,11,11,8,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,14,14,14,14,14,14,14,14,14,14,14,14,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,5,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,5,5,5,5,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,5,10,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,0,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,5,5,5,5,5,3,5,5,5,5,5,5,5,3,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,14,14,5,5,5,5,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,14,14,14,14,14,14,14,5,5,5,5,5,5,5,4,3,8,13,8,14,3,3,3,3,3,8,3,3,13,8,8,8,8,6,13,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,11,14,14,14,14,14,14,8,8,8,8,8,8,8,8,8,8,8,10,13,8,10,10,10,10,10,10,10,10,10,8,8,4,8,16,8,13,10,10,11,10,11,10,8,8,8,8,8,8,8,8,8,8,16,16,16,10,3,8,8,8,10,8,8,8,8,8,11,8,8,8,8,8,8,8,8,8,5,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,0,0,5,10,10,10,10,10,10,10,5,10,10,10,10,10,5,5,5,10,11,10,10,10,10,10,11,10,10,10,0,10,11,11,11,10,10,11,11,10,11,11,11,11,11,10,11,11,10,10,11,11,11,10,11,11,10,0,10,0,10,11,11,10,10,10,10,10,10,11,10,10,10,10,12,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,10,0,0,5,10,10,10,10,0,10,10,11,10,10,10,10,10,10,10,10,11,11,0,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,10,11,11,11,10,10,11,11,11,11,11,11,10,10,10,10,10,10,10,10,5,10,8,8,8,10,10,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,11,10,10,11,10,10,10,10,10,10,10,11,10,10,10,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,8,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,6,6,8,6,5,6,6,3,5,6,3,3,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["array","array","assert_bytes_eq","assert_secret_array_eq","assert_secret_seq_eq","both_arrays","both_bytes","buf","byte_seq","bytes","create_bytes","generic_array","math_integers","nat_mod","prelude","public_byte_seq","public_bytes","public_nat_mod","secret_array","secret_bytes","seq","signed_integer","signed_public_integer","unsigned_integer","unsigned_public_integer","ByteBuffer","borrow","borrow_mut","clone","clone_into","concat_owned","fmt","from","from_seq","into","into_bytes","new","split_off","to_bytes","to_owned","try_from","try_into","type_id","Add","AddAssign","BREAK","BigInt","BigUint","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Bound","Break","CONTINUE","CheckedSub","CoerceUnsized","Complete","Continue","ControlFlow","Debug","Debug","Debug","Debug","Deref","DerefMut","DispatchFromDyn","Display","Div","DivAssign","Drop","Equal","Err","Error","Excluded","Fn","FnMut","FnOnce","FromResidual","FromStr","FromStrRadixErr","Generator","GeneratorState","Greater","I128","I128_from_I16","I128_from_I32","I128_from_I64","I128_from_I8","I16","I16_from_I128","I16_from_I32","I16_from_I64","I16_from_I8","I32","I32_from_I128","I32_from_I16","I32_from_I64","I32_from_I8","I64","I64_from_I128","I64_from_I16","I64_from_I32","I64_from_I8","I8","I8_from_I128","I8_from_I16","I8_from_I32","I8_from_I64","Included","Index","IndexMut","Integer","Less","Minus","ModNumeric","Mul","MulAssign","NUM_BITS","Neg","NoSign","Not","Num","Numeric","NumericCopy","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","One","OneSidedRange","Ordering","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","ParseIntError","PartialEq","PartialEq","PartialEq","PartialEq","Plus","PublicInteger","PublicIntegerCopy","PublicVersion","PublicVersionCopy","Range","RangeBounds","RangeFrom","RangeFull","RangeInclusive","RangeTo","RangeToInclusive","Rem","RemAssign","Residual","Residual","Return","SecretInteger","SecretIntegerCopy","SecretVersion","SecretVersionCopy","SeqTrait","Shl","ShlAssign","Shr","ShrAssign","Sign","Signed","SignedInteger","SignedIntegerCopy","String","Sub","SubAssign","TWO","TWO","TWO","TWO","TWO","TWO","TWO","TWO","TWO","TWO","TWO","TWO","Target","ToString","Try","TryFrom","TryType","U128","U128Word","U128_from_U16","U128_from_U32","U128_from_U64","U128_from_U8","U128_from_be_bytes","U128_from_le_bytes","U128_from_usize","U128_to_be_bytes","U128_to_le_bytes","U16","U16Word","U16_from_U128","U16_from_U32","U16_from_U64","U16_from_U8","U16_from_be_bytes","U16_from_le_bytes","U16_to_be_bytes","U16_to_le_bytes","U32","U32Word","U32_from_U128","U32_from_U16","U32_from_U64","U32_from_U8","U32_from_be_bytes","U32_from_le_bytes","U32_to_be_bytes","U32_to_le_bytes","U64","U64Word","U64_from_U128","U64_from_U16","U64_from_U32","U64_from_U8","U64_from_be_bytes","U64_from_le_bytes","U64_from_usize","U64_to_be_bytes","U64_to_le_bytes","U8","U8_from_U128","U8_from_U16","U8_from_U32","U8_from_U64","U8_from_usize","Unbounded","UnsignedInteger","UnsignedIntegerCopy","UnsignedPublicInteger","UnsignedPublicIntegerCopy","UnsignedSecretInteger","UnsignedSecretIntegerCopy","Vec","Yeet","Yield","Yielded","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","Zero","abs","abs","abs_sub","abs_sub","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","abstract_int","abstract_int","abstract_nat_mod","abstract_public","abstract_public_modular_integer","abstract_public_nat_mod","abstract_secret","abstract_secret_modular_integer","abstract_signed","abstract_signed_public_integer","abstract_signed_secret_integer","abstract_unsigned","abstract_unsigned_public_integer","abstract_unsigned_secret_integer","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_poly","advance_back_by","advance_by","allocator","append","as_bytes","as_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_str","as_mut_vec","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_str","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch","break_value","cadd","call","call_mut","call_once","capacity","capacity","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmul","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","concat","concat","concat","concat","concat","concat","concat","concat","contains","contains","contains","contains","contains","contains","continue_value","count_ones","create","create","create","create","create","create","create","create","create","cset_bit","csub","cswap","cswap_bit","ct_div","ct_util","declassify","declassify","declassify","declassify","declassify","declassify","declassify","declassify","declassify","declassify","declassify_eq","declassify_eq","declassify_eq","declassify_eq","declassify_u128_from_U128","declassify_u128_from_U32","declassify_u128_from_U64","declassify_u128_from_U8","declassify_u16_from_U16","declassify_u16_from_U8","declassify_u32_from_U16","declassify_u32_from_U32","declassify_u32_from_U8","declassify_u64_from_U16","declassify_u64_from_U32","declassify_u64_from_U64","declassify_u64_from_U8","declassify_u8_from_U8","declassify_usize_from_U8","dedup","dedup_by","dedup_by_key","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","define_abstract_integer_checked","define_refined_modular_integer","degree_poly","deref","deref","deref","deref_mut","deref_mut","deref_mut","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_poly","div_rem","div_rem","div_scalar","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divides","divides","drain","drain","drain_filter","drop","drop","end","end","end","end","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","extend","extend","extend","extend","extend","extend","extend","extend","extend_from_slice","extend_from_within","extend_from_within","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extended_euclid","extended_gcd_lcm","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_i128","from_i128","from_i64","from_i64","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_output","from_output","from_public_array","from_public_array","from_public_array","from_public_array","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_raw_parts","from_raw_parts","from_raw_parts_in","from_residual","from_residual","from_seq","from_seq","from_seq","from_seq","from_seq","from_seq","from_seq","from_seq","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","from_utf16","from_utf16_lossy","from_utf8","from_utf8_lossy","from_utf8_unchecked","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","gcd","gcd","gcd_lcm","gcd_lcm","get","get","get","get","get","get","get","get","get","get","get","get","get_bit","get_bit","get_bit","get_bit","get_bit","get_bit","get_bit","get_bit","get_bit","get_bit","get_bit","get_bit","get_byte","get_byte","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hex_string_to_bytes","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert","insert_str","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_boxed_slice","into_boxed_str","into_bytes","into_bytes","into_bytes","into_flattened","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_le_bytes","into_le_bytes","into_le_bytes","into_le_bytes","into_parts","into_raw_parts","into_raw_parts","into_raw_parts_with_alloc","into_searcher","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","is_break","is_contained_in","is_continue","is_empty","is_empty","is_empty","is_empty","is_eq","is_even","is_even","is_ge","is_gt","is_le","is_lt","is_multiple_of","is_multiple_of","is_ne","is_negative","is_negative","is_odd","is_odd","is_one","is_one","is_one","is_positive","is_positive","is_prefix_of","is_sorted","is_sorted","is_suffix_of","is_write_vectored","is_zero","is_zero","is_zero","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","kind","last","last","lcm","lcm","leak","leak","len","len","len","len","len","len","len","len","len","len","len","length","length","length","length","length","length","length","length","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","magnitude","make_positive","map","map_break","map_continue","max","max","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","min","min","min","mod_floor","mod_floor","modpow","modpow","modular_integer","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_poly","mul_poly_irr","nat_mod","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new_in","next","next","next","next_back","next_back","next_multiple_of","next_multiple_of","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","nth","nth","nth","nth_back","nth_back","nth_root","nth_root","nth_root","nth_root","num","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","one","one","one","one","one","one","one","one","one","one","one","one","one","one","ones","ones","ones","ones","ones","ones","ones","ones","ones","ones","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","poly","poly_to_ring","pop","pop","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","prev_multiple_of","prev_multiple_of","product","product","provide","push","push","push_str","push_within_capacity","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","remove","remove","remove_matches","replace_range","reserve","reserve","reserve_exact","reserve_exact","resize","resize_with","resume","retain","retain","retain_mut","reverse","rfold","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","set","set","set","set","set","set","set","set","set","set","set","set","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_len","set_one","set_one","set_one","set_zero","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shrink_to","shrink_to","shrink_to_fit","shrink_to_fit","sign","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signum","signum","size_hint","size_hint","size_hint","slice","slice","slice","slice","slice","slice","slice","slice","slice_range","slice_range","slice_range","slice_range","slice_range","slice_range","slice_range","slice_range","spare_capacity_mut","splice","split_at_spare_mut","split_off","split_off","sqrt","sqrt","sqrt","sqrt","start","start","start","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","strip_prefix_of","strip_suffix_of","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_poly","sum","sum","swap_remove","then","then_with","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_U128s_le","to_U128s_le","to_array","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_u32s","to_be_u32s","to_be_u32s","to_be_u32s","to_be_u64s","to_be_u64s","to_be_u64s","to_be_u64s","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_i128","to_i128","to_i64","to_i64","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_u32s","to_le_u32s","to_le_u32s","to_le_u32s","to_le_u64s","to_le_u64s","to_le_u64s","to_le_u64s","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_array","to_public_array","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_socket_addrs","to_str_radix","to_str_radix","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_u128","to_u128","to_u128s_be","to_u128s_be","to_u128s_be","to_u128s_be","to_u128s_le","to_u128s_le","to_u128s_le","to_u128s_le","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64_digits","to_u64_digits","trailing_ones","trailing_zeros","trailing_zeros","traits","truncate","truncate","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve","try_reserve_exact","try_reserve_exact","try_rfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128Word","u128_from_U16","u128_from_be_bytes","u128_from_le_bytes","u128_to_be_bytes","u128_to_le_bytes","u16Word","u16_from_U128","u16_from_U32","u16_from_U64","u16_from_be_bytes","u16_from_le_bytes","u16_to_be_bytes","u16_to_le_bytes","u32Word","u32_from_U128","u32_from_U64","u32_from_be_bytes","u32_from_le_bytes","u32_to_be_bytes","u32_to_le_bytes","u64Word","u64_from_U128","u64_from_be_bytes","u64_from_le_bytes","u64_to_be_bytes","u64_to_le_bytes","u8_from_U128","u8_from_U16","u8_from_U32","u8_from_U64","update","update","update","update","update","update","update","update","update","update","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_start","update_start","update_start","update_start","update_start","update_start","update_start","update_start","update_start","update_start","vec","vec","vec","vec","vec_poly_add","vec_poly_mul","vec_poly_sub","weight","with_capacity","with_capacity","with_capacity_in","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","write","write_all","write_char","write_str","write_vectored","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","abstract_int","abstract_public","abstract_secret","abstract_signed","abstract_signed_public_integer","abstract_signed_secret_integer","abstract_unsigned","abstract_unsigned_public_integer","abstract_unsigned_secret_integer","define_abstract_integer_checked","cadd","cmul","cset_bit","csub","cswap","cswap_bit","ct_div","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Error","Formatter","Left","LowerExp","LowerHex","Octal","Pointer","Result","Right","UpperExp","UpperHex","Write","align","alternate","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","description","entries","entries","entries","entry","entry","entry","eq","eq","field","field","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","precision","provide","sign_aware_zero_pad","sign_minus","sign_plus","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str","abstract_nat_mod","abstract_public_modular_integer","abstract_public_nat_mod","abstract_secret_modular_integer","define_refined_modular_integer","modular_integer","AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","E","Empty","Euclid","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","Output","Output","Output","PI","ParseFloatError","Pow","PrimInt","RefNum","SQRT_2","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","TAU","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs","abs","abs_sub","abs_sub","abs_sub","acos","acosh","as_","asin","asinh","atan","atan2","atanh","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","cbrt","ceil","checked_add","checked_div","checked_div_euclid","checked_mul","checked_neg","checked_pow","checked_rem","checked_rem_euclid","checked_shl","checked_shr","checked_sub","clamp","clamp_max","clamp_min","classify","copysign","cos","cosh","count_ones","count_zeros","div_euclid","epsilon","exp","exp2","exp_m1","float","floor","fmt","fmt","fmt","fract","from","from","from","from_be","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_le","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hypot","identities","infinity","int","integer_decode","into","into","inv","is_finite","is_infinite","is_nan","is_negative","is_normal","is_one","is_positive","is_sign_negative","is_sign_positive","is_zero","kind","leading_ones","leading_zeros","ln","ln_1p","log","log10","log2","max","max_value","max_value","min","min_positive_value","min_value","min_value","mul_add","mul_add","mul_add_assign","nan","neg_infinity","neg_zero","one","one","ops","pow","pow","pow","pow","powf","powi","real","recip","rem_euclid","reverse_bits","rotate_left","rotate_right","round","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","set_one","set_zero","sign","signed_shl","signed_shr","signum","signum","signum","sin","sin_cos","sinh","sqrt","swap_bytes","tan","tanh","to_be","to_degrees","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_le","to_radians","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trailing_ones","trailing_zeros","trunc","try_from","try_from","try_into","try_into","type_id","type_id","unsigned_shl","unsigned_shr","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","zero","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum","Drain","Drain","DrainFilter","DrainFilter","IntoIter","IntoIter","Splice","Splice","Vec","Vec","advance_back_by","advance_by","allocator","allocator","allocator","as_mut_slice","as_ref","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","count","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","keep_rest","keep_rest","next","next","next","next","next_back","next_back","next_back","next_chunk","size_hint","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Byte","Byte","ByteSeq","ByteTrait","Bytes","DoubleByte","DoubleByte","PublicByteSeq","PublicSeq","QuadByte","QuadByte","SecretSeq","Seq","U16Trait","U32Trait","absolute","absolute","add","add","add_mod","add_mod","as_slice","as_slice","bitand","bitand","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","concat","concat","concat","concat_owned","concat_owned","concat_owned","create","create","create","create_bytes","declassify","declassify","declassify","declassify","declassify","declassify","default","default","default","divide","divide","eq","eq","eq","equal","equal","equal_bm","equal_bm","exp","exp","fmt","fmt","fmt","from","from","from","from_hex","from_hex","from_native","from_native","from_native_slice","from_native_slice","from_native_slice","from_public_seq","from_public_seq","from_public_seq","from_public_seq","from_public_seq","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_seq","from_seq","from_seq","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_string","from_string","from_vec","from_vec","from_vec","get_chunk","get_chunk","get_chunk","get_exact_chunk","get_exact_chunk","get_exact_chunk","get_remainder_chunk","get_remainder_chunk","get_remainder_chunk","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into_bytes","into_bytes","into_native","into_native","into_native","into_native","into_native","into_native","into_slice","into_slice","into_slice","into_slice_range","into_slice_range","into_slice_range","inv","inv","iter","iter","iter","len","len","len","len","len","len","less_than","less_than","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","max_val","max_val","modulo","modulo","mul","mul","mul_mod","mul_mod","native_slice","native_slice","native_slice","new","new","new","not","not","not_equal_bm","not_equal_bm","num_chunks","num_chunks","num_chunks","num_exact_chunks","num_exact_chunks","num_exact_chunks","pop","pop","pop","pow_mod","pow_mod","pow_self","pow_self","push","push","push","push_owned","push_owned","push_owned","reserve","reserve","reserve","set_chunk","set_chunk","set_chunk","set_exact_chunk","set_exact_chunk","set_exact_chunk","shl","shl","shr","shr","signed_modulo","signed_modulo","slice","slice","slice","slice_range","slice_range","slice_range","split_off","split_off","split_off","sub","sub","sub_mod","sub_mod","to_hex","to_hex","to_native","to_native","to_native","to_native","to_native","to_native","to_owned","to_owned","to_owned","truncate","truncate","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update","update","update_owned","update_owned","update_owned","update_slice","update_slice","update_slice","update_start","update_start","update_start","with_capacity","with_capacity","with_capacity","wrap_add","wrap_add","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_sub","wrap_sub"],"q":["hacspec_lib","","","","","","","","","","","","","","","","","","","","","","","","","hacspec_lib::buf","","","","","","","","","","","","","","","","","","hacspec_lib::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hacspec_lib::prelude::abstract_int","","","","","","","","","","hacspec_lib::prelude::ct_util","","","","","","","hacspec_lib::prelude::fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hacspec_lib::prelude::nat_mod","","","","","","hacspec_lib::prelude::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hacspec_lib::prelude::traits::bounds","","","","","","","hacspec_lib::prelude::traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hacspec_lib::prelude::traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hacspec_lib::prelude::traits::identities","","","","","","","","","","hacspec_lib::prelude::traits::int","","","","","","","","","","","","","","","","","","","","hacspec_lib::prelude::traits::ops","","","","","","","hacspec_lib::prelude::traits::ops::checked","","","","","","","","","","","","","","","","hacspec_lib::prelude::traits::ops::euclid","","","","","","hacspec_lib::prelude::traits::ops::inv","","","hacspec_lib::prelude::traits::ops::mul_add","","","","","hacspec_lib::prelude::traits::ops::overflowing","","","","","","hacspec_lib::prelude::traits::ops::saturating","","","","","","","","","hacspec_lib::prelude::traits::ops::wrapping","","","","","","","","","","","","hacspec_lib::prelude::traits::pow","","","","","hacspec_lib::prelude::traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hacspec_lib::prelude::traits::sign","","","","","","","","","","hacspec_lib::prelude::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hacspec_lib::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Arrays","Create a new array with the given name, length, and type.","","","","","","hacspec buffer","","Convenience function to create a new byte array (of type <code>U8</code>…","","","Math Integers","","This module conveniently exports common subroutines …","","Convenience function to create a new public byte array (of …","","","","Sequences","","","","","","","","","","Add a new chunk of <code>Bytes</code> to this <code>ByteBuffer</code>.","","Returns the argument unchanged.","Create a buffer from <code>Bytes</code>.","Calls <code>U::from(self)</code>.","Get the buffer a single <code>Bytes</code> object (efficient, consuming …","Create an empty buffer.","Split off <code>num</code> bytes and return the <code>Bytes</code>.","Get the buffer a single <code>Bytes</code> object (not efficient).","","","","","The addition operator <code>+</code>.","The addition assignment operator <code>+=</code>.","APIs like <code>try_for_each</code> don’t need values with <code>Break</code>, so …","A big signed integer type.","A big unsigned integer type.","The bitwise AND operator <code>&amp;</code>.","The bitwise AND assignment operator <code>&amp;=</code>.","The bitwise OR operator <code>|</code>.","The bitwise OR assignment operator <code>|=</code>.","The bitwise XOR operator <code>^</code>.","The bitwise XOR assignment operator <code>^=</code>.","An endpoint of a range of keys.","Exit the operation without running subsequent phases.","It’s frequently the case that there’s no value needed …","Performs subtraction that returns <code>None</code> instead of wrapping …","Trait that indicates that this is a pointer or a wrapper …","The generator completed with a return value.","Move on to the next phase of the operation as normal.","Used to tell an operation whether it should exit early or …","<code>?</code> formatting.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","Derive macro generating an impl of the trait <code>Debug</code>.","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>.","<code>DispatchFromDyn</code> is used in the implementation of object …","Format trait for an empty format, <code>{}</code>.","The division operator <code>/</code>.","The division assignment operator <code>/=</code>.","Custom code within the destructor.","An ordering where a compared value is equal to another.","The associated error which can be returned from parsing.","The type returned in the event of a conversion error.","An exclusive bound.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to specify which residuals can be converted into …","Parse a value from a string","","The trait implemented by builtin generator types.","The result of a generator resumption.","An ordering where a compared value is greater than another.","","","","","","","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","","","<strong>Warning:</strong> wrapping semantics.","","<strong>Warning:</strong> wrapping semantics.","","","<strong>Warning:</strong> wrapping semantics.","","","","","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","An inclusive bound.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in mutable …","This trait extends the <code>Numeric</code> trait and is implemented by …","An ordering where a compared value is less than another.","","","The multiplication operator <code>*</code>.","The multiplication assignment operator <code>*=</code>.","","The unary negation operator <code>-</code>.","","The unary logical negation operator <code>!</code>.","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The <code>Numeric</code> trait has to be implemented by all numeric …","","","","","","","","","","","","","","Defines a multiplicative identity element for <code>Self</code>.","<code>OneSidedRange</code> is implemented for built-in range types that …","An <code>Ordering</code> is the result of a comparison between two …","The resulting type after applying the <code>+</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>*</code> operator.","The resulting type after applying the <code>/</code> operator.","The resulting type after applying the <code>%</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>!</code> operator.","The resulting type after applying the <code>&amp;</code> operator.","The resulting type after applying the <code>|</code> operator.","The resulting type after applying the <code>^</code> operator.","The resulting type after applying the <code>&lt;&lt;</code> operator.","The resulting type after applying the <code>&gt;&gt;</code> operator.","The returned type after the call operator is used.","The returned type after indexing.","The type of the value produced by <code>?</code> when <em>not</em> …","An error which can be returned when parsing an integer.","Trait for equality comparisons.","Trait for equality comparisons.","Derive macro generating an impl of the trait <code>PartialEq</code>.","Derive macro generating an impl of the trait <code>PartialEq</code>.","","","","","","A (half-open) range bounded inclusively below and …","<code>RangeBounds</code> is implemented by Rust’s built-in range …","A range only bounded inclusively below (<code>start..</code>).","An unbounded range (<code>..</code>).","A range bounded inclusively below and above (<code>start..=end</code>).","A range only bounded exclusively above (<code>..end</code>).","A range only bounded inclusively above (<code>..=end</code>).","The remainder operator <code>%</code>.","The remainder assignment operator <code>%=</code>.","Allows retrieving the canonical type implementing <code>Try</code> that …","The type of the value passed to <code>FromResidual::from_residual</code>","The type of value this generator returns.","","","","","Common trait for all byte arrays and sequences.","The left shift operator <code>&lt;&lt;</code>. Note that because this trait …","The left shift assignment operator <code>&lt;&lt;=</code>.","The right shift operator <code>&gt;&gt;</code>. Note that because this trait …","The right shift assignment operator <code>&gt;&gt;=</code>.","A Sign is a <code>BigInt</code>’s composing element.","Useful functions for signed numbers (i.e. numbers that can …","","","A UTF-8–encoded, growable string.","The subtraction operator <code>-</code>.","The subtraction assignment operator <code>-=</code>.","","","","","","","","","","","","","The resulting type after dereferencing.","A trait for converting a value to a <code>String</code>.","The <code>?</code> operator and <code>try {}</code> blocks.","Simple and safe type conversions that may fail in a …","The “return” type of this meta-function.","","Fixed length byte array.","","","","","","","","","","","Fixed length byte array.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","","","","","","","Fixed length byte array.","<strong>Warning:</strong> wrapping semantics.","","<strong>Warning:</strong> wrapping semantics.","","","","","","","Fixed length byte array.","<strong>Warning:</strong> wrapping semantics.","","","","","","","","","","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","","An infinite endpoint. Indicates that there is no bound in …","","","","","","","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","Implement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …","The type of value this generator yields.","The generator suspended with a value.","","","","","","","","","","","","","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","","The positive difference of two numbers.","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code> TODO: Check if <code>abs</code> is ct","<code>|self|</code>","<code>|self|</code> TODO: Check if <code>abs</code> is ct","<code>|self|</code> TODO: Check if <code>abs</code> is ct","<code>|self|</code> TODO: Check if <code>abs</code> is ct","<code>|self|</code> TODO: Check if <code>abs</code> is ct","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","","","","","","","","","","","","Performs the <code>+</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>+=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code> (coefficient-wise)","<code>(self + rhs) % n</code> (coefficient-wise)","<code>(self + rhs) % n</code> (coefficient-wise)","<code>(self + rhs) % n</code> (coefficient-wise)","Polynomial Addition, calculates a + b mod modulo","","","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Returns a byte slice of this <code>String</code>’s contents.","","","","Converts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.","Returns an unsafe mutable pointer to the vector’s …","Extracts a mutable slice of the entire vector.","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","Returns a raw pointer to the vector’s buffer, or a …","","","","","","","Converts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.","Extracts a slice containing the entire vector.","Extracts a string slice containing the entire <code>String</code>.","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","Performs the <code>&amp;</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>&amp;=</code> operation.","","","","","","","","","","","","","","","Performs the <code>|</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>|=</code> operation.","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","Performs the <code>^</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>^=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Used in <code>?</code> to decide whether the operator should produce a …","","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","Add two numerics if condition <code>c</code> is set (all bits 1). …","Performs the call operation.","Performs the call operation.","Performs the call operation.","Returns the total number of elements the vector can hold …","Returns this <code>String</code>’s capacity, in bytes.","","Returns the truncated principal cube root of <code>self</code> – see …","Returns the truncated principal cube root of <code>self</code> – see …","","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","","","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","","","","","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","","","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","","Subtracts two numbers, checking for underflow. If …","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","","","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the vector, removing all values.","Truncates this <code>String</code>, removing all contents.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Map a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …","","","","","","","","","","","","Multiply two numerics if condition <code>c</code> is set (all bits 1). …","Produces a new integer which is all ones if the two …","Produces a new integer which is all ones if the two …","Produces a new integer which is all ones if the two …","Produces a new integer which is all ones if the two …","Produces a new integer which is all ones if the two …","","","","","","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","","","","","","","","","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","Returns the number of one bits.","","","","","","","","","","Set bit at position <code>i</code> in <code>x</code> to <code>b</code> if <code>c</code> is all 1 and return …","Subtract two numerics if condition <code>c</code> is set (all bits 1). …","Conditional, constant-time swapping. Returns <code>(x, y)</code> if …","Conditional, constant-time swapping. Returns <code>(x, y)</code> if …","Constant time division for Numerics. Note that this …","","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","","","","","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","","","","","","","","","","","","","","","","","","","","","Creates an empty <code>Vec&lt;T&gt;</code>.","Creates an empty <code>String</code>.","","","Defines a bounded natural integer with regular arithmetic …","Defines a bounded natural integer with modular arithmetic …","Returns degree of polynomial, e.g. for  3x² + 2x + 1 -&gt; 2","Dereferences the value.","","","Mutably dereferences the value.","","","","Performs the <code>/</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>/=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Euclidean polynomial division, calculates <code>a/b</code> in <code>R_n</code>. …","","","Scalar division in <code>R_p</code>. Returns <code>a / scalar mod p</code>.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","<code>self / rhs</code> (coefficient-wise and wrapping).","<code>self / rhs</code> (coefficient-wise and wrapping).","<code>self / rhs</code> (coefficient-wise and wrapping).","<code>self / rhs</code> (coefficient-wise and wrapping).","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Removes the specified range from the vector in bulk, …","Removes the specified range from the string in bulk, …","Creates an iterator which uses a closure to determine if …","Executes the destructor for this type.","","Returns the upper bound of the range (inclusive).","The upper bound of the range (exclusive).","The upper bound of the range (exclusive).","The upper bound of the range (inclusive)","End index bound.","","","","","","","","","","","","This method tests for <code>self</code> and <code>other</code> values to be equal, …","This method tests for <code>self</code> and <code>other</code> values to be equal, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>. <strong>Note:</strong> the exponent <code>exp</code> MUST …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>. <strong>Note:</strong> the exponent <code>exp</code> MUST …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>. <strong>Note:</strong> the exponent <code>exp</code> MUST …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>. <strong>Note:</strong> the exponent <code>exp</code> MUST …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>. <strong>Note:</strong> the exponent <code>exp</code> MUST …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>. <strong>Note:</strong> the exponent <code>exp</code> MUST …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>. <strong>Note:</strong> the exponent <code>exp</code> MUST …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>. <strong>Note:</strong> the exponent <code>exp</code> MUST …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>. <strong>Note:</strong> the exponent <code>exp</code> MUST …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>. <strong>Note:</strong> the exponent <code>exp</code> MUST …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code> (coefficient-wise and …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code> (coefficient-wise and …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code> (coefficient-wise and …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code> (coefficient-wise and …","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","Copies elements from <code>src</code> range to the end of the string.","","","","","","","","","","","","Euclidean algorithm to compute the inverse of x in yℤ[x]","Greatest common divisor, least common multiple, and …","","Utilities for formatting and printing strings.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>String</code> using interpolation of runtime …","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Convert a boxed slice into a vector by transferring …","Converts a <code>CString</code> into a Vec&lt;u8&gt;.","Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","Convert a clone-on-write slice into a vector.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Returns the argument unchanged.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Returns the argument unchanged.","Converts a <code>&amp;str</code> into a <code>String</code>.","Allocates an owned <code>String</code> from a single character.","Converts a <code>&amp;String</code> into a <code>String</code>.","Converts a <code>&amp;mut str</code> into a <code>String</code>.","Converts a clone-on-write string to an owned instance of …","Converts the given boxed <code>str</code> slice to a <code>String</code>. It is …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read a hex string (starting with 0x) into an <code>Integer</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get an integer with value <code>val</code>.","","","","","","","","","","","","","","","","","","","","Constructs the type from its <code>Output</code> type.","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …","Creates a new <code>String</code> from a length, capacity, and pointer.","Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …","Constructs the type from a compatible <code>Residual</code> type.","","","","","","","","","","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","","","","","","","","","","","Parses a string <code>s</code> to return a value of this type.","","","","Convert from a string and radix (typically <code>2..=36</code>).","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Decode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …","Decode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","","","","","","","","","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get byte <code>i</code> of this integer.","Get byte <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the mutable indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts an element at position <code>index</code> within the vector, …","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","Converts this <code>String</code> into a Box&lt;str&gt;.","","","Converts a <code>String</code> into a byte vector.","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","Destructures the <code>RangeInclusive</code> into (lower bound, upper …","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>String</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","","Invert self modulo n.","Invert self modulo n. FIXME: make ct","Invert self modulo n. FIXME: make ct","Invert self modulo n. FIXME: make ct","Invert self modulo n. FIXME: make ct","Invert self modulo n. FIXME: make ct","Invert self modulo n. FIXME: make ct","Invert self modulo n.","Invert self modulo n. FIXME: make ct","Invert self modulo n. FIXME: make ct","Invert self modulo n. FIXME: make ct","Invert self modulo n. FIXME: make ct","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","<strong>Not implemented</strong>","<strong>Not implemented</strong>","<strong>Not implemented</strong>","<strong>Not implemented</strong>","Returns <code>true</code> if this is a <code>Break</code> variant.","","Returns <code>true</code> if this is a <code>Continue</code> variant.","Returns <code>true</code> if the vector contains no elements.","Returns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the ordering is the <code>Equal</code> variant.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…","Returns <code>true</code> if the ordering is the <code>Greater</code> variant.","Returns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …","Returns <code>true</code> if the ordering is the <code>Less</code> variant.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.","Returns true if the number is negative and false if the …","","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","","","Returns true if the number is positive and false if the …","","","","","","","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","","","","","","","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Outputs the detailed cause of parsing an integer failing.","","","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Consumes and leaks the <code>String</code>, returning a mutable …","","","","","","","","","","Returns the number of elements in the vector, also …","Returns the length of this <code>String</code>, in bytes, not <code>char</code>s or …","","","","","","","","","","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","<strong>Declassifies</strong>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","makes coefficients positiv, e.g. -3 mod 4 = 1","Maps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented. <strong>Not </strong>…","Return largest value that can be represented. <strong>Not </strong>…","Return largest value that can be represented. <strong>Not </strong>…","Return largest value that can be represented. <strong>Not </strong>…","","","","","","","","","","","Compares and returns the minimum of two values.","","","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code> (coefficient-wise)","<code>self % n</code> (coefficient-wise)","<code>self % n</code> (coefficient-wise)","<code>self % n</code> (coefficient-wise)","Performs the <code>*</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>*=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code> (coefficient-wise) Note that the …","<code>(self * rhs) % n</code> (coefficient-wise) Note that the …","<code>(self * rhs) % n</code> (coefficient-wise) Note that the …","<code>(self * rhs) % n</code> (coefficient-wise) Note that the …","Simple polynomial multiplication for two fixed size …","Polynomial multiplication of two size fixed polynomials in …","","This method tests for <code>!=</code>. The default implementation is …","This method tests for <code>!=</code>. The default implementation is …","","","","","","","","","","","Performs the unary <code>-</code> operation.","","","","","","","","","","","","","Negate Sign value.","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Creates a new empty <code>String</code>.","Creates a new inclusive range. Equivalent to writing …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","","","","","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","Performs the unary <code>!</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","","","","","","","","","","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","","","","","","","","","","","","","","","","","","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","","","","","","","","","Makes poly to an element of R_modulo \\\\ irr","Removes the last element from a vector and returns it, or …","Removes the last character from the string buffer and …","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code> TODO: implement","<code>(self ^ exp) % n</code> TODO: implement","<code>(self ^ exp) % n</code> TODO: implement","<code>(self ^ exp) % n</code> TODO: implement","<code>(self ^ exp) % n</code> TODO: implement","<code>(self ^ exp) % n</code> TODO: implement","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code> TODO: implement","<code>(self ^ exp) % n</code> TODO: implement","<code>(self ^ exp) % n</code> TODO: implement","<code>(self ^ exp) % n</code> TODO: implement","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code> (coefficient-wise) Note that the …","<code>(self ^ exp) % n</code> (coefficient-wise) Note that the …","<code>(self ^ exp) % n</code> (coefficient-wise) Note that the …","<code>(self ^ exp) % n</code> (coefficient-wise) Note that the …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>. Here both, base and …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>. Here both, base and …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>. Here both, base and …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>. Here both, base and …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>. Here both, base and …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>. Here both, base and …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>. Here both, base and …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>. Here both, base and …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>. Here both, base and …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>. Here both, base and …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<strong>Not implemented</strong>.","<strong>Not implemented</strong>.","<strong>Not implemented</strong>.","<strong>Not implemented</strong>.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","Appends an element to the back of a collection.","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Appends an element if there is sufficient spare capacity, …","Performs the <code>%</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>%=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","Removes and returns the element at position <code>index</code> within …","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Remove all matches of pattern <code>pat</code> in the <code>String</code>.","Removes the specified range in the string, and replaces it …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves capacity for at least <code>additional</code> bytes more than …","Reserves the minimum capacity for at least <code>additional</code> more …","Reserves the minimum capacity for at least <code>additional</code> …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resumes the execution of this generator.","Retains only the elements specified by the predicate.","Retains only the characters specified by the predicate.","Retains only the elements specified by the predicate, …","Reverses the <code>Ordering</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Sets or clears the bit in the given position, using the two…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Sets or clears the bit in the given position","","","","","","","","","Forces the length of the vector to <code>new_len</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","","Performs the <code>&lt;&lt;</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>&lt;&lt;=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>&gt;&gt;</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>&gt;&gt;=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of this <code>String</code> with a lower bound.","Shrinks the capacity of the vector as much as possible.","Shrinks the capacity of this <code>String</code> to match its length.","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer FIXME: not …","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer FIXME: not …","<code>self % n</code> that always returns a positive integer FIXME: not …","<code>self % n</code> that always returns a positive integer FIXME: not …","<code>self % n</code> that always returns a positive integer FIXME: not …","","","","","<code>self % n</code> (coefficient-wise)","<code>self % n</code> (coefficient-wise)","<code>self % n</code> (coefficient-wise)","<code>self % n</code> (coefficient-wise)","Returns the sign of the number.","","","","","","","","","","","","","","","","","","","","","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Splits the string into two at the given byte index.","","Returns the truncated principal square root of <code>self</code> – …","","Returns the truncated principal square root of <code>self</code> – …","Returns the lower bound of the range (inclusive).","The lower bound of the range (inclusive).","The lower bound of the range (inclusive).","Start index bound.","","","","","","","","","","","","","","Performs the <code>-</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the <code>-=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","<code>(self - rhs) % n</code> (coefficient-wise)","<code>(self - rhs) % n</code> (coefficient-wise)","<code>(self - rhs) % n</code> (coefficient-wise)","<code>(self - rhs) % n</code> (coefficient-wise)","polynomial subtraction, calculates a - b mod modulo","","","Removes an element from the vector and returns it.","Chains two orderings.","Chains the ordering with the given function.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","Converts the given value to a <code>String</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Returns the number of least-significant bits that are ones.","Returns the number of least-significant bits that are zero,","Returns the number of least-significant bits that are zero,","","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>String</code> to the specified length.","","Performs the conversion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve capacity for at least <code>additional</code> bytes …","Tries to reserve the minimum capacity for at least …","Tries to reserve the minimum capacity for at least …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fixed length byte array.","<strong>Warning:</strong> conversion can be lossy!","","","","","Fixed length byte array.","","","","","","","","Fixed length byte array.","","","","","","","Fixed length byte array.","","","","","","","","","","Update this sequence with <code>v</code> starting at <code>start</code>.","Update this sequence with <code>v</code> starting at <code>start</code>.","","","","","","","","","Update this sequence with <code>l</code> elements of <code>v</code>, starting at …","","","","","","","","","","","","","","","","","","","A contiguous growable array type with heap-allocated …","A contiguous growable array type with heap-allocated …","Creates a <code>Vec</code> containing the arguments.","Creates a <code>Vec</code> containing the arguments.","","","","Returns number of coefficient != 0, e.g. for  -3x⁵ + …","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Creates a new empty <code>String</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …","","","","","","","","","","","","","","","","","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self + rhs</code> (coefficient-wise and wrapping)","","","","","","","","","","","","","","","","","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self + rhs</code> (coefficient-wise and wrapping)","","","","","","","","","","","","","","","","","<code>self * rhs</code> (coefficient-wise and wrapping)","<code>self * rhs</code> (coefficient-wise and wrapping)","<code>self * rhs</code> (coefficient-wise and wrapping)","<code>self * rhs</code> (coefficient-wise and wrapping)","","","","","","","","","","","","","","","","","<code>self - rhs</code> (coefficient-wise and wrapping)","<code>self - rhs</code> (coefficient-wise and wrapping)","<code>self - rhs</code> (coefficient-wise and wrapping)","<code>self - rhs</code> (coefficient-wise and wrapping)","","","","","","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","","","","","","","","","","","","","","","","","","","","","","Defines a bounded natural integer with regular arithmetic …","Add two numerics if condition <code>c</code> is set (all bits 1). …","Multiply two numerics if condition <code>c</code> is set (all bits 1). …","Set bit at position <code>i</code> in <code>x</code> to <code>b</code> if <code>c</code> is all 1 and return …","Subtract two numerics if condition <code>c</code> is set (all bits 1). …","Conditional, constant-time swapping. Returns <code>(x, y)</code> if …","Conditional, constant-time swapping. Returns <code>(x, y)</code> if …","Constant time division for Numerics. Note that this …","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","The error type which is returned from formatting a message …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","Determines if the <code>#</code> flag was specified.","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","Character used as ‘fill’ whenever there is alignment.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","Optionally specified precision for numeric types. …","","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","Writes some formatted information into this instance.","","Writes a string slice into this writer, returning whether …","Writes some data to the underlying buffer contained within …","","","","","","Defines a bounded natural integer with modular arithmetic …","","A generic interface for casting between machine scalars …","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Return Euler’s number.","","","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","","A generic trait for converting a number to a value.","","Unary operator for retrieving the multiplicative inverse, …","","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","An interface for casting between machine scalars.","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","Defines a multiplicative identity element for <code>Self</code>.","The result after applying the operator.","The resulting type after applying the fused multiply-add.","The result after applying the operator.","Return Archimedes’ constant <code>π</code>.","","Binary operator for raising a value to a power.","Generic trait for primitive integers.","The trait for <code>Num</code> references which implement numeric …","Return <code>sqrt(2.0)</code>.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Useful functions for signed numbers (i.e. numbers that can …","Return the full circle constant <code>τ</code>.","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Convert a value to another, using the <code>as</code> operator.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Performs euclid division that returns <code>None</code> instead of …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Raises a value to the power of exp, returning <code>None</code> if an …","Finds the remainder of dividing two numbers, checking for …","Finds the euclid remainder of dividing two numbers, …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Calculates Euclidean division, the matching method for …","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","","Returns the largest integer less than or equal to a number.","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","Returns the argument unchanged.","Returns the argument unchanged.","Convert an integer from big endian to the target’s …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Convert an integer from little endian to the target’s …","Convert from a string and radix (typically <code>2..=36</code>).","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Calculate the length of the hypotenuse of a right-angle …","","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the multiplicative inverse of <code>self</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns true if the number is negative and false if the …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","Returns <code>self</code> to the power <code>rhs</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Convert <code>self</code> to big endian from the target’s endianness.","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Convert <code>self</code> to little endian from the target’s …","Converts degrees to radians.","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Return the integer part of a number.","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number.","A draining iterator for <code>Vec&lt;T&gt;</code>.","A draining iterator for <code>Vec&lt;T&gt;</code>.","An iterator which uses a closure to determine if an …","An iterator which uses a closure to determine if an …","An iterator that moves out of a vector.","An iterator that moves out of a vector.","A splicing iterator for <code>Vec</code>.","A splicing iterator for <code>Vec</code>.","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","","","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns the remaining items of this iterator as a mutable …","","","Returns the remaining items of this iterator as a slice.","Returns the remaining items of this iterator as a slice.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Keep unyielded elements in the source <code>Vec</code>.","Keep unyielded elements in the source <code>Vec</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Variable length byte arrays.","","","Variable length byte arrays.","Variable length byte arrays.","","","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a new sequence of capacity <code>l</code>.","Get a new sequence of capacity <code>l</code>.","Get a new sequence of capacity <code>l</code>.","","","","","","","","","","","Division.","Division.","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the <code>chunk_number</code> chunk of <code>chunk_size</code> from this array …","Get the <code>chunk_number</code> chunk of <code>chunk_size</code> from this array …","Get the <code>chunk_number</code> chunk of <code>chunk_size</code> from this array …","Get the remaining chunk of this array of length less than …","Get the remaining chunk of this array of length less than …","Get the remaining chunk of this array of length less than …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Invert self modulo n.","Invert self modulo n.","","","","Get the size of this sequence.","","Get the size of this sequence.","","","Get the size of this sequence.","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","<code>self % n</code>","<code>self % n</code>","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","","","","","","","","","","","","","","Get the number of chunks of <code>chunk_size</code> in this array. …","Get the number of chunks of <code>chunk_size</code> in this array. …","Get the number of chunks of <code>chunk_size</code> in this array. …","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,51,0,0,0,0,0,0,0,0,0,51,51,0,0,56,51,0,0,0,0,0,0,0,0,0,0,0,0,55,116,117,46,0,0,0,0,0,118,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,55,49,0,0,0,53,0,49,0,0,0,0,53,13,14,15,16,17,12,18,8,10,11,9,0,0,0,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,0,0,0,0,0,49,0,0,111,134,0,0,0,0,0,0,0,0,0,0,133,135,0,0,109,136,0,0,0,0,0,0,0,0,0,0,0,0,53,13,14,15,16,17,12,18,8,10,11,9,137,0,0,0,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,135,56,53,13,14,15,16,17,12,18,8,10,11,9,0,139,18,139,18,140,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,13,14,15,16,17,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,10,11,9,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,20,21,22,19,23,24,25,26,39,141,13,14,15,16,17,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,10,11,9,38,38,38,38,38,38,38,38,39,140,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,0,44,44,45,45,39,45,45,39,46,45,45,39,39,45,45,45,39,39,39,39,46,45,39,18,38,18,38,18,38,18,38,126,13,14,15,16,17,12,18,18,18,18,8,10,11,9,38,38,38,38,20,21,22,19,23,24,25,26,142,13,14,15,16,17,12,18,18,8,10,11,9,38,38,127,13,14,15,16,17,12,18,18,18,18,8,10,11,9,38,38,38,38,20,21,22,19,23,24,25,26,143,13,14,15,16,17,12,18,18,8,10,11,9,38,38,18,38,128,13,14,15,16,17,12,18,18,18,18,8,10,11,9,38,38,38,38,20,21,22,19,23,24,25,26,144,13,14,15,16,17,12,18,18,8,10,11,9,38,38,13,14,15,16,17,12,18,8,10,11,9,38,20,21,22,19,23,24,25,26,49,45,45,39,39,54,55,51,56,57,44,58,59,60,61,46,70,13,14,15,16,17,12,18,8,10,11,9,38,20,21,22,19,23,24,25,26,49,45,45,39,39,54,55,51,56,57,44,58,59,60,61,46,70,133,51,51,0,145,146,131,45,39,18,18,38,38,13,14,15,16,17,12,18,18,8,10,11,9,38,18,18,38,13,14,15,16,17,12,18,18,8,10,11,9,38,147,13,14,15,16,17,12,18,18,8,10,11,9,38,111,134,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,12,12,12,18,8,8,8,10,10,10,11,11,11,9,9,9,45,39,13,14,15,16,17,12,18,8,10,11,9,38,20,21,22,19,23,24,25,26,49,45,39,54,55,51,56,57,44,58,59,60,61,46,18,38,45,39,13,14,15,16,17,12,18,8,10,11,9,38,20,21,22,19,23,24,25,26,49,45,39,54,55,51,56,57,44,58,59,60,61,46,46,18,38,23,24,25,26,49,45,39,55,56,0,13,14,15,16,17,12,8,10,11,9,13,14,15,16,17,12,8,10,11,9,13,14,15,16,17,12,8,10,11,9,13,14,15,16,17,12,8,10,11,9,13,14,15,16,17,12,8,10,11,9,13,14,15,16,17,12,8,10,11,9,20,21,22,19,23,24,25,26,148,44,58,59,60,61,51,38,92,20,21,22,19,23,24,25,26,0,0,0,0,0,0,13,14,15,16,17,12,8,10,11,9,20,21,22,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,13,14,15,16,17,12,18,8,10,11,9,38,20,21,22,19,23,24,25,26,45,39,57,44,0,0,0,137,45,39,149,45,39,54,122,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,23,24,25,26,150,18,18,18,18,18,18,18,18,18,18,18,18,18,18,38,38,38,38,38,38,38,38,18,38,18,38,18,38,0,18,38,0,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,18,38,45,39,45,151,45,60,44,59,61,148,57,44,44,58,58,59,59,60,60,61,61,115,115,18,38,23,24,25,26,49,45,45,45,45,45,45,39,39,39,39,54,55,51,56,57,44,58,59,60,61,46,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,45,45,39,39,39,39,39,39,45,45,39,45,45,39,39,39,39,39,45,45,39,39,0,18,45,0,100,100,152,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,12,12,12,18,18,18,18,18,18,8,8,8,10,10,10,11,11,11,9,9,9,38,38,38,38,38,38,20,21,22,19,23,24,25,26,49,45,39,39,54,54,55,51,56,57,44,58,59,60,61,46,70,60,0,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,12,12,12,12,12,12,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,8,8,8,8,8,8,10,10,10,10,10,10,10,11,11,11,11,11,11,11,9,9,9,9,9,9,9,38,38,38,38,38,38,38,20,21,22,19,23,24,25,26,49,45,45,45,45,45,45,45,45,45,45,45,39,39,39,39,39,39,39,54,55,51,56,57,44,58,59,60,61,46,70,20,21,22,19,23,24,25,26,153,154,13,13,14,14,15,15,16,16,17,17,12,8,10,11,9,18,18,38,18,38,18,38,20,21,22,19,23,24,25,26,53,13,14,15,16,17,12,18,8,10,11,9,18,38,18,38,45,39,39,39,39,39,39,153,154,13,13,14,14,15,15,16,16,17,17,12,8,10,11,9,53,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,133,51,20,21,22,19,20,21,22,19,18,38,18,38,45,39,45,155,51,20,21,22,19,23,24,25,26,18,18,18,38,20,21,22,19,23,24,25,26,20,21,22,19,23,24,25,26,116,18,38,39,118,18,38,18,38,18,38,39,39,39,39,39,20,21,22,19,23,24,25,26,18,38,18,38,57,57,44,44,58,58,59,59,60,60,61,61,53,13,14,15,16,17,12,18,8,10,11,9,153,153,20,21,22,19,23,24,25,26,20,21,22,19,23,24,25,26,57,57,44,44,58,58,59,59,60,60,61,61,57,57,44,44,58,58,59,59,60,60,61,61,57,57,44,44,58,58,59,59,60,60,61,61,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,18,38,49,45,39,55,51,56,57,44,58,59,60,61,46,0,132,20,20,20,20,20,21,21,21,21,21,22,22,22,22,22,19,19,19,19,19,23,23,23,23,23,24,24,24,24,24,25,25,25,25,25,26,26,26,26,26,45,39,39,39,39,39,39,57,57,44,44,58,58,59,59,60,60,61,61,156,20,20,20,20,21,21,21,21,22,22,22,22,19,19,19,19,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,45,39,39,39,39,39,39,57,57,44,44,58,58,59,59,60,60,61,61,45,39,39,13,14,15,16,17,12,18,8,10,11,9,38,20,21,22,19,23,24,25,26,49,45,39,54,55,51,56,57,44,58,59,60,61,46,70,45,39,14,15,39,45,60,45,45,45,44,58,60,23,24,25,26,18,45,39,45,39,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,51,39,51,45,39,44,60,55,18,38,55,55,55,55,18,38,55,139,18,18,38,157,18,38,139,18,39,44,60,39,45,158,18,38,92,20,21,22,19,23,24,25,26,18,38,18,38,54,44,60,18,38,45,39,92,20,21,22,19,23,24,25,26,45,39,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,18,0,46,51,51,44,60,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,13,14,15,16,17,12,8,10,11,9,0,44,60,18,38,18,38,0,140,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,121,13,14,15,16,17,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,10,11,9,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,20,21,22,19,23,24,25,26,49,159,13,14,15,16,17,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,10,11,9,38,38,38,38,38,38,38,38,140,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,0,0,0,115,115,45,45,45,45,45,45,39,39,39,39,124,13,14,15,16,17,12,18,18,8,10,11,9,49,18,38,20,21,22,19,23,24,25,26,45,39,60,45,44,58,60,44,60,18,38,125,13,14,15,16,17,12,18,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,44,58,60,44,60,18,18,38,38,0,20,21,22,19,23,24,25,26,0,157,13,14,15,16,17,12,18,8,10,11,9,38,13,14,15,16,17,12,8,10,11,9,18,38,18,38,23,24,25,26,49,45,39,55,56,0,0,45,39,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,140,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,18,38,18,38,54,45,39,39,45,123,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,20,21,22,19,160,18,18,18,18,18,18,18,18,18,18,18,18,18,18,38,38,38,38,38,38,38,38,45,39,39,39,45,39,45,39,45,45,135,45,39,45,55,60,53,13,13,14,14,15,15,16,16,17,17,12,12,18,8,8,10,10,11,11,9,9,53,13,13,14,14,15,15,16,16,17,17,12,12,18,8,8,10,10,11,11,9,9,53,13,14,15,16,17,12,18,8,10,11,9,53,13,14,15,16,17,12,18,18,8,10,11,9,38,20,21,22,19,23,24,25,26,45,157,18,38,158,18,38,129,13,14,15,16,17,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,10,11,9,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,20,21,22,19,23,24,25,26,161,13,14,15,16,17,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,10,11,9,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,130,13,14,15,16,17,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,10,11,9,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,20,21,22,19,23,24,25,26,162,13,14,15,16,17,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,10,11,9,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,45,39,45,39,18,140,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,139,18,44,58,60,20,21,22,19,23,24,25,26,20,21,22,19,23,24,25,26,45,45,45,45,39,18,18,38,38,60,44,58,148,57,44,44,58,58,59,59,60,60,61,61,39,39,120,13,14,15,16,17,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,10,11,9,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,20,21,22,19,23,24,25,26,163,13,14,15,16,17,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,10,11,9,38,38,38,38,38,38,38,38,140,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,0,18,38,45,55,55,20,21,22,19,20,21,22,19,0,20,21,22,19,20,21,22,19,153,154,13,13,14,14,15,15,16,16,17,17,12,8,10,11,9,20,21,22,19,23,24,25,26,23,24,25,26,18,38,18,18,38,18,38,18,38,18,38,18,38,20,21,22,19,23,24,25,26,18,38,18,38,20,21,22,19,20,21,22,19,153,154,13,13,14,14,15,15,16,16,17,17,12,8,10,11,9,20,21,22,19,23,24,25,26,23,24,25,26,13,14,15,16,17,12,18,8,10,11,9,38,20,21,22,19,23,24,25,26,49,45,39,54,55,51,56,57,44,58,59,60,61,46,20,21,22,19,18,38,18,38,18,18,39,18,38,164,13,14,15,16,17,12,18,8,10,11,9,38,39,39,54,18,38,23,24,25,26,23,24,25,26,18,38,18,38,18,38,38,18,38,0,45,39,60,117,13,14,15,16,17,12,18,8,10,11,9,38,38,38,38,38,38,38,38,38,20,21,22,19,23,24,25,26,49,45,39,54,55,51,56,57,44,58,59,60,61,46,70,13,14,15,16,17,12,18,8,10,11,9,38,20,21,22,19,23,24,25,26,49,45,39,54,55,51,56,57,44,58,59,60,61,46,70,45,39,45,39,60,13,14,15,16,17,12,18,8,10,11,9,38,20,21,22,19,23,24,25,26,49,45,39,54,55,51,56,57,44,58,59,60,61,46,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,92,20,21,22,19,23,24,25,26,92,20,21,22,19,23,24,25,26,92,92,20,21,22,19,23,24,25,26,0,0,0,0,0,0,0,0,45,39,45,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,42,13,14,15,16,17,12,18,8,10,11,9,20,21,22,19,23,24,25,26,45,45,39,39,45,0,158,13,14,15,16,17,12,18,8,10,11,9,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,0,0,0,93,0,0,0,0,0,93,0,0,0,3,3,94,98,99,97,95,96,3,93,69,94,98,99,97,95,96,3,93,69,94,93,69,94,93,69,94,69,3,3,3,3,3,69,69,97,95,96,97,95,96,93,69,98,99,3,98,99,97,95,96,98,3,100,152,165,166,167,168,169,170,171,93,69,69,94,94,98,99,97,95,96,3,93,69,94,69,98,99,97,95,96,3,93,69,94,96,3,3,69,3,69,3,3,3,93,69,94,69,94,98,99,97,95,96,3,93,69,94,98,99,97,95,96,3,93,69,94,98,99,97,95,96,3,93,69,94,96,3,0,101,3,101,3,3,101,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,103,0,172,172,172,172,172,172,172,172,172,0,0,0,0,118,0,103,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,173,174,175,172,0,0,0,0,172,0,0,0,0,0,172,0,0,0,0,0,0,0,0,0,0,176,139,0,176,139,176,176,177,176,176,176,176,176,103,104,103,104,0,0,0,176,176,178,179,180,181,182,0,183,180,184,185,147,0,0,0,176,176,176,176,186,186,187,176,176,176,176,0,176,103,104,104,176,188,103,104,186,189,189,189,189,189,189,189,189,186,118,189,189,189,189,189,189,176,0,176,0,176,103,104,173,176,176,176,139,176,157,139,176,176,158,104,186,186,176,176,176,176,176,176,190,176,176,176,190,176,176,174,191,176,176,176,0,157,0,0,0,186,175,176,176,0,176,187,186,186,186,176,192,193,194,192,195,157,158,0,186,186,0,176,139,176,176,176,176,186,176,176,186,176,196,196,196,196,196,196,196,196,186,176,104,196,196,196,196,196,196,186,186,176,103,104,103,104,103,104,186,186,197,198,199,200,201,202,0,158,0,0,0,190,203,190,204,0,0,0,0,177,0,188,189,189,189,189,189,189,189,189,189,189,189,189,189,189,196,196,196,196,196,196,196,196,196,196,196,196,196,196,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,176,205,176,176,176,176,176,176,176,176,176,176,205,205,176,176,176,176,205,176,176,176,176,176,205,176,205,176,205,176,205,176,176,205,176,205,176,205,176,205,176,205,176,205,176,176,176,176,176,176,205,205,176,176,205,205,176,205,176,176,205,176,205,176,205,176,176,176,205,176,205,176,205,176,205,176,176,176,176,176,176,205,176,205,176,176,205,0,0,157,158,0,157,157,158,0,158,0,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,179,181,182,183,184,185,147,0,0,180,180,187,187,0,173,173,0,0,174,174,191,0,0,0,206,207,208,0,0,0,0,192,193,194,192,195,0,0,0,0,0,0,197,198,199,200,201,202,175,0,0,0,175,0,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,0,0,0,139,0,139,139,139,0,139,0,0,0,0,0,0,0,0,0,0,89,89,63,89,65,89,63,89,63,89,63,89,65,86,63,89,65,86,89,89,89,63,89,65,86,63,89,65,86,63,89,65,86,63,89,65,86,63,89,65,86,63,89,63,65,63,89,65,86,63,89,86,89,63,89,65,86,89,63,89,65,86,63,89,65,86,63,89,65,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,41,110,41,110,41,110,41,110,41,110,41,110,41,114,110,41,114,110,41,114,110,41,114,110,41,114,110,41,114,110,41,114,110,41,0,210,41,41,41,41,41,114,110,41,110,41,110,41,41,110,41,110,41,110,41,114,110,41,114,110,41,110,41,110,41,114,110,41,41,41,41,41,41,110,41,41,41,41,41,114,110,41,114,110,41,114,110,41,110,41,114,110,41,114,110,41,114,110,41,114,110,41,110,41,110,41,110,41,110,41,114,114,114,114,114,110,110,110,110,110,41,41,41,41,41,114,114,114,114,110,110,110,110,41,41,41,41,114,110,41,211,212,110,41,41,41,41,41,114,110,41,114,110,41,110,41,114,110,41,114,114,110,110,41,41,110,41,110,41,110,41,110,41,110,41,110,41,110,41,110,41,114,110,41,114,110,41,110,41,110,41,114,110,41,114,110,41,114,110,41,110,41,110,41,114,110,41,114,110,41,114,110,41,114,110,41,114,110,41,110,41,110,41,110,41,114,110,41,114,110,41,114,110,41,110,41,110,41,110,41,110,41,41,41,41,41,114,110,41,114,110,41,114,110,41,114,110,41,114,110,41,114,110,41,114,110,41,114,110,41,114,110,41,114,110,41,110,41,110,41,110,41,110,41],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,2],1],[[1,3],4],[[]],[2,1],[[]],[1,2],[[],1],[[1,5]],[1,2],[[]],[[],6],[[],6],[[],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[8,9],[10,9],[11,9],[12,9],0,[9,8],[10,8],[11,8],[12,8],0,[9,10],[8,10],[11,10],[12,10],0,[9,11],[8,11],[10,11],[12,11],0,[9,12],[8,12],[10,12],[11,12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],13],[[],14],[[],15],[[],16],[[],17],[[],12],[[],18],[[],8],[[],10],[[],11],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],13],[[],14],[[],15],[[],16],[[],17],[[],12],[[],18],[[],8],[[],10],[[],11],[[],9],0,0,0,0,0,0,0,[14,17],[15,17],[16,17],[13,17],[19,17],[19,17],[5,17],[17,19],[17,19],0,0,[17,14],[15,14],[16,14],[13,14],[20,14],[20,14],[14,20],[14,20],0,0,[17,15],[14,15],[16,15],[13,15],[21,15],[21,15],[15,21],[15,21],0,0,[17,16],[14,16],[15,16],[13,16],[22,16],[22,16],[5,16],[16,22],[16,22],0,[17,13],[14,13],[15,13],[16,13],[5,13],0,0,0,0,0,0,0,0,0,0,0,[[]],[[],13],[[],14],[[],15],[[],16],[[],17],[[],12],[[],18],[[],8],[[],10],[[],11],[[],9],0,[[]],[18,18],[[]],[[18,18],18],[[]],[13,13],[14,14],[15,15],[16,16],[17,17],[12,12],[18,18],[8,8],[10,10],[11,11],[9,9],[20,20],[21,21],[22,22],[19,19],[23,23],[24,24],[25,25],[26,26],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[18,27],18],[[18,28],18],[[18,29],18],[[18,28],18],[[18,30],18],[[18,31],18],[[18,27],18],[[18,28],18],[[18,32],18],[[18,29],18],[[18,5],18],[[18,31],18],[[18,27],18],[[18,5],18],[[18,32],18],[[18,33],18],[[18,34],18],[[18,35],18],[[18,18],18],[[18,30],18],[[18,36],18],[[18,36],18],[[18,35],18],[[18,33],18],[[18,37],18],[[18,36],18],[[18,32],18],[[18,18],18],[[18,31],18],[[18,28],18],[[18,35],18],[[18,36],18],[[18,31],18],[[18,29],18],[[18,33],18],[[18,34],18],[[18,34],18],[[18,5],18],[[18,34],18],[[18,37],18],[[18,5],18],[[18,29],18],[[18,32],18],[[18,30],18],[[18,18],18],[[18,27],18],[[18,33],18],[[18,37],18],[[18,35],18],[[18,30],18],[[18,37],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[38,34],38],[[38,34],38],[[38,5],38],[[38,32],38],[[38,37],38],[[38,38],38],[[38,38],38],[[38,30],38],[[38,30],38],[[38,37],38],[[38,37],38],[[38,32],38],[[38,30],38],[[38,36],38],[[38,32],38],[[38,36],38],[[38,34],38],[[38,38],38],[[38,5],38],[[38,36],38],[[38,32],38],[[38,34],38],[[38,37],38],[[38,38],38],[[38,36],38],[[38,5],38],[[38,30],38],[[38,5],38],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[39,40],39],[[]],[[13,13]],[[14,14]],[[15,15]],[[16,16]],[[17,17]],[[12,12]],[[18,27]],[[18,29]],[[18,18]],[[18,28]],[[18,31]],[[18,5]],[[18,36]],[[18,34]],[[18,33]],[[18,35]],[[18,30]],[[18,18]],[[18,37]],[[18,32]],[[8,8]],[[10,10]],[[11,11]],[[9,9]],[[38,34]],[[38,36]],[[38,32]],[[38,5]],[[38,30]],[[38,37]],[[38,38]],[[38,38]],[[39,40]],[[]],[[13,13,13],13],[[14,14,14],14],[[15,15,15],15],[[16,16,16],16],[[17,17,17],17],[[12,12,12],12],[[18,18,18],18],[[8,8,8],8],[[10,10,10],10],[[11,11,11],11],[[9,9,9],9],[[20,20,20],20],[[21,21,21],21],[[22,22,22],22],[[19,19,19],19],[[23,23,23],23],[[24,24,24],24],[[25,25,25],25],[[26,26,26],26],[[41,41,[0,[42,43]]],[[41,[[0,[42,43]]]]]],[[44,5],[[6,[5]]]],[[44,5],[[6,[5]]]],[45],[[45,45]],[39],[45],[45,45],[39,40],[46,46],[45],[45],[39,40],[39,45],[45],[45],[45,45],[39,47],[39,40],[39,48],[39],[46,46],[45],[39,40],[[18,49]],[38],[[]],[[]],[[]],[[]],[[18,37],50],[[38,37],50],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[18,18],18],[[18,18],18],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[38,38],38],[[38,38],38],[[38,38],38],[[38,38],38],[[20,20]],[[21,21]],[[22,22]],[[19,19]],[[23,23]],[[24,24]],[[25,25]],[[26,26]],[[]],[[13,13]],[[14,14]],[[15,15]],[[16,16]],[[17,17]],[[12,12]],[[18,18]],[[18,18]],[[8,8]],[[10,10]],[[11,11]],[[9,9]],[[38,38]],[[38,38]],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[18,18],18],[[18,18],18],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[38,38],38],[[38,38],38],[[38,38],38],[[38,38],38],[[20,20]],[[21,21]],[[22,22]],[[19,19]],[[23,23]],[[24,24]],[[25,25]],[[26,26]],[[]],[[13,13]],[[14,14]],[[15,15]],[[16,16]],[[17,17]],[[12,12]],[[18,18]],[[18,18]],[[8,8]],[[10,10]],[[11,11]],[[9,9]],[[38,38]],[[38,38]],[18,37],[38,37],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[18,18],18],[[18,18],18],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[38,38],38],[[38,38],38],[[38,38],38],[[38,38],38],[[20,20]],[[21,21]],[[22,22]],[[19,19]],[[23,23]],[[24,24]],[[25,25]],[[26,26]],[[]],[[13,13]],[[14,14]],[[15,15]],[[16,16]],[[17,17]],[[12,12]],[[18,18]],[[18,18]],[[8,8]],[[10,10]],[[11,11]],[[9,9]],[[38,38]],[[38,38]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[45],[[]],[39,40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[45],[39,40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],51],[51,51],[51,52],[[[0,[53,43]],[0,[53,43]],[0,[53,43]]],[[0,[53,43]]]],[[]],[[]],[[]],[45,5],[39,5],[18,18],[18,18],[38,38],[38,38],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],[[52,[18]]]],[[18,18],[[52,[18]]]],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[38,38],[[52,[38]]]],[[18,18],[[52,[18]]]],[[18,18],[[52,[18]]]],[[38,38],[[52,[38]]]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],[[52,[18]]]],[[18,18],[[52,[18]]]],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[38,38],[[52,[38]]]],[[],52],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],[[52,[18]]]],[[18,18],[[52,[18]]]],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[38,38],[[52,[38]]]],[[]],[[]],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],12],[[],12],[[],12],[[],18],[[],8],[[],8],[[],8],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],9],[[],9],[[],9],[45],[39],[13,13],[14,14],[15,15],[16,16],[17,17],[12,12],[18,18],[8,8],[10,10],[11,11],[9,9],[38,38],[20,20],[21,21],[22,22],[19,19],[23,23],[24,24],[25,25],[26,26],[49,49],[45,45],[39,39],[54,54],[55,55],[51,51],[56,56],[57,57],[44,44],[58,58],[59,59],[60,60],[61,61],[46,46],[[18,18]],[[38,38]],[[45,45]],[[39,39]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,46],[[18,18],55],[[38,38],55],[[23,23],55],[[24,24],55],[[25,25],55],[[26,26],55],[[49,49],55],[[45,45],55],[[39,39],55],[[55,55],55],[[56,56],55],[[[0,[53,43]],[0,[53,43]],[0,[53,43]]],[[0,[53,43]]]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[20,[[41,[13]]]],[21,[[41,[13]]]],[22,[[41,[13]]]],[19,[[41,[13]]]],[23,[[41,[34]]]],[24,[[41,[34]]]],[25,[[41,[34]]]],[26,[[41,[34]]]],[[],50],[44,50],[58,50],[59,50],[60,50],[61,50],[51,52],[38,37],[5],[5,20],[5,21],[5,22],[5,19],[5,23],[5,24],[5,25],[5,26],[[[0,[53,43]],[0,[53,43]],5,[0,[53,43]]],[[0,[53,43]]]],[[[0,[53,43]],[0,[53,43]],[0,[53,43]]],[[0,[53,43]]]],[[[0,[53,43]],[0,[53,43]],[0,[53,43]]]],[[[0,[53,43]],[0,[53,43]],[0,[53,43]]]],[[[0,[53,43]],[0,[53,43]]]],0,[13,34],[14,30],[15,32],[16,37],[17,36],[12,28],[8,31],[10,33],[11,29],[9,35],[[20,20],50],[[21,21],50],[[22,22],50],[[19,19],50],[17,36],[15,36],[16,36],[13,36],[14,30],[13,30],[14,32],[15,32],[13,32],[14,37],[15,37],[16,37],[13,37],[13,34],[13,5],[45],[45],[45],[[],13],[[],14],[[],15],[[],16],[[],17],[[],12],[[],18],[[],8],[[],10],[[],11],[[],9],[[],38],[[],20],[[],21],[[],22],[[],19],[[],23],[[],24],[[],25],[[],26],[[],[[45,[62]]]],[[],39],[[],57],[[],44],0,0,[41,5],[[]],[45],[39,40],[[]],[45],[39,40],[54,40],[[]],[[18,28],18],[[18,5],18],[[18,35],18],[[18,31],18],[[18,32],18],[[18,36],18],[[18,37],18],[[18,32],18],[[18,37],18],[[18,35],18],[[18,29],18],[[18,34],18],[[18,27],18],[[18,33],18],[[18,35],18],[[18,36],18],[[18,33],18],[[18,5],18],[[18,27],18],[[18,18],18],[[18,18],18],[[18,34],18],[[18,32],18],[[18,36],18],[[18,35],18],[[18,31],18],[[18,30],18],[[18,28],18],[[18,18],18],[[18,34],18],[[18,27],18],[[18,30],18],[[18,36],18],[[18,27],18],[[18,29],18],[[18,31],18],[[18,30],18],[[18,31],18],[[18,33],18],[[18,28],18],[[18,34],18],[[18,29],18],[[18,30],18],[[18,5],18],[[18,18],18],[[18,37],18],[[18,37],18],[[18,32],18],[[18,29],18],[[18,28],18],[[18,5],18],[[18,33],18],[[38,5],38],[[38,36],38],[[38,30],38],[[38,32],38],[[38,37],38],[[38,5],38],[[38,36],38],[[38,30],38],[[38,38],38],[[38,5],38],[[38,38],38],[[38,37],38],[[38,32],38],[[38,37],38],[[38,32],38],[[38,30],38],[[38,34],38],[[38,32],38],[[38,34],38],[[38,5],38],[[38,37],38],[[38,38],38],[[38,30],38],[[38,36],38],[[38,34],38],[[38,38],38],[[38,34],38],[[38,36],38],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[]],[[18,5]],[[18,36]],[[18,29]],[[18,32]],[[18,37]],[[18,18]],[[18,28]],[[18,27]],[[18,31]],[[18,30]],[[18,33]],[[18,35]],[[18,34]],[[18,18]],[[38,32]],[[38,37]],[[38,5]],[[38,38]],[[38,36]],[[38,34]],[[38,30]],[[38,38]],[[18,18],18],[[38,38],38],[[18,18],18],[[38,38],38],[[18,18]],[[38,38]],[[41,41,[0,[53,43]]],[[6,[40]]]],[[18,18]],[[38,38]],[[41,[0,[53,43]],[0,[53,43]]],[[41,[[0,[53,43]]]]]],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[18,18],50],[[38,38],50],[45,63],[39,64],[45,65],[[]],[45],[60],0,0,0,[[],46],[57,46],[44,46],[44,46],[58,46],[58,46],[59,46],[59,46],[60,46],[60,46],[61,46],[61,46],[[],50],[[],50],[[18,18],50],[[38,38],50],[[23,23],50],[[24,24],50],[[25,25],50],[[26,26],50],[[49,49],50],[[45,45],50],[45,50],[45,50],[45,50],[45,50],[45,50],[[39,39],50],[[39,40],50],[[39,40],50],[[39,66],50],[[54,54],50],[[55,55],50],[[51,51],50],[[56,56],50],[[57,57],50],[[44,44],50],[[58,58],50],[[59,59],50],[[60,60],50],[[61,61],50],[[46,46],50],[[],50],[[13,13],50],[[14,14],50],[[15,15],50],[[16,16],50],[[17,17],50],[[12,12],50],[[18,18],50],[[8,8],50],[[10,10],50],[[11,11],50],[[9,9],50],[[20,20],50],[[21,21],50],[[22,22],50],[[19,19],50],[[23,23],50],[[24,24],50],[[25,25],50],[[26,26],50],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[32],[[13,32],13],[[14,32],14],[[15,32],15],[[16,32],16],[[17,32],17],[[12,32],12],[[18,32],18],[[8,32],8],[[10,32],10],[[11,32],11],[[9,32],9],[[20,32],20],[[21,32],21],[[22,32],22],[[19,32],19],[[23,32],23],[[24,32],24],[[25,32],25],[[26,32],26],[45],[45],[39],[39],[39],[39],[39],[39],[45],[45],[39],[45],[45],[[39,67]],[[39,67]],[[39,39]],[[39,40]],[[39,[66,[40]]]],[[45,5]],[[45,5]],[[39,5]],[[39,5]],[[41,41,[0,[53,43]]],[[6,[[41,[[0,[53,43]]]],40]]]],[[18,18]],[[[45,[34]]],[[6,[68]]]],0,[3,[[6,[69]]]],[3,[[6,[69]]]],[3,[[6,[69]]]],[[13,3],[[6,[69]]]],[[13,3],[[6,[69]]]],[[13,3],[[6,[69]]]],[[14,3],[[6,[69]]]],[[14,3],[[6,[69]]]],[[14,3],[[6,[69]]]],[[15,3],[[6,[69]]]],[[15,3],[[6,[69]]]],[[15,3],[[6,[69]]]],[[16,3],[[6,[69]]]],[[16,3],[[6,[69]]]],[[16,3],[[6,[69]]]],[[17,3],[[6,[69]]]],[[17,3],[[6,[69]]]],[[17,3],[[6,[69]]]],[[12,3],[[6,[69]]]],[[12,3],[[6,[69]]]],[[12,3],[[6,[69]]]],[[18,3],[[6,[69]]]],[[18,3],[[6,[69]]]],[[18,3],[[6,[69]]]],[[18,3],[[6,[69]]]],[[18,3],[[6,[69]]]],[[18,3],[[6,[69]]]],[[8,3],[[6,[69]]]],[[8,3],[[6,[69]]]],[[8,3],[[6,[69]]]],[[10,3],[[6,[69]]]],[[10,3],[[6,[69]]]],[[10,3],[[6,[69]]]],[[11,3],[[6,[69]]]],[[11,3],[[6,[69]]]],[[11,3],[[6,[69]]]],[[9,3],[[6,[69]]]],[[9,3],[[6,[69]]]],[[9,3],[[6,[69]]]],[[38,3],[[6,[69]]]],[[38,3],[[6,[69]]]],[[38,3],[[6,[69]]]],[[38,3],[[6,[69]]]],[[38,3],[[6,[69]]]],[[38,3],[[6,[69]]]],[[20,3],4],[[21,3],4],[[22,3],4],[[19,3],4],[[23,3],4],[[24,3],4],[[25,3],4],[[26,3],4],[[49,3],[[6,[69]]]],[[45,3],[[6,[69]]]],[[39,3],[[6,[69]]]],[[39,3],[[6,[69]]]],[[54,3],[[6,[69]]]],[[54,3],[[6,[69]]]],[[55,3],[[6,[69]]]],[[51,3],[[6,[69]]]],[[56,3],[[6,[69]]]],[[57,3],[[6,[69]]]],[[44,3],[[6,[69]]]],[[58,3],[[6,[69]]]],[[59,3],[[6,[69]]]],[[60,3],[[6,[69]]]],[[61,3],[[6,[69]]]],[[46,3],[[6,[69]]]],[[70,3],[[6,[69]]]],[60],0,[5,13],[[]],[12,13],[15,13],[14,13],[17,13],[34,13],[16,13],[[]],[30,14],[15,14],[17,14],[34,14],[16,14],[13,14],[8,14],[[]],[13,15],[34,15],[30,15],[10,15],[14,15],[32,15],[17,15],[16,15],[5,16],[30,16],[34,16],[14,16],[[]],[15,16],[13,16],[17,16],[37,16],[32,16],[11,16],[15,17],[[]],[9,17],[37,17],[34,17],[30,17],[13,17],[5,17],[32,17],[14,17],[36,17],[16,17],[11,12],[13,12],[9,12],[28,12],[10,12],[8,12],[[]],[35,18],[28,18],[36,18],[29,18],[37,18],[30,18],[27,18],[5,18],[[]],[32,18],[38,18],[31,18],[34,18],[33,18],[12,8],[10,8],[[]],[11,8],[31,8],[9,8],[14,8],[15,10],[33,10],[9,10],[11,10],[8,10],[12,10],[[]],[12,11],[[]],[29,11],[8,11],[10,11],[16,11],[9,11],[12,9],[17,9],[35,9],[11,9],[10,9],[[]],[8,9],[5,38],[34,38],[37,38],[[]],[32,38],[36,38],[30,38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71,[[45,[62]]]],[39,[[45,[34,62]]]],[72,45],[73,[[45,[34,62]]]],[[],[[45,[62]]]],[74,45],[40,[[45,[34,62]]]],[66,[[45,[62]]]],[[],[[45,[62]]]],[[]],[[],[[45,[62]]]],[[]],[40,39],[67,39],[39,39],[40,39],[[[66,[40]]],39],[[[72,[40,62]]],39],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],21],[[],22],[[],19],[[],23],[[],24],[[],25],[[],26],[41],[41],[[],[[45,[13,62]]]],[41,13],[41,14],[[],[[45,[14,62]]]],[[],[[45,[15,62]]]],[41,15],[[],[[45,[16,62]]]],[41,16],[[],[[45,[17,62]]]],[41,17],[[],[[45,[12,62]]]],[[],[[45,[8,62]]]],[[],[[45,[10,62]]]],[[],[[45,[11,62]]]],[[],[[45,[9,62]]]],[[49,38],18],[49,18],[[],38],[49,18],[[],38],[75,[[52,[18]]]],[75,[[52,[38]]]],[40,20],[40,21],[40,22],[40,19],[40,23],[40,24],[40,25],[40,26],[39],[39,13],[39,14],[39,15],[39,16],[39,17],[39,12],[39,18],[39,8],[39,10],[39,11],[39,9],[35,[[52,[18]]]],[35,[[52,[38]]]],[29,[[52,[18]]]],[29,[[52,[38]]]],[[],[[45,[62]]]],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[41],[41],[41,13],[[],[[45,[13,62]]]],[[],[[45,[14,62]]]],[41,14],[[],[[45,[15,62]]]],[41,15],[[],[[45,[16,62]]]],[41,16],[41,17],[[],[[45,[17,62]]]],[[],[[45,[12,62]]]],[[],[[45,[8,62]]]],[[],[[45,[10,62]]]],[[],[[45,[11,62]]]],[[],[[45,[9,62]]]],[36],[36,13],[36,14],[36,15],[36,16],[36,17],[36,12],[36,18],[36,8],[36,10],[36,11],[36,9],[[],20],[[],21],[[],22],[[],19],[[],23],[[],24],[[],25],[[],26],[[]],[[],51],[[],20],[[],21],[[],22],[[],19],[[],20],[[],21],[[],22],[[],19],[[49,32],[[52,[18]]]],[32,[[52,[38]]]],[[49,32],[[52,[18]]]],[32,[[52,[38]]]],[[5,5],[[45,[62]]]],[[34,5,5],39],[[5,5],45],[[]],[[[51,[76]]],51],[[],20],[[],21],[[],22],[[],19],[[],23],[[],24],[[],25],[[],26],[[],18],[[],18],[49,18],[[],38],[[5,5],20],[[5,5],21],[[5,5],22],[[5,5],19],[[5,5],23],[[5,5],24],[[5,5],25],[[5,5],26],[[[44,[5]]],20],[[[44,[5]]],21],[[[44,[5]]],22],[[[44,[5]]],19],[[[44,[5]]],23],[[[44,[5]]],24],[[[44,[5]]],25],[[[44,[5]]],26],[40,6],[40,[[6,[18,77]]]],[40,[[6,[38,77]]]],[40,[[6,[39]]]],[[40,32],6],[[40,32],[[6,[18,77]]]],[[40,32],[[6,[38,77]]]],[36,[[52,[18]]]],[36,[[52,[38]]]],[37,[[52,[18]]]],[37,[[52,[38]]]],[[],[[6,[39,78]]]],[[],39],[[[45,[34,62]]],[[6,[39,79]]]],[[],[[66,[40]]]],[[[45,[34,62]]],39],[[[45,[13]]],20],[[[45,[13]]],21],[[[45,[13]]],22],[[[45,[13]]],19],[[[45,[34]]],23],[[[45,[34]]],24],[[[45,[34]]],25],[[[45,[34]]],26],[[18,18],18],[[38,38],38],[[18,18]],[[38,38]],[57,52],[[57,40],52],[[[44,[5]]],52],[[[44,[5]],40],52],[[[58,[5]],40],52],[[[58,[5]]],52],[[[59,[5]],40],52],[[[59,[5]]],52],[[[60,[5]]],52],[[[60,[5]],40],52],[[[61,[5]]],52],[[[61,[5]],40],52],[5],[[13,5],13],[[14,5],14],[[15,5],15],[[16,5],16],[[17,5],17],[[12,5],12],[[18,5],18],[[8,5],8],[[10,5],10],[[11,5],11],[[9,5],9],[5],[5],[[20,5,5]],[[21,5,5]],[[22,5,5]],[[19,5,5]],[[23,5,5]],[[24,5,5]],[[25,5,5]],[[26,5,5]],[[20,5,5],5],[[21,5,5],5],[[22,5,5],5],[[19,5,5],5],[[23,5,5],5],[[24,5,5],5],[[25,5,5],5],[[26,5,5],5],[57,52],[[57,40],52],[[[44,[5]],40],52],[[[44,[5]]],52],[[[58,[5]]],52],[[[58,[5]],40],52],[[[59,[5]]],52],[[[59,[5]],40],52],[[[60,[5]]],52],[[[60,[5]],40],52],[[[61,[5]],40],52],[[[61,[5]]],52],[57],[[57,40]],[[[44,[5]],40]],[[[44,[5]]]],[[[58,[5]]]],[[[58,[5]],40]],[[[59,[5]],40]],[[[59,[5]]]],[[[60,[5]],40]],[[[60,[5]]]],[[[61,[5]],40]],[[[61,[5]]]],[57],[[57,40]],[[[44,[5]]]],[[[44,[5]],40]],[[[58,[5]],40]],[[[58,[5]]]],[[[59,[5]],40]],[[[59,[5]]]],[[[60,[5]],40]],[[[60,[5]]]],[[[61,[5]]]],[[[61,[5]],40]],[[],50],[[13,13],50],[[14,14],50],[[15,15],50],[[16,16],50],[[17,17],50],[[12,12],50],[[18,18],50],[[8,8],50],[[10,10],50],[[11,11],50],[[9,9],50],[[20,20],50],[[21,21],50],[[22,22],50],[[19,19],50],[[23,23],50],[[24,24],50],[[25,25],50],[[26,26],50],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[],50],[[13,13],50],[[14,14],50],[[15,15],50],[[16,16],50],[[17,17],50],[[12,12],50],[[18,18],50],[[8,8],50],[[10,10],50],[[11,11],50],[[9,9],50],[[20,20],50],[[21,21],50],[[22,22],50],[[19,19],50],[[23,23],50],[[24,24],50],[[25,25],50],[[26,26],50],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[18],[38],[49],[45],[39],[55],[51],[56],[57],[44],[58],[59],[60],[61],[46],[40,[[45,[34]]]],[[]],[[20,57]],[[20,34],13],[[20,5],13],[[20,33],13],[[20,32],13],[[21,57]],[[21,33],13],[[21,34],13],[[21,32],13],[[21,5],13],[[22,5],13],[[22,57]],[[22,34],13],[[22,33],13],[[22,32],13],[[19,57]],[[19,5],13],[[19,32],13],[[19,34],13],[[19,33],13],[[23,34],34],[[23,33],34],[[23,32],34],[[23,57]],[[23,5],34],[[24,33],34],[[24,57]],[[24,34],34],[[24,5],34],[[24,32],34],[[25,5],34],[[25,34],34],[[25,32],34],[[25,33],34],[[25,57]],[[26,33],34],[[26,57]],[[26,32],34],[[26,34],34],[[26,5],34],[45],[[39,[60,[5]]],40],[[39,[61,[5]]],40],[[39,[59,[5]]],40],[[39,[58,[5]]],40],[[39,57],40],[[39,[44,[5]]],40],[57],[[57,40]],[[[44,[5]],40]],[[[44,[5]]]],[[[58,[5]],40]],[[[58,[5]]]],[[[59,[5]]]],[[[59,[5]],40]],[[[60,[5]],40]],[[[60,[5]]]],[[[61,[5]]]],[[[61,[5]],40]],[[]],[[20,5],13],[[20,34],13],[[20,32],13],[[20,33],13],[[21,33],13],[[21,5],13],[[21,32],13],[[21,34],13],[[22,33],13],[[22,32],13],[[22,34],13],[[22,5],13],[[19,33],13],[[19,32],13],[[19,34],13],[[19,5],13],[[23,34],34],[[23,33],34],[[23,32],34],[[23,5],34],[[24,34],34],[[24,5],34],[[24,32],34],[[24,33],34],[[25,5],34],[[25,34],34],[[25,32],34],[[25,33],34],[[26,5],34],[[26,34],34],[[26,32],34],[[26,33],34],[45],[[39,[61,[5]]],40],[[39,[44,[5]]],40],[[39,57],40],[[39,[59,[5]]],40],[[39,[60,[5]]],40],[[39,[58,[5]]],40],[57],[[57,40]],[[[44,[5]]]],[[[44,[5]],40]],[[[58,[5]]]],[[[58,[5]],40]],[[[59,[5]]]],[[[59,[5]],40]],[[[60,[5]]]],[[[60,[5]],40]],[[[61,[5]]]],[[[61,[5]],40]],[[45,5]],[[39,5,67]],[[39,5,40]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[45,72],[39,[[72,[40,62]]]],[14,2],[15,2],[39,[[45,[34,62]]]],[45,45],[60],[45],[45],[45],[[]],[[]],[[]],[23,[[41,[34]]]],[24,[[41,[34]]]],[25,[[41,[34]]]],[26,[[41,[34]]]],[18],[45],[39],[45],[[39,40]],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[51,50],[[39,40],50],[51,50],[45,50],[39,50],[44,50],[60,50],[55,50],[18,50],[38,50],[55,50],[55,50],[55,50],[55,50],[[18,18],50],[[38,38],50],[55,50],[[],50],[18,50],[18,50],[38,50],[[],50],[18,50],[38,50],[[],50],[18,50],[[39,40],50],[44,50],[60,50],[[39,40],50],[[[45,[34]]],50],[[],50],[18,50],[38,50],[[],80],[20,[[80,[13]]]],[21,[[80,[13]]]],[22,[[80,[13]]]],[19,[[80,[13]]]],[23,[[80,[34]]]],[24,[[80,[34]]]],[25,[[80,[34]]]],[26,[[80,[34]]]],[18,81],[38,81],[18,82],[38,82],[54,83],[44,52],[60,52],[[18,18],18],[[38,38],38],[45],[39,40],[[],5],[20,5],[21,5],[22,5],[19,5],[23,5],[24,5],[25,5],[26,5],[45,5],[39,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],50],[[13,13],50],[[14,14],50],[[15,15],50],[[16,16],50],[[17,17],50],[[12,12],50],[[18,18],50],[[8,8],50],[[10,10],50],[[11,11],50],[[9,9],50],[[20,20],50],[[21,21],50],[[22,22],50],[[19,19],50],[[23,23],50],[[24,24],50],[[25,25],50],[[26,26],50],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[],50],[[13,13],50],[[14,14],50],[[15,15],50],[[16,16],50],[[17,17],50],[[12,12],50],[[18,18],50],[[8,8],50],[[10,10],50],[[11,11],50],[[9,9],50],[[20,20],50],[[21,21],50],[[22,22],50],[[19,19],50],[[23,23],50],[[24,24],50],[[25,25],50],[[26,26],50],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[18,38],[[41,[0,[42,43]]],[[41,[[0,[42,43]]]]]],[46,46],[51,51],[51,51],[44,52],[60,52],[[]],[[],13],[[],14],[[],15],[[],16],[[],17],[[],12],[[],18],[[],8],[[],10],[[],11],[[],9],[[],20],[[],21],[[],22],[[],19],[[],23],[[],24],[[],25],[[],26],[[],13],[[],14],[[],15],[[],16],[[],17],[[],12],[[],8],[[],10],[[],11],[[],9],[[]],[44,52],[60,52],[[18,18],18],[[38,38],38],[[18,18,18],18],[[38,38,38],38],0,[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,36],18],[[18,5],18],[[18,31],18],[[18,33],18],[[18,32],18],[[18,29],18],[[18,31],18],[[18,36],18],[[18,28],18],[[18,33],18],[[18,35],18],[[18,32],18],[[18,27],18],[[18,5],18],[[18,32],18],[[18,27],18],[[18,30],18],[[18,5],18],[[18,34],18],[[18,35],18],[[18,18],18],[[18,35],18],[[18,30],18],[[18,28],18],[[18,27],18],[[18,31],18],[[18,37],18],[[18,29],18],[[18,29],18],[[18,28],18],[[18,32],18],[[18,35],18],[[18,36],18],[[18,33],18],[[18,33],18],[[18,31],18],[[18,18],18],[[18,27],18],[[18,28],18],[[18,34],18],[[18,37],18],[[18,30],18],[[18,5],18],[[18,18],18],[[18,29],18],[[18,18],18],[[18,30],18],[[18,34],18],[[18,37],18],[[18,36],18],[[18,34],18],[[18,37],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[38,34],38],[[38,37],38],[[38,36],38],[[38,38],38],[[38,37],38],[[38,38],38],[[38,5],38],[[38,32],38],[[38,34],38],[[38,36],38],[[38,37],38],[[38,5],38],[[38,5],38],[[38,36],38],[[38,30],38],[[38,32],38],[[38,30],38],[[38,5],38],[[38,38],38],[[38,30],38],[[38,34],38],[[38,32],38],[[38,36],38],[[38,30],38],[[38,37],38],[[38,32],38],[[38,34],38],[[38,38],38],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[49,49],49],[[]],[[13,13]],[[14,14]],[[15,15]],[[16,16]],[[17,17]],[[12,12]],[[18,36]],[[18,34]],[[18,31]],[[18,5]],[[18,37]],[[18,18]],[[18,32]],[[18,27]],[[18,28]],[[18,18]],[[18,33]],[[18,29]],[[18,35]],[[18,30]],[[8,8]],[[10,10]],[[11,11]],[[9,9]],[[38,36]],[[38,34]],[[38,38]],[[38,30]],[[38,38]],[[38,32]],[[38,5]],[[38,37]],[[]],[[13,13,13],13],[[14,14,14],14],[[15,15,15],15],[[16,16,16],16],[[17,17,17],17],[[12,12,12],12],[[18,18,18],18],[[8,8,8],8],[[10,10,10],10],[[11,11,11],11],[[9,9,9],9],[[20,20,20],20],[[21,21,21],21],[[22,22,22],22],[[19,19,19],19],[[23,23,23],23],[[24,24,24],24],[[25,25,25],25],[[26,26,26],26],[[41,41,[0,[42,43]]],[[41,[[0,[42,43]]]]]],[[41,41,41,[0,[53,43]]],[[41,[[0,[53,43]]]]]],0,[[],50],[[],50],[45,50],[45,50],[[45,45],50],[45,50],[45,50],[45,50],[[39,40],50],[[39,40],50],[[39,39],50],[[39,66],50],[[]],[13,13],[14,14],[15,15],[16,16],[17,17],[12,12],[18,18],[18,18],[8,8],[10,10],[11,11],[9,9],[49,49],[[49,[45,[32,62]]],18],[[[45,[32,62]]],38],[[],20],[[],21],[[],22],[[],19],[[],23],[[],24],[[],25],[[],26],[[],[[45,[62]]]],[[],39],[[],60],[[],45],[44,52],[58,52],[60,52],[44,52],[60,52],[[18,18],18],[[38,38],38],[[]],[13,13],[14,14],[15,15],[16,16],[17,17],[12,12],[18,18],[18,18],[8,8],[10,10],[11,11],[9,9],[20],[21],[22],[19],[23],[24],[25],[26],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[44,5],52],[[58,5],52],[[60,5],52],[[44,5],52],[[60,5],52],[[18,32],18],[[18,32],18],[[38,32],38],[[38,32],38],0,[[20,5],5],[[21,5],5],[[22,5],5],[[19,5],5],[[23,5],5],[[24,5],5],[[25,5],5],[[26,5],5],[[]],[[]],[[],13],[[],14],[[],15],[[],16],[[],17],[[],12],[[],18],[[],8],[[],10],[[],11],[[],9],[[],38],[[],13],[[],14],[[],15],[[],16],[[],17],[[],12],[[],8],[[],10],[[],11],[[],9],[32,[[52,[18]]]],[32,[[52,[38]]]],[[18,18],[[52,[55]]]],[[38,38],[[52,[55]]]],[[23,23],[[52,[55]]]],[[24,24],[[52,[55]]]],[[25,25],[[52,[55]]]],[[26,26],[[52,[55]]]],[[49,49],[[52,[55]]]],[[45,45],[[52,[55]]]],[[39,39],[[52,[55]]]],[[55,55],[[52,[55]]]],[[56,56],[[52,[55]]]],0,[[41,41,[0,[53,43]]]],[45,52],[39,[[52,[67]]]],[[18,5],18],[[18,32],18],[[18,32],18],[[18,36],18],[[18,37],18],[[18,36],18],[[18,36],18],[[18,38],18],[[18,30],18],[[18,5],18],[[18,34],18],[[18,38],18],[[18,30],18],[[18,32],18],[[18,37],18],[[18,38],18],[[18,34],18],[[18,32],18],[[18,30],18],[[18,34],18],[[18,36],18],[[18,34],18],[[18,38],18],[[18,5],18],[[18,5],18],[[18,32],18],[[18,30],18],[[18,37],18],[[18,37],18],[[38,5],38],[[38,38],38],[[38,37],38],[[38,37],38],[[38,5],38],[[38,36],38],[[38,34],38],[[38,30],38],[[38,37],38],[[38,30],38],[[38,36],38],[[38,38],38],[[38,30],38],[[38,5],38],[[38,32],38],[[38,32],38],[[38,34],38],[[38,37],38],[[38,38],38],[[38,32],38],[[38,38],38],[[38,36],38],[[38,5],38],[[38,32],38],[[38,36],38],[[38,34],38],[[38,30],38],[[38,34],38],[[38,32],38],[[]],[[13,13,13],13],[[14,14,14],14],[[15,15,15],15],[[16,16,16],16],[[17,17,17],17],[[12,12,12],12],[[18,18,18],18],[[8,8,8],8],[[10,10,10],10],[[11,11,11],11],[[9,9,9],9],[[20,20,20],20],[[21,21,21],21],[[22,22,22],22],[[19,19,19],19],[[23,23,23],23],[[24,24,24],24],[[25,25,25],25],[[26,26,26],26],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[18,18],18],[[38,38],38],[[],18],[[],38],[84],[45],[[39,67]],[[39,40]],[45,6],[[]],[[18,18],18],[[18,27],18],[[18,28],18],[[18,30],18],[[18,32],18],[[18,33],18],[[18,34],18],[[18,36],18],[[18,35],18],[[18,30],18],[[18,28],18],[[18,29],18],[[18,37],18],[[18,32],18],[[18,28],18],[[18,28],18],[[18,31],18],[[18,5],18],[[18,31],18],[[18,18],18],[[18,34],18],[[18,31],18],[[18,37],18],[[18,27],18],[[18,29],18],[[18,31],18],[[18,5],18],[[18,35],18],[[18,30],18],[[18,29],18],[[18,34],18],[[18,36],18],[[18,35],18],[[18,33],18],[[18,29],18],[[18,18],18],[[18,33],18],[[18,5],18],[[18,37],18],[[18,33],18],[[18,18],18],[[18,32],18],[[18,32],18],[[18,34],18],[[18,27],18],[[18,37],18],[[18,35],18],[[18,30],18],[[18,36],18],[[18,36],18],[[18,27],18],[[18,5],18],[[38,5],38],[[38,36],38],[[38,32],38],[[38,30],38],[[38,37],38],[[38,38],38],[[38,36],38],[[38,32],38],[[38,38],38],[[38,36],38],[[38,34],38],[[38,32],38],[[38,30],38],[[38,38],38],[[38,37],38],[[38,36],38],[[38,37],38],[[38,5],38],[[38,38],38],[[38,30],38],[[38,5],38],[[38,30],38],[[38,34],38],[[38,34],38],[[38,34],38],[[38,32],38],[[38,37],38],[[38,5],38],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[]],[[18,29]],[[18,36]],[[18,28]],[[18,34]],[[18,30]],[[18,37]],[[18,35]],[[18,27]],[[18,31]],[[18,18]],[[18,18]],[[18,32]],[[18,33]],[[18,5]],[[38,37]],[[38,38]],[[38,5]],[[38,32]],[[38,38]],[[38,34]],[[38,30]],[[38,36]],[[45,5]],[[39,5],67],[39],[[39,40]],[[45,5]],[[39,5]],[[45,5]],[[39,5]],[[45,5]],[[45,5]],[85,56],[45],[39],[45],[55,55],[60],[5],[[13,5],13],[[13,5],13],[[14,5],14],[[14,5],14],[[15,5],15],[[15,5],15],[[16,5],16],[[16,5],16],[[17,5],17],[[17,5],17],[[12,5],12],[[12,5],12],[[18,5],18],[[8,5],8],[[8,5],8],[[10,5],10],[[10,5],10],[[11,5],11],[[11,5],11],[[9,5],9],[[9,5],9],[5],[[13,5],13],[[13,5],13],[[14,5],14],[[14,5],14],[[15,5],15],[[15,5],15],[[16,5],16],[[16,5],16],[[17,5],17],[[17,5],17],[[12,5],12],[[12,5],12],[[18,5],18],[[8,5],8],[[8,5],8],[[10,5],10],[[10,5],10],[[11,5],11],[[11,5],11],[[9,5],9],[[9,5],9],[[5,5]],[[13,5,13,5],13],[[14,5,14,5],14],[[15,5,15,5],15],[[16,5,16,5],16],[[17,5,17,5],17],[[12,5,12,5],12],[[18,5,18,5],18],[[8,5,8,5],8],[[10,5,10,5],10],[[11,5,11,5],11],[[9,5,9,5],9],[5],[[13,13,5],13],[[14,14,5],14],[[15,15,5],15],[[16,16,5],16],[[17,17,5],17],[[12,12,5],12],[[18,37,50]],[[18,18,5],18],[[8,8,5],8],[[10,10,5],10],[[11,11,5],11],[[9,9,5],9],[[38,37,50]],[[20,5,5],20],[[21,5,5],21],[[22,5,5],22],[[19,5,5],19],[[23,5,5],23],[[24,5,5],24],[[25,5,5],25],[[26,5,5],26],[[45,5]],[[]],[18],[38],[[]],[18],[38],[[]],[[13,5],13],[[14,5],14],[[15,5],15],[[16,5],16],[[17,5],17],[[12,5],12],[[18,30],18],[[18,32],18],[[18,31],18],[[18,35],18],[[18,35],18],[[18,33],18],[[18,34],18],[[18,34],18],[[18,37],18],[[18,36],18],[[18,31],18],[[18,29],18],[[18,36],18],[[18,5],18],[[18,5],18],[[18,35],18],[[18,34],18],[[18,29],18],[[18,27],18],[[18,30],18],[[18,5],18],[[18,28],18],[[18,33],18],[[18,31],18],[[18,27],18],[[18,29],18],[[18,30],18],[[18,37],18],[[18,35],18],[[18,27],18],[[18,28],18],[[18,37],18],[[18,29],18],[[18,36],18],[[18,28],18],[[18,33],18],[[18,32],18],[[18,32],18],[[18,27],18],[[18,31],18],[[18,34],18],[[18,28],18],[[18,30],18],[[18,36],18],[[18,37],18],[[18,32],18],[[18,5],18],[[18,33],18],[[8,5],8],[[10,5],10],[[11,5],11],[[9,5],9],[[38,33],38],[[38,30],38],[[38,36],38],[[38,28],38],[[38,31],38],[[38,29],38],[[38,34],38],[[38,27],38],[[38,29],38],[[38,34],38],[[38,35],38],[[38,29],38],[[38,36],38],[[38,30],38],[[38,35],38],[[38,34],38],[[38,5],38],[[38,28],38],[[38,29],38],[[38,28],38],[[38,30],38],[[38,32],38],[[38,31],38],[[38,32],38],[[38,27],38],[[38,28],38],[[38,36],38],[[38,37],38],[[38,27],38],[[38,5],38],[[38,37],38],[[38,32],38],[[38,31],38],[[38,37],38],[[38,30],38],[[38,32],38],[[38,27],38],[[38,33],38],[[38,33],38],[[38,31],38],[[38,33],38],[[38,36],38],[[38,5],38],[[38,35],38],[[38,34],38],[[38,5],38],[[38,35],38],[[38,37],38],[[20,5]],[[21,5]],[[22,5]],[[19,5]],[[23,5]],[[24,5]],[[25,5]],[[26,5]],[[]],[[13,5]],[[14,5]],[[15,5]],[[16,5]],[[17,5]],[[12,5]],[[18,33]],[[18,28]],[[18,37]],[[18,35]],[[18,29]],[[18,30]],[[18,36]],[[18,34]],[[18,30]],[[18,32]],[[18,35]],[[18,31]],[[18,28]],[[18,37]],[[18,36]],[[18,5]],[[18,27]],[[18,29]],[[18,31]],[[18,33]],[[18,5]],[[18,27]],[[18,34]],[[18,32]],[[8,5]],[[10,5]],[[11,5]],[[9,5]],[[38,33]],[[38,31]],[[38,36]],[[38,37]],[[38,27]],[[38,29]],[[38,34]],[[38,35]],[[38,32]],[[38,27]],[[38,36]],[[38,34]],[[38,37]],[[38,5]],[[38,31]],[[38,28]],[[38,30]],[[38,33]],[[38,35]],[[38,30]],[[38,5]],[[38,28]],[[38,32]],[[38,29]],[[]],[[13,5],13],[[14,5],14],[[15,5],15],[[16,5],16],[[17,5],17],[[12,5],12],[[18,30],18],[[18,34],18],[[18,33],18],[[18,34],18],[[18,28],18],[[18,37],18],[[18,31],18],[[18,29],18],[[18,30],18],[[18,27],18],[[18,34],18],[[18,30],18],[[18,32],18],[[18,32],18],[[18,33],18],[[18,27],18],[[18,33],18],[[18,36],18],[[18,28],18],[[18,35],18],[[18,34],18],[[18,30],18],[[18,35],18],[[18,29],18],[[18,37],18],[[18,29],18],[[18,5],18],[[18,5],18],[[18,37],18],[[18,36],18],[[18,33],18],[[18,36],18],[[18,32],18],[[18,29],18],[[18,27],18],[[18,31],18],[[18,31],18],[[18,35],18],[[18,32],18],[[18,5],18],[[18,35],18],[[18,31],18],[[18,37],18],[[18,28],18],[[18,27],18],[[18,5],18],[[18,36],18],[[18,28],18],[[8,5],8],[[10,5],10],[[11,5],11],[[9,5],9],[[38,29],38],[[38,32],38],[[38,36],38],[[38,30],38],[[38,28],38],[[38,36],38],[[38,33],38],[[38,27],38],[[38,29],38],[[38,34],38],[[38,30],38],[[38,37],38],[[38,28],38],[[38,32],38],[[38,34],38],[[38,5],38],[[38,5],38],[[38,35],38],[[38,37],38],[[38,37],38],[[38,27],38],[[38,34],38],[[38,37],38],[[38,28],38],[[38,5],38],[[38,29],38],[[38,32],38],[[38,34],38],[[38,32],38],[[38,36],38],[[38,33],38],[[38,31],38],[[38,30],38],[[38,28],38],[[38,36],38],[[38,29],38],[[38,35],38],[[38,27],38],[[38,31],38],[[38,33],38],[[38,35],38],[[38,31],38],[[38,33],38],[[38,5],38],[[38,35],38],[[38,31],38],[[38,30],38],[[38,27],38],[[20,5]],[[21,5]],[[22,5]],[[19,5]],[[23,5]],[[24,5]],[[25,5]],[[26,5]],[[]],[[13,5]],[[14,5]],[[15,5]],[[16,5]],[[17,5]],[[12,5]],[[18,35]],[[18,30]],[[18,33]],[[18,34]],[[18,35]],[[18,28]],[[18,37]],[[18,32]],[[18,29]],[[18,29]],[[18,31]],[[18,31]],[[18,32]],[[18,37]],[[18,36]],[[18,30]],[[18,34]],[[18,27]],[[18,28]],[[18,27]],[[18,5]],[[18,33]],[[18,36]],[[18,5]],[[8,5]],[[10,5]],[[11,5]],[[9,5]],[[38,35]],[[38,29]],[[38,37]],[[38,5]],[[38,37]],[[38,36]],[[38,31]],[[38,27]],[[38,35]],[[38,32]],[[38,34]],[[38,30]],[[38,5]],[[38,32]],[[38,30]],[[38,27]],[[38,33]],[[38,28]],[[38,36]],[[38,33]],[[38,31]],[[38,34]],[[38,28]],[[38,29]],[[45,5]],[[39,5]],[45],[39],[18,49],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[]],[18,18],[44],[58],[60],[[20,5,5],[[41,[13]]]],[[21,5,5],[[41,[13]]]],[[22,5,5],[[41,[13]]]],[[19,5,5],[[41,[13]]]],[[23,5,5],[[41,[34]]]],[[24,5,5],[[41,[34]]]],[[25,5,5],[[41,[34]]]],[[26,5,5],[[41,[34]]]],[[20,[44,[5]]],[[41,[13]]]],[[21,[44,[5]]],[[41,[13]]]],[[22,[44,[5]]],[[41,[13]]]],[[19,[44,[5]]],[[41,[13]]]],[[23,[44,[5]]],[[41,[34]]]],[[24,[44,[5]]],[[41,[34]]]],[[25,[44,[5]]],[[41,[34]]]],[[26,[44,[5]]],[[41,[34]]]],[45],[45,86],[45],[[45,5],45],[[39,5],39],[18,18],[18,18],[38,38],[38,38],[60],0,0,[[],46],[57,46],[44,46],[44,46],[58,46],[58,46],[59,46],[59,46],[60,46],[60,46],[61,46],[61,46],[[39,40],[[52,[40]]]],[[39,40],[[52,[40]]]],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,34],18],[[18,27],18],[[18,36],18],[[18,31],18],[[18,35],18],[[18,37],18],[[18,34],18],[[18,37],18],[[18,36],18],[[18,5],18],[[18,29],18],[[18,27],18],[[18,28],18],[[18,32],18],[[18,35],18],[[18,31],18],[[18,5],18],[[18,33],18],[[18,36],18],[[18,29],18],[[18,29],18],[[18,18],18],[[18,30],18],[[18,29],18],[[18,28],18],[[18,18],18],[[18,18],18],[[18,34],18],[[18,5],18],[[18,37],18],[[18,33],18],[[18,35],18],[[18,31],18],[[18,35],18],[[18,30],18],[[18,36],18],[[18,5],18],[[18,33],18],[[18,32],18],[[18,37],18],[[18,18],18],[[18,34],18],[[18,30],18],[[18,32],18],[[18,28],18],[[18,30],18],[[18,31],18],[[18,33],18],[[18,28],18],[[18,32],18],[[18,27],18],[[18,27],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[38,5],38],[[38,5],38],[[38,34],38],[[38,32],38],[[38,37],38],[[38,32],38],[[38,30],38],[[38,38],38],[[38,30],38],[[38,34],38],[[38,36],38],[[38,32],38],[[38,36],38],[[38,34],38],[[38,5],38],[[38,38],38],[[38,37],38],[[38,32],38],[[38,30],38],[[38,38],38],[[38,30],38],[[38,38],38],[[38,36],38],[[38,37],38],[[38,34],38],[[38,5],38],[[38,36],38],[[38,37],38],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[]],[[13,13]],[[14,14]],[[15,15]],[[16,16]],[[17,17]],[[12,12]],[[18,29]],[[18,28]],[[18,33]],[[18,18]],[[18,34]],[[18,32]],[[18,18]],[[18,27]],[[18,5]],[[18,36]],[[18,37]],[[18,30]],[[18,31]],[[18,35]],[[8,8]],[[10,10]],[[11,11]],[[9,9]],[[38,38]],[[38,34]],[[38,38]],[[38,32]],[[38,37]],[[38,5]],[[38,36]],[[38,30]],[[]],[[13,13,13],13],[[14,14,14],14],[[15,15,15],15],[[16,16,16],16],[[17,17,17],17],[[12,12,12],12],[[18,18,18],18],[[8,8,8],8],[[10,10,10],10],[[11,11,11],11],[[9,9,9],9],[[20,20,20],20],[[21,21,21],21],[[22,22,22],22],[[19,19,19],19],[[23,23,23],23],[[24,24,24],24],[[25,25,25],25],[[26,26,26],26],[[41,41,[0,[42,43]]],[[41,[[0,[42,43]]]]]],[[],18],[[],38],[[45,5]],[[55,55],55],[55,55],[20,[[41,[17]]]],[21,[[41,[17]]]],[22,[[41,[17]]]],[19,[[41,[17]]]],[20,[[41,[17]]]],[21,[[41,[17]]]],[22,[[41,[17]]]],[19,[[41,[17]]]],[[]],[20,[[41,[15]]]],[21,[[41,[15]]]],[22,[[41,[15]]]],[19,[[41,[15]]]],[20,[[41,[16]]]],[21,[[41,[16]]]],[22,[[41,[16]]]],[19,[[41,[16]]]],[[],[[41,[13]]]],[[],[[41,[34]]]],[13,[[41,[13]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[14,[[41,[13]]]],[15,[[41,[13]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[16,[[41,[13]]]],[[],[[45,[13,62]]]],[17,[[41,[13]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[20,[[41,[13]]]],[21,[[41,[13]]]],[22,[[41,[13]]]],[19,[[41,[13]]]],[23,[[41,[32]]]],[24,[[41,[32]]]],[25,[[41,[32]]]],[26,[[41,[32]]]],[23,[[41,[37]]]],[24,[[41,[37]]]],[25,[[41,[37]]]],[26,[[41,[37]]]],[18,[[52,[18]]]],[38,[[52,[18]]]],[18,[[52,[38]]]],[18,[[52,[38]]]],[38,[[52,[38]]]],[18],[38,[[45,[34,62]]]],[18],[38,[[45,[34,62]]]],[18,[[52,[87]]]],[38,[[52,[87]]]],[18,[[52,[75]]]],[38,[[52,[75]]]],[20,39],[21,39],[22,39],[19,39],[23,39],[24,39],[25,39],[26,39],[18,[[52,[35]]]],[38,[[52,[35]]]],[18,[[52,[29]]]],[38,[[52,[29]]]],[20,[[41,[15]]]],[21,[[41,[15]]]],[22,[[41,[15]]]],[19,[[41,[15]]]],[20,[[41,[16]]]],[21,[[41,[16]]]],[22,[[41,[16]]]],[19,[[41,[16]]]],[[],[[41,[13]]]],[[],[[41,[34]]]],[13,[[41,[13]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[14,[[41,[13]]]],[[],[[45,[13,62]]]],[15,[[41,[13]]]],[16,[[41,[13]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[17,[[41,[13]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[[],[[45,[13,62]]]],[20,[[41,[13]]]],[21,[[41,[13]]]],[22,[[41,[13]]]],[19,[[41,[13]]]],[23,[[41,[32]]]],[24,[[41,[32]]]],[25,[[41,[32]]]],[26,[[41,[32]]]],[23,[[41,[37]]]],[24,[[41,[37]]]],[25,[[41,[37]]]],[26,[[41,[37]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20],[21],[22],[19],[[18,32]],[[38,32],[[45,[34,62]]]],[[18,32]],[[38,32],[[45,[34,62]]]],[18,[[45,[34,62]]]],[18,[[45,[34,62]]]],[39,[[6,[[89,[88,62]],68]]]],[[18,32],39],[[38,32],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[39,39],[[],39],[[],39],[18,[[52,[36]]]],[38,[[52,[36]]]],[23,[[41,[36]]]],[24,[[41,[36]]]],[25,[[41,[36]]]],[26,[[41,[36]]]],[23,[[41,[36]]]],[24,[[41,[36]]]],[25,[[41,[36]]]],[26,[[41,[36]]]],[18],[38,[[45,[32,62]]]],[18,[[52,[37]]]],[38,[[52,[37]]]],[18],[38,[[45,[37,62]]]],[38,37],[18,[[52,[37]]]],[38,[[52,[37]]]],0,[[45,5]],[[39,5]],[60],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[35,[[6,[38,90]]]],[18,[[6,[38,[90,[18]]]]]],[18,[[6,[38,90]]]],[28,[[6,[38,90]]]],[29,[[6,[38,90]]]],[27,[[6,[38,90]]]],[[],6],[33,[[6,[38,90]]]],[31,[[6,[38,90]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[45,5],[[6,[91]]]],[[39,5],[[6,[91]]]],[[45,5],[[6,[91]]]],[[39,5],[[6,[91]]]],[60],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[14,36],[26,36],[26,36],[36,26],[36,26],0,[30,17],[30,15],[30,16],[23,30],[23,30],[30,23],[30,23],0,[32,17],[32,16],[24,32],[24,32],[32,24],[32,24],0,[37,17],[25,37],[25,37],[37,25],[37,25],[34,17],[34,14],[34,15],[34,16],[5],[5],[[20,5],20],[[21,5],21],[[22,5],22],[[19,5],19],[[23,5],23],[[24,5],24],[[25,5],25],[[26,5],26],[[5,5,5]],[[20,5,5,5],20],[[21,5,5,5],21],[[22,5,5,5],22],[[19,5,5,5],19],[[23,5,5,5],23],[[24,5,5,5],24],[[25,5,5,5],25],[[26,5,5,5],26],[[]],[[]],[20,20],[21,21],[22,22],[19,19],[23,23],[24,24],[25,25],[26,26],0,0,0,0,[[[92,[[0,[42,43]]]],[92,[[0,[42,43]]]],[0,[42,43]]],[[92,[[0,[42,43]]]]]],[[[92,[[0,[42,43]]]],[92,[[0,[42,43]]]],[0,[42,43]]],[[92,[[0,[42,43]]]]]],[[[92,[[0,[42,43]]]],[92,[[0,[42,43]]]],[0,[42,43]]],[[92,[[0,[42,43]]]]]],[41,5],[5,[[45,[62]]]],[5,39],[5,45],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[]],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[12,12],12],[[18,18],18],[[8,8],8],[[10,10],10],[[11,11],11],[[9,9],9],[[20,20],20],[[21,21],21],[[22,22],22],[[19,19],19],[[23,23],23],[[24,24],24],[[25,25],25],[[26,26],26],[[[45,[34]]],[[6,[5,68]]]],[[[45,[34]]],[[6,[68]]]],[[39,67],[[6,[69]]]],[[39,40],[[6,[69]]]],[[[45,[34]]],[[6,[5,68]]]],[[]],[[]],[[],13],[[],14],[[],15],[[],16],[[],17],[[],12],[[],18],[[],8],[[],10],[[],11],[[],9],[[],38],0,0,0,0,0,0,0,0,0,0,[[[0,[53,43]],[0,[53,43]],[0,[53,43]]],[[0,[53,43]]]],[[[0,[53,43]],[0,[53,43]],[0,[53,43]]],[[0,[53,43]]]],[[[0,[53,43]],[0,[53,43]],5,[0,[53,43]]],[[0,[53,43]]]],[[[0,[53,43]],[0,[53,43]],[0,[53,43]]],[[0,[53,43]]]],[[[0,[53,43]],[0,[53,43]],[0,[53,43]]]],[[[0,[53,43]],[0,[53,43]],[0,[53,43]]]],[[[0,[53,43]],[0,[53,43]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,[[52,[93]]]],[3,50],[94,[[52,[40]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[93,93],[69,69],[94,94],[[]],[[]],[[]],[[69,69],55],[3,95],[3,96],[3,97],[[3,40],98],[[3,40],99],[[],69],[69,40],[97,97],[95,95],[96,96],[[97,100],97],[[95,100],95],[[96,100,100],96],[[93,93],50],[[69,69],50],[[98,40,100],98],[[99,100],99],[3,67],[98,[[6,[69]]]],[99,[[6,[69]]]],[97,[[6,[69]]]],[95,[[6,[69]]]],[96,[[6,[69]]]],[98,[[6,[69]]]],[3,32],[3,[[6,[69]]]],[3,[[6,[69]]]],[3,[[6,[69]]]],[3,[[6,[69]]]],[3,[[6,[69]]]],[3,[[6,[69]]]],[3,[[6,[69]]]],[3,[[6,[69]]]],[3,[[6,[69]]]],[[93,3],[[6,[69]]]],[[69,3],[[6,[69]]]],[[69,3],[[6,[69]]]],[[94,3],[[6,[69]]]],[[94,3],[[6,[69]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[69],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[96,100],96],[[3,40],[[6,[69]]]],[[3,50,40,40],[[6,[69]]]],[[69,69],[[52,[55]]]],[3,[[52,[5]]]],[84],[3,50],[3,50],[3,50],[[]],[[]],[[]],[[],39],[[],39],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[96,100],96],[3,[[52,[5]]]],[[101,94],[[6,[69]]]],[67,[[6,[69]]]],[[3,67],[[6,[69]]]],[94,[[6,[69]]]],[[3,94],[[6,[69]]]],[[3,94],[[6,[69]]]],[40,[[6,[69]]]],[[3,40],[[6,[69]]]],[[3,40],[[6,[69]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,[[]],0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],52],[[]],[[]],[[],52],[[],52],[[],52],[[],52],[[],52],[5,52],[[],52],[[],52],[32,52],[32,52],[[],52],[[]],[[]],[[]],[[],102],[[]],[[]],[[]],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],0,[[]],[[103,3],[[6,[69]]]],[[104,3],[[6,[69]]]],[[104,3],[[6,[69]]]],[[]],[[],52],[[]],[[]],[[]],[87,52],[75,52],[35,52],[31,52],[33,52],[29,52],[28,52],[27,52],[[]],[[40,32],6],[36,52],[30,52],[32,52],[37,52],[34,52],[5,52],[[]],0,[[]],0,[[]],[[]],[[]],[[]],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],0,[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[5],[32],[[]],[[]],[33],0,[[]],[[]],[[]],[32],[32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[32],[32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[52,[87]]]],[[],[[52,[75]]]],[[],[[52,[35]]]],[[],[[52,[31]]]],[[],[[52,[33]]]],[[],[[52,[29]]]],[[],[[52,[28]]]],[[],[[52,[27]]]],[[]],[[]],[[],39],[[],[[52,[36]]]],[[],[[52,[30]]]],[[],[[52,[32]]]],[[],[[52,[37]]]],[[],[[52,[34]]]],[[],[[52,[5]]]],[[],32],[[],32],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[32],[32],[[]],[[]],[[]],[32],[32],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[],52],[[],52],[87,52],[75,52],[35,52],[31,52],[33,52],[29,52],[28,52],[27,52],[36,52],[30,52],[32,52],[37,52],[34,52],[5,52],[[],[[52,[87]]]],[[],[[52,[75]]]],[[],[[52,[35]]]],[[],[[52,[31]]]],[[],[[52,[33]]]],[[],[[52,[29]]]],[[],[[52,[28]]]],[[],[[52,[27]]]],[[],[[52,[36]]]],[[],[[52,[30]]]],[[],[[52,[32]]]],[[],[[52,[37]]]],[[],[[52,[34]]]],[[],[[52,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],102],[[],102],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33],[33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],50],[[],50],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],32],[[],32],[[]],[[]],[[],32],[[],32],[32],[[]],[32],[32],[32],[32],[[]],[[]],[[]],[[],32],[[],32],[32],[32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],52],[[],52],[[],52],[[],52],[[],52],[32,52],[32,52],[[],52],0,0,[[],52],[[],52],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[32],[32],[[]],0,0,[5,52],[5],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],50],[[],50],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],50],[[],50],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[89,5],[[6,[5]]]],[[89,5],[[6,[5]]]],[63],[89],[65],[89],[63],[89],[63],[89],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[89,89],[[]],[89,5],[63],[89],[65],[86],[[63,3],[[6,[69]]]],[[89,3],[[6,[69]]]],[[65,3],[[6,[69]]]],[[86,3],[[6,[69]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[63,50],[89,50],[63],[65],[63,52],[89,52],[65,52],[86,52],[63,52],[89,52],[86,52],[89,[[6,[105]]]],[63],[89],[65],[86],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[34,106],0,0,0,0,[30,107],0,0,0,[32,108],0,0,0,0,0,[[[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[34]]]],[[[41,[13]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[114,[[0,[112,113,111]]]]],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]]],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]]],[[41,[[0,[112,113]]]]]],[[]],[[]],[[]],[[[114,[[0,[112,113,111]]]]],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]]],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]]],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],[114,[[0,[112,113,111]]]]],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],[110,[[0,[112,113,109]]]]],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],[41,[[0,[112,113]]]]],[[41,[[0,[112,113]]]]]],[5,[[114,[[0,[112,113,111]]]]]],[5,[[110,[[0,[112,113,109]]]]]],[5,[[41,[[0,[112,113]]]]]],0,[[],34],[[[41,[14]]],[[41,[30]]]],[[[41,[15]]],[[41,[32]]]],[[[41,[16]]],[[41,[37]]]],[[[41,[13]]],[[41,[34]]]],[[[41,[17]]],[[41,[36]]]],[[],[[114,[[0,[113,113,111]]]]]],[[],[[110,[[0,[113,113,109]]]]]],[[],[[41,[[0,[113,113]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[43,113,115,109]]]],[110,[[0,[43,113,115,109]]]]],50],[[[41,[13]],[41,[13]]],50],[[[41,[[0,[43,113,115,109]]]],[41,[[0,[43,113,115,109]]]]],50],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],50],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],50],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],32],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],32],[[41,[[0,[42,111,43]]]]]],[[[114,[[0,[100,113,111]]]],3],4],[[[110,[[0,[100,113,109]]]],3],4],[[[41,[[0,[100,113]]]],3],4],[[]],[[]],[[]],[40,[[110,[34]]]],[40,[[41,[13]]]],[[[45,[34]]],[[110,[34]]]],[[[45,[34]]],[[41,[13]]]],[[],[[114,[[0,[112,113,111]]]]]],[[],[[110,[[0,[112,113,109]]]]]],[[],[[41,[[0,[112,113]]]]]],[[],[[41,[15]]]],[[],[[41,[13]]]],[[],[[41,[17]]]],[[],[[41,[16]]]],[[],[[41,[14]]]],[[],[[110,[34]]]],[[],[[41,[14]]]],[[],[[41,[17]]]],[[],[[41,[16]]]],[[],[[41,[15]]]],[[],[[41,[13]]]],[[],[[114,[[0,[112,113,111]]]]]],[[],[[110,[[0,[112,113,109]]]]]],[[],[[41,[[0,[112,113]]]]]],[[5,5],[[114,[[0,[112,113,111]]]]]],[[5,5],[[110,[[0,[112,113,109]]]]]],[[5,5],[[41,[[0,[112,113]]]]]],[[[44,[5]]],[[114,[[0,[112,113,111]]]]]],[[[44,[5]]],[[110,[[0,[112,113,109]]]]]],[[[44,[5]]],[[41,[[0,[112,113]]]]]],[39,[[110,[34]]]],[39,[[41,[13]]]],[[[45,[[0,[112,113,111]]]]],[[114,[[0,[112,113,111]]]]]],[[[45,[[0,[112,113,109]]]]],[[110,[[0,[112,113,109]]]]]],[[[45,[[0,[112,113]]]]],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],5,5]],[[[110,[[0,[112,113,109]]]],5,5]],[[[41,[[0,[112,113]]]],5,5]],[[[114,[[0,[112,113,111]]]],5,5],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],5,5],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],5,5],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],5],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],5],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],5],[[41,[[0,[112,113]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],50],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],50],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],50],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],50],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[114,[[0,[112,113,111]]]],[44,[5]]]],[[[114,[[0,[112,113,111]]]],34]],[[[114,[[0,[112,113,111]]]],32]],[[[114,[[0,[112,113,111]]]],33]],[[[114,[[0,[112,113,111]]]],5]],[[[110,[[0,[112,113,109]]]],33]],[[[110,[[0,[112,113,109]]]],32]],[[[110,[[0,[112,113,109]]]],[44,[5]]]],[[[110,[[0,[112,113,109]]]],34]],[[[110,[[0,[112,113,109]]]],5]],[[[41,[[0,[112,113]]]],34]],[[[41,[[0,[112,113]]]],32]],[[[41,[[0,[112,113]]]],33]],[[[41,[[0,[112,113]]]],5]],[[[41,[[0,[112,113]]]],[44,[5]]]],[[[114,[[0,[112,113,111]]]],5]],[[[114,[[0,[112,113,111]]]],33]],[[[114,[[0,[112,113,111]]]],32]],[[[114,[[0,[112,113,111]]]],34]],[[[110,[[0,[112,113,109]]]],32]],[[[110,[[0,[112,113,109]]]],5]],[[[110,[[0,[112,113,109]]]],34]],[[[110,[[0,[112,113,109]]]],33]],[[[41,[[0,[112,113]]]],33]],[[[41,[[0,[112,113]]]],5]],[[[41,[[0,[112,113]]]],34]],[[[41,[[0,[112,113]]]],32]],[[]],[[]],[[]],[[],2],[[],2],[[[110,[34]]],[[45,[34]]]],[[[41,[13]]],[[45,[34]]]],[[[41,[14]]],[[45,[30]]]],[[[41,[15]]],[[45,[32]]]],[[[41,[16]]],[[45,[37]]]],[[[41,[17]]],[[45,[36]]]],[[[114,[[0,[112,113,111]]]],5,5],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],5,5],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],5,5],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],[44,[5]]],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],[44,[5]]],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],[44,[5]]],[[41,[[0,[112,113]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[114,[[0,[112,113,111]]]]],[[80,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]]],[[80,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]]],[[80,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]]],5],[[[114,[[0,[112,113,111]]]]],5],[[[110,[[0,[112,113,109]]]]],5],[[[110,[[0,[112,113,109]]]]],5],[[[41,[[0,[112,113]]]]],5],[[[41,[[0,[112,113]]]]],5],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],50],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],50],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],50],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],50],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[],[[110,[[0,[42,109,43]]]]]],[[],[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]]]],[5,[[114,[[0,[112,113,111]]]]]],[5,[[110,[[0,[112,113,109]]]]]],[5,[[41,[[0,[112,113]]]]]],[[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[114,[[0,[112,113,111]]]],5],5],[[[110,[[0,[112,113,109]]]],5],5],[[[41,[[0,[112,113]]]],5],5],[[[114,[[0,[112,113,111]]]],5],5],[[[110,[[0,[112,113,109]]]],5],5],[[[41,[[0,[112,113]]]],5],5],[[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[114,[[0,[112,113,111]]]]],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]]],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]]],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],[0,[112,113,111]]],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],[0,[112,113,109]]],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],[0,[112,113]]],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],5],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],5],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],5],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],5,5],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],5,5],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],5,5],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],5,5],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],5,5],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],5,5],[[41,[[0,[112,113]]]]]],[[[110,[[0,[42,109,43]]]],5]],[[[41,[[0,[42,111,43]]]],5]],[[[110,[[0,[42,109,43]]]],5]],[[[41,[[0,[42,111,43]]]],5]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[114,[[0,[112,113,111]]]],5,5],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],5,5],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],5,5],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],[44,[5]]],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],[44,[5]]],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],[44,[5]]],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],5]],[[[110,[[0,[112,113,109]]]],5]],[[[41,[[0,[112,113]]]],5]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[34]]],39],[[[41,[13]]],39],[[[110,[34]]],[[45,[34]]]],[[[41,[16]]],[[45,[37]]]],[[[41,[17]]],[[45,[36]]]],[[[41,[13]]],[[45,[34]]]],[[[41,[15]]],[[45,[32]]]],[[[41,[14]]],[[45,[30]]]],[[]],[[]],[[]],[[[114,[[0,[112,113,111]]]],5],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],5],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],5],[[41,[[0,[112,113]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[[114,[[0,[112,113,111]]]],5],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],5],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],5],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],5,[114,[[0,[112,113,111]]]]],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],5,[110,[[0,[112,113,109]]]]],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],5,[41,[[0,[112,113]]]]],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]],5,5,5],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]],5,5,5],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]],5,5,5],[[41,[[0,[112,113]]]]]],[[[114,[[0,[112,113,111]]]]],[[114,[[0,[112,113,111]]]]]],[[[110,[[0,[112,113,109]]]]],[[110,[[0,[112,113,109]]]]]],[[[41,[[0,[112,113]]]]],[[41,[[0,[112,113]]]]]],[5,[[114,[[0,[112,113,111]]]]]],[5,[[110,[[0,[112,113,109]]]]]],[5,[[41,[[0,[112,113]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]],[[[110,[[0,[42,109,43]]]],[110,[[0,[42,109,43]]]]],[[110,[[0,[42,109,43]]]]]],[[[41,[[0,[42,111,43]]]],[41,[[0,[42,111,43]]]]],[[41,[[0,[42,111,43]]]]]]],"p":[[3,"ByteBuffer"],[6,"Bytes"],[3,"Formatter"],[6,"Result"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"I16"],[3,"I128"],[3,"I32"],[3,"I64"],[3,"I8"],[3,"U8"],[3,"U16"],[3,"U32"],[3,"U64"],[3,"U128"],[3,"BigInt"],[3,"U128Word"],[3,"U16Word"],[3,"U32Word"],[3,"U64Word"],[3,"u16Word"],[3,"u32Word"],[3,"u64Word"],[3,"u128Word"],[15,"isize"],[15,"i8"],[15,"i64"],[15,"u16"],[15,"i16"],[15,"u32"],[15,"i32"],[15,"u8"],[15,"i128"],[15,"u128"],[15,"u64"],[3,"BigUint"],[3,"String"],[15,"str"],[3,"Seq"],[8,"Numeric"],[8,"Copy"],[3,"Range"],[3,"Vec"],[4,"Bound"],[3,"OsStr"],[3,"Path"],[4,"Sign"],[15,"bool"],[4,"ControlFlow"],[4,"Option"],[8,"Integer"],[3,"ParseIntError"],[4,"Ordering"],[4,"GeneratorState"],[3,"RangeFull"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeInclusive"],[3,"RangeToInclusive"],[3,"Global"],[3,"Drain"],[3,"Drain"],[3,"DrainFilter"],[4,"Cow"],[15,"char"],[3,"Error"],[3,"Error"],[3,"Yeet"],[3,"BinaryHeap"],[3,"Box"],[3,"CString"],[3,"VecDeque"],[15,"f64"],[4,"Infallible"],[3,"ParseBigIntError"],[3,"FromUtf16Error"],[3,"FromUtf8Error"],[3,"Iter"],[3,"U32Digits"],[3,"U64Digits"],[4,"IntErrorKind"],[3,"Demand"],[3,"Pin"],[3,"Splice"],[15,"f32"],[4,"SocketAddr"],[3,"IntoIter"],[3,"TryFromBigIntError"],[3,"TryReserveError"],[8,"SeqTrait"],[4,"Alignment"],[3,"Arguments"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[8,"Debug"],[8,"Write"],[4,"FpCategory"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"IntoIter"],[6,"Byte"],[6,"DoubleByte"],[6,"QuadByte"],[8,"PublicInteger"],[3,"PublicSeq"],[8,"SecretInteger"],[8,"Clone"],[8,"Default"],[3,"SecretSeq"],[8,"PartialEq"],[8,"FromStr"],[8,"TryFrom"],[8,"Num"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"FnOnce"],[8,"Index"],[8,"Try"],[8,"SecretIntegerCopy"],[8,"Generator"],[8,"PublicIntegerCopy"],[8,"Deref"],[8,"Residual"],[8,"Signed"],[8,"ModNumeric"],[8,"AddAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"Fn"],[8,"FnMut"],[8,"CheckedSub"],[8,"RangeBounds"],[8,"DerefMut"],[8,"DivAssign"],[8,"Drop"],[8,"Display"],[8,"UnsignedSecretInteger"],[8,"UnsignedPublicInteger"],[8,"FromResidual"],[8,"IndexMut"],[8,"One"],[8,"Zero"],[8,"MulAssign"],[8,"RemAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"SubAssign"],[8,"ToString"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"FloatConst"],[8,"Inv"],[8,"MulAdd"],[8,"Pow"],[8,"Float"],[8,"AsPrimitive"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedEuclid"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"PrimInt"],[8,"Euclid"],[8,"NumCast"],[8,"FromPrimitive"],[8,"Bounded"],[8,"MulAddAssign"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"ToPrimitive"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"FloatCore"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Real"],[8,"ByteTrait"],[8,"U16Trait"],[8,"U32Trait"]],"a":{"!":[123],"!=":[158,159],"%":[174,175],"%=":[175],"&":[48],"&*":[66],"&=":[49],"*":[66,67,118,119],"*=":[119],"+":[43,44],"+=":[44],"-":[121,193,194],"-=":[194],"..":[167,169,170,172],"..=":[171,173],"/":[70,71],"/=":[71],"<<":[184],"<<=":[185],"==":[158,159],">>":[186],">>=":[187],"?":[209],"[":[112,113],"[]":[112,113],"]":[112,113],"^":[52],"^=":[53],"{:?}":[62,63,3995],"{}":[69,4002],"|":[50],"|=":[51]}},\
"hacspec_pasta":{"doc":"","tn":["Fp","FpCanvas","FpCurve","G1","ONE","ONE","ONE","ONE","ScalarCanvas","TWO","TWO","TWO","TWO","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","add","add","add","add","add_mod","add_mod","add_mod","add_mod","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","declassify","declassify","default","default","default","default","div","div","div","div","divide","divide","divide","divide","eq","eq","eq","eq","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_secret_literal","from_secret_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","g1_default","g1_is_identity","g1_on_curve","g1add","g1double","g1mul","g1neg","get_bit","get_bit","get_bit","get_bit","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max_val","max_val","max_val","max_val","max_value","max_value","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","set","set","set","set","set_bit","set_bit","set_bit","set_bit","shl","shl","shl","shl","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_pastad":["","","","","","","","","","","","","","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","Division.","Division.","Division.","Division.","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,2,2,2,3,3,3,4,4,4,1,1,1,2,2,3,3,3,4,4,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,2,2,3,3,4,4,1,2,3,4,2,4,2,4,1,2,3,4,0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,2,2,3,3,3,4,4,2,4,1,1,2,2,3,3,4,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,3,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],"f":[0,0,0,0,[[],1],[[],2],[[],3],[[],4],0,[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[1,1],[2,2],[3,3],[4,4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[1,5],6],[[2,5],6],[[3,5],6],[[4,5],6],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[2,8],[4,8],[[],1],[[],2],[[],3],[[],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[1,10],11],[[1,10],11],[[1,10],11],[[2,10],11],[[2,10],11],[[2,10],11],[[3,10],11],[[3,10],11],[[3,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[8,1],[12,1],[[]],[[]],[1,2],[12,3],[[]],[8,3],[3,4],[[]],[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[[14,[13]]],2],[[[14,[13]]],4],[1,2],[3,4],[15,1],[15,2],[15,3],[15,4],[16,1],[16,2],[16,3],[16,4],[[],1],[[],2],[[],3],[[],4],[17,1],[17,1],[17,2],[17,2],[17,3],[17,3],[17,4],[17,4],[[[14,[18]]],1],[[[14,[18]]],2],[[[14,[18]]],3],[[[14,[18]]],4],[[[14,[18]]],2],[[[14,[18]]],4],[19,2],[19,4],[20,1],[20,2],[20,3],[20,4],[[],21],[21,6],[21,6],[[21,21],21],[21,21],[[4,21],21],[21,21],[[1,5],1],[[2,5],2],[[3,5],3],[[4,5],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[1,12],[[]],[1,8],[[]],[2,1],[[]],[3,8],[3,12],[[]],[4,3],[2,1],[4,3],[[1,1],1],[[1,1],1],[[2,2],2],[2,2],[[3,3],3],[[3,3],3],[4,4],[[4,4],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[],1],[[],3],[[],1],[[],2],[[],3],[[],4],[[],1],[[],3],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[2,2],[4,4],[1],[2],[3],[4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],[[22,[7]]]],[[2,2],[[22,[7]]]],[[3,3],[[22,[7]]]],[[4,4],[[22,[7]]]],[[1,17,1],1],[[2,17],2],[[3,17,3],3],[[4,17],4],[5,1],[5,2],[5,3],[5,4],[[1,1,1],1],[[2,2],2],[[3,3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,5],1],[[2,5],2],[[3,5],3],[[4,5],4],[[1,5],1],[[2,5],2],[[3,5],3],[[4,5],4],[[1,5,1,5],1],[[2,5,2,5],2],[[3,5,3,5],3],[[4,5,4,5],4],[[1,1,5],1],[[2,2,5],2],[[3,3,5],3],[[4,4,5],4],[[1,5]],[[2,5]],[[3,5]],[[4,5]],[[1,5]],[[2,5]],[[3,5]],[[4,5]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[1],[2,[[23,[18]]]],[3],[4,[[23,[18]]]],[1,[[24,[13]]]],[2,[[24,[13]]]],[3,[[24,[13]]]],[4,[[24,[13]]]],[2,[[24,[13]]]],[4,[[24,[13]]]],[1],[2,[[23,[18]]]],[3],[4,[[23,[18]]]],[[]],[[]],[[]],[[]],[2,[[24,[18]]]],[4,[[24,[18]]]],[2,[[24,[18]]]],[4,[[24,[18]]]],[[],16],[[],16],[[],16],[[],16],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],26],[[],26],[[],26],[[],26],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4]],"p":[[3,"FpCanvas"],[3,"FpCurve"],[3,"ScalarCanvas"],[3,"Fp"],[15,"usize"],[15,"bool"],[4,"Ordering"],[3,"BigInt"],[15,"u32"],[3,"Formatter"],[6,"Result"],[3,"BigUint"],[3,"U8"],[8,"SeqTrait"],[15,"str"],[3,"String"],[15,"u128"],[15,"u8"],[3,"U128"],[15,"i128"],[6,"G1"],[4,"Option"],[3,"Vec"],[3,"Seq"],[4,"Result"],[3,"TypeId"]]},\
"num":{"doc":"A collection of numeric types and traits for Rust.","t":[3,6,3,8,8,8,8,8,3,8,8,16,8,8,8,8,8,6,6,6,8,8,8,8,8,5,10,10,11,11,5,10,10,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,10,11,11,10,10,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,5,5,10,11,11,11,11,11,11,10,10,11,11,11,10,11,11,11,10,11,11,11,5,10,11,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,0,11,11,11,10,11,11,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,12,10,0,10,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,10,11,11,10,11,11,11,11,11,11,10,11,10,10,10,11,11,11,0,11,11,11,11,11,11,10,11,11,11,10,10,11,11,10,10,11,11,10,11,11,10,11,11,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,0,0,5,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,5,5,5,5,0,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,5,10,10,11,10,11,11,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,5,10,11,11,11,3,3,13,13,3,13,4,8,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,10,10,5,5,10,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,3,6,6,8,3,16,10,10,10,10,10,10,10,10,11,11,10,10,10,10,11,11,10,10,10,11,11,11,10,12,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,12,10,10,10,10,10,10,11,11,11,11,8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,8,8,5,5,5,5,10,10,6,3,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,8,8,8,10,13,8,10,10,10,10,10,10,10,10,10,8,8,4,8,16,8,13,10,10,11,10,11,10,8,8,8,8,8,8,8,8,8,8,16,16,16,10,3,8,8,8,10,8,8,8,8,8,11,8,8,8,8,8,8,8,8,8,5,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,0,0,5,10,10,10,10,10,10,10,5,10,10,10,10,10,5,5,5,10,11,10,10,10,10,10,11,10,10,10,0,10,11,11,11,10,10,11,11,10,11,11,11,11,11,10,11,11,10,10,11,11,11,10,11,11,10,0,10,0,10,11,11,10,10,10,10,10,10,11,10,10,10,10,12,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,10,0,0,5,10,10,10,10,0,10,10,11,10,10,10,10,10,10,10,10,11,11,0,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,10,11,11,11,10,10,11,11,11,11,11,11,10,10,10,10,10,10,10,10,5,10,8,8,8,10,10,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,11,10,10,11,10,10,10,10,10,10,10,11,10,10,10,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,8,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["BigInt","BigRational","BigUint","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedSub","Complex","Float","FromPrimitive","FromStrRadixErr","Integer","Num","NumCast","One","PrimInt","Rational","Rational32","Rational64","Saturating","Signed","ToPrimitive","Unsigned","Zero","abs","abs","abs","abs","abs","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","arg","arg","as_","asin","asin","asin","asinh","asinh","asinh","assign_from_slice","assign_from_slice","atan","atan","atan","atan2","atanh","atanh","atanh","average_ceil","average_ceil","average_floor","average_floor","bigint","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","ceil","checked_add","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_mul","checked_pow","checked_sub","checked_sub","checked_sub","checked_sub","cis","clamp","classify","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","cmp","cmp","complex","conj","conj","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_zeros","default","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_ceil","div_floor","div_floor","div_floor","div_mod_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","div_rem","divides","divides","divides","epsilon","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","expf","expf","extended_gcd","extended_gcd_lcm","extended_gcd_lcm","fdiv","finv","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i64","from_i64","from_i8","from_i8","from_isize","from_isize","from_le","from_polar","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u16","from_u16","from_u32","from_u32","from_u64","from_u64","from_u64","from_u64","from_u8","from_u8","from_usize","from_usize","gcd","gcd","gcd","gcd_lcm","gcd_lcm","gcd_lcm","hash","hash","hash","hypot","i","im","im","infinity","integer","integer_decode","into","into","into","into_parts","inv","inv","inv","is_even","is_even","is_even","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_multiple_of","is_multiple_of","is_multiple_of","is_nan","is_nan","is_nan","is_negative","is_negative","is_normal","is_normal","is_normal","is_odd","is_odd","is_odd","is_one","is_one","is_one","is_one","is_positive","is_positive","is_sign_negative","is_sign_positive","is_zero","is_zero","is_zero","is_zero","iter","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","l1_norm","l1_norm","lcm","lcm","lcm","leading_ones","leading_zeros","ln","ln","ln","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","magnitude","max","max_value","max_value","min","min_positive_value","min_value","min_value","mod_floor","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nan","neg","neg","neg","neg","neg_infinity","neg_zero","new","new","new","next_multiple_of","next_multiple_of","next_multiple_of","norm","norm_sqr","not","not","nth_root","nth_root","nth_root","nth_root","one","one","one","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powc","powf","powf","powf","powi","powi","powi","powu","prev_multiple_of","prev_multiple_of","prev_multiple_of","product","product","product","product","range","range_inclusive","range_step","range_step_inclusive","rational","re","re","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","reverse_bits","rotate_left","rotate_right","round","saturating_add","saturating_sub","scale","set_bit","set_bit","set_one","set_one","set_one","set_one","set_zero","set_zero","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signed_shl","signed_shr","signum","signum","signum","signum","sin","sin","sin","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","swap_bytes","tan","tan","tan","tanh","tanh","tanh","to_be","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_degrees","to_f32","to_f32","to_f32","to_f32","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_le","to_owned","to_owned","to_owned","to_polar","to_radians","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u16","to_u16","to_u32","to_u32","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64","to_u64","to_u64_digits","to_u64_digits","to_u8","to_u8","to_usize","to_usize","trailing_ones","trailing_ones","trailing_zeros","trailing_zeros","trailing_zeros","traits","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unscale","unsigned_shl","unsigned_shr","zero","zero","zero","zero","zero","BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","count","count","description","description","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","into","into","into_iter","into_iter","into_original","last","last","len","len","mul","neg","next","next","next_back","next_back","nth","partial_cmp","provide","provide","size_hint","size_hint","to_bigint","to_biguint","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AsPrimitive","AsPrimitive","FromPrimitive","FromPrimitive","NumCast","NumCast","ToPrimitive","ToPrimitive","as_","as_","cast","cast","from","from","from_f32","from_f32","from_f64","from_f64","from_i128","from_i128","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i8","from_i8","from_isize","from_isize","from_u128","from_u128","from_u16","from_u16","from_u32","from_u32","from_u64","from_u64","from_u8","from_u8","from_usize","from_usize","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_u128","to_u128","to_u16","to_u16","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","to_usize","to_usize","Complex","Complex32","Complex64","ComplexFloat","ParseComplexError","Real","abs","acos","acosh","arg","asin","asinh","atan","atanh","borrow","borrow_mut","cbrt","conj","cos","cosh","description","eq","exp","exp2","expf","fmt","fmt","from","im","im","into","is_finite","is_infinite","is_nan","is_normal","l1_norm","ln","log","log10","log2","powc","powf","powi","provide","re","re","recip","sin","sinh","sqrt","tan","tanh","to_string","try_from","try_into","type_id","Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y","Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","end_bound","end_bound","end_bound","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","start_bound","start_bound","start_bound","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Output","Output","Pow","Pow","checked_pow","checked_pow","pow","pow","pow","pow","BigRational","ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","denom","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_float","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","provide","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_i128","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero","AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","E","Empty","Euclid","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","Output","Output","Output","PI","ParseFloatError","Pow","PrimInt","RefNum","SQRT_2","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","TAU","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs","abs","abs_sub","abs_sub","abs_sub","acos","acosh","as_","asin","asinh","atan","atan2","atanh","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","cbrt","ceil","checked_add","checked_div","checked_div_euclid","checked_mul","checked_neg","checked_pow","checked_rem","checked_rem_euclid","checked_shl","checked_shr","checked_sub","clamp","clamp_max","clamp_min","classify","copysign","cos","cosh","count_ones","count_zeros","div_euclid","epsilon","exp","exp2","exp_m1","float","floor","fmt","fmt","fmt","fract","from","from","from","from_be","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_le","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hypot","identities","infinity","int","integer_decode","into","into","inv","is_finite","is_infinite","is_nan","is_negative","is_normal","is_one","is_positive","is_sign_negative","is_sign_positive","is_zero","kind","leading_ones","leading_zeros","ln","ln_1p","log","log10","log2","max","max_value","max_value","min","min_positive_value","min_value","min_value","mul_add","mul_add","mul_add_assign","nan","neg_infinity","neg_zero","one","one","ops","pow","pow","pow","pow","powf","powi","real","recip","rem_euclid","reverse_bits","rotate_left","rotate_right","round","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","set_one","set_zero","sign","signed_shl","signed_shr","signum","signum","signum","sin","sin_cos","sinh","sqrt","swap_bytes","tan","tanh","to_be","to_degrees","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_le","to_radians","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trailing_ones","trailing_zeros","trunc","try_from","try_from","try_into","try_into","type_id","type_id","unsigned_shl","unsigned_shr","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","zero","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["numnum::bigint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::pow","","","","","","","","","","num::rationalnum::traitsnum::traits::bounds","","","","","","","num::traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::identities","","","","","","","","","","num::traits::int","","","","","","","","","","","","","","","","","","","","num::traits::ops","","","","","","","num::traits::ops::checked","","","","","","","","","","","","","","","","num::traits::ops::euclid","","","","","","num::traits::ops::inv","","","num::traits::ops::mul_add","","","","","num::traits::ops::overflowing","","","","","","num::traits::ops::saturating","","","","","","","","","num::traits::ops::wrapping","","","","","","","","","","","","num::traits::pow","","","","","num::traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::sign","","","","","","","","",""],"d":["A big signed integer type.","Alias for arbitrary precision rationals.","A big unsigned integer type.","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs subtraction that returns <code>None</code> instead of wrapping …","A complex number in Cartesian form.","Generic trait for floating point numbers","A generic trait for converting a number to a value.","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","An interface for casting between machine scalars.","Defines a multiplicative identity element for <code>Self</code>.","Generic trait for primitive integers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Useful functions for signed numbers (i.e. numbers that can …","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","","","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","","Computes the arccosine of a number. Return value is in …","","Computes the principal value of the inverse cosine of <code>self</code>.","Inverse hyperbolic cosine function.","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate the principal Arg of self.","","Computes the arcsine of a number. Return value is in …","Computes the principal value of the inverse sine of <code>self</code>.","","Inverse hyperbolic sine function.","","Computes the principal value of inverse hyperbolic sine of …","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Computes the arctangent of a number. Return value is in …","","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Computes the principal value of inverse hyperbolic tangent …","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","","","","","","","","","","","","","Cast from one machine scalar to another.","Cast from one machine scalar to another.","Take the cubic root of a number.","","Returns the truncated principal cube root of <code>self</code> – see …","Computes the principal value of the cube root of <code>self</code>.","","","Returns the truncated principal cube root of <code>self</code> – see …","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","","","","Divides two numbers, checking for underflow, overflow and …","","","","Multiplies two numbers, checking for underflow or …","","","","Raises a value to the power of exp, returning <code>None</code> if an …","Subtracts two numbers, checking for underflow. If …","","","","Create a new Complex with a given phase: <code>exp(i * phase)</code>. …","A value bounded by a minimum and a maximum","Returns the floating point category of the number. If only …","","","","","","","","","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","","Computes the cosine of <code>self</code>.","Hyperbolic cosine function.","","Computes the hyperbolic cosine of <code>self</code>.","Returns the number of ones in the binary representation of …","Returns the number of one bits.","Returns the number of zeros in the binary representation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ceiled integer division.","","","Floored integer division.","","","Simultaneous floored integer division and modulus. Returns …","","","Simultaneous truncated integer division and modulus. …","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Returns epsilon, a small positive value.","","","","Returns <code>e^(self)</code>, (the exponential function).","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","Returns <code>2^(self)</code>.","Computes <code>2^(self)</code>.","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","","Raises a floating point number to the complex power <code>self</code>.","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","Greatest common divisor, least common multiple, and …","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","Returns the largest integer less than or equal to a number.","","","","","","","","","","","","","","","","","","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Convert an integer from big endian to the target’s …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Converts a <code>f32</code> to return an optional value of this type. …","","Converts a <code>f64</code> to return an optional value of this type. …","","","","Converts an <code>i128</code> to return an optional value of this type. …","","","","Converts an <code>i16</code> to return an optional value of this type. …","","Converts an <code>i32</code> to return an optional value of this type. …","","Converts an <code>i64</code> to return an optional value of this type. …","","","","Converts an <code>i8</code> to return an optional value of this type. …","","Converts an <code>isize</code> to return an optional value of this …","","Convert an integer from little endian to the target’s …","Convert a polar representation into a complex number.","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","Convert from a string and radix (typically <code>2..=36</code>).","Creates and initializes a BigInt.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Creates and initializes a <code>BigUint</code>.","Converts an <code>u128</code> to return an optional value of this type. …","","","","Converts an <code>u16</code> to return an optional value of this type. …","","Converts an <code>u32</code> to return an optional value of this type. …","","Converts an <code>u64</code> to return an optional value of this type. …","","","","Converts an <code>u8</code> to return an optional value of this type. …","","Converts a <code>usize</code> to return an optional value of this type. …","","Greatest Common Divisor (GCD).","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","","","Calculate the length of the hypotenuse of a right-angle …","Returns imaginary unit","","Imaginary portion of the complex number","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","","","Returns <code>1/self</code>","Returns <code>true</code> if the number is even.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","Checks if the given complex number is finite","Returns <code>true</code> if this value is positive infinity or …","","Checks if the given complex number is infinite","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","","Checks if the given complex number is NaN","Returns true if the number is negative and false if the …","","Returns <code>true</code> if the number is neither zero, infinite, …","Checks if the given complex number is normal","","Returns <code>true</code> if the number is odd.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","","","","Returns true if the number is positive and false if the …","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Lowest Common Multiple (LCM).","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Computes the principal value of natural logarithm of <code>self</code>.","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the base 10 logarithm of the number.","","Computes the principal value of log base 10 of <code>self</code>.","Returns the base 2 logarithm of the number.","Computes the principal value of log base 2 of <code>self</code>.","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","Returns the maximum of the two numbers.","Returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Floored integer modulo, satisfying:","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>NaN</code> value.","","","","","Returns the negative infinite value.","Returns <code>-0.0</code>.","Creates and initializes a BigInt.","Create a new Complex","Creates and initializes a <code>BigUint</code>.","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","Raises a value to the power of exp, using exponentiation …","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","Raises <code>self</code> to a complex power.","","Raise a number to a floating point power.","","Raises <code>self</code> to a floating point power.","Raise a number to an integer power.","","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Multiplies <code>self</code> by the scalar <code>t</code>.","Sets or clears the bit in the given position, using the two…","Sets or clears the bit in the given position","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","","","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</codeeturns the sign of the <code>BigInt</code> as a <code>Sign</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","","Computes the sine of a number (in radians).","","Computes the sine of <code>self</code>.","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","","Computes the hyperbolic sine of <code>self</code>.","Take the square root of a number.","Returns the truncated principal square root of <code>self</code> – …","","Computes the principal value of the square root of <code>self</code>.","","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Computes the tangent of <code>self</code>.","","Hyperbolic tangent function.","","Computes the hyperbolic tangent of <code>self</code>.","Convert <code>self</code> to big endian from the target’s endianness.","","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","","","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","","","","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","","","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","","","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","","Convert <code>self</code> to little endian from the target’s …","","","","Convert to polar form (r, theta), such that …","Converts degrees to radians.","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","","","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","","Returns the number of trailing ones in the binary …","Returns the number of least-significant bits that are ones.","Returns the number of trailing zeros in the binary …","Returns the number of least-significant bits that are zero,","Returns the number of least-significant bits that are zero,","","Return the integer part of a number.","","","","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","","","","A big signed integer type.","A big unsigned integer type.","","","","","A Sign is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion …","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Extract the original value, if available. The value will …","","","","","","Negate Sign value.","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","Converts the value of <code>self</code> to a <code>BigUint</code>.","","","","","","","","","","","","","","","","","","","","","A generic interface for casting between machine scalars …","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","A complex number in Cartesian form.","","","Generic trait for floating point complex numbers.","","The type used to represent the real coefficients of this …","Returns the absolute value of the number. See also …","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the argument of the number.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Inverse hyperbolic tangent function.","","","Take the cubic root of a number.","Computes the complex conjugate of the number.","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","","","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>base^(self)</code>.","","","Returns the argument unchanged.","Returns the imaginary part of the number.","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a real power.","Raises <code>self</code> to a signed integer power.","","Returns the real part of the number.","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>. See also …","Computes the sine of a number (in radians).","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","","","","","Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","","","An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The result after applying the operator.","The result after applying the operator.","Binary operator for raising a value to a power.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Returns <code>self</code> to the power <code>rhs</code>.","Alias for arbitrary precision rationals.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Returns zero","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a float into a rational number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","Rounds towards zero.","","","","","","","","A generic interface for casting between machine scalars …","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Return Euler’s number.","","","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","","A generic trait for converting a number to a value.","","Unary operator for retrieving the multiplicative inverse, …","","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","An interface for casting between machine scalars.","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","Defines a multiplicative identity element for <code>Self</code>.","The result after applying the operator.","The resulting type after applying the fused multiply-add.","The result after applying the operator.","Return Archimedes’ constant <code>π</code>.","","Binary operator for raising a value to a power.","Generic trait for primitive integers.","The trait for <code>Num</code> references which implement numeric …","Return <code>sqrt(2.0)</code>.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Useful functions for signed numbers (i.e. numbers that can …","Return the full circle constant <code>τ</code>.","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Convert a value to another, using the <code>as</code> operator.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Performs euclid division that returns <code>None</code> instead of …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Raises a value to the power of exp, returning <code>None</code> if an …","Finds the remainder of dividing two numbers, checking for …","Finds the euclid remainder of dividing two numbers, …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Calculates Euclidean division, the matching method for …","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","","Returns the largest integer less than or equal to a number.","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","Returns the argument unchanged.","Returns the argument unchanged.","Convert an integer from big endian to the target’s …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Convert an integer from little endian to the target’s …","Convert from a string and radix (typically <code>2..=36</code>).","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Calculate the length of the hypotenuse of a right-angle …","","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the multiplicative inverse of <code>self</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns true if the number is negative and false if the …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","Returns <code>self</code> to the power <code>rhs</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Convert <code>self</code> to big endian from the target’s endianness.","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Convert <code>self</code> to little endian from the target’s …","Converts degrees to radians.","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Return the integer part of a number.","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,52,1,2,0,51,52,1,51,2,2,51,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,15,2,2,2,51,2,2,51,2,2,1,15,51,2,2,51,51,2,2,1,15,1,15,0,1,15,1,1,1,1,15,15,15,15,1,1,15,15,1,1,1,1,15,15,15,15,1,1,15,15,1,15,1,1,1,1,15,15,15,15,1,1,15,15,1,2,15,1,2,15,0,0,0,0,51,1,1,2,2,15,15,51,53,1,1,15,54,1,1,15,55,1,1,15,0,56,1,1,15,2,0,51,1,2,15,1,15,1,2,15,1,15,0,2,2,51,51,2,2,51,2,2,57,15,57,1,2,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,15,58,1,15,58,1,15,58,1,15,58,1,15,58,1,15,51,1,2,15,51,2,2,51,2,2,51,2,2,58,58,1,2,2,51,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,51,59,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,57,1,1,15,1,15,60,2,60,1,2,15,60,1,2,15,60,2,60,2,60,1,2,15,60,2,60,2,57,2,1,15,1,15,1,1,1,15,1,2,15,50,1,2,15,60,1,2,15,60,2,60,2,60,1,2,15,60,2,60,2,58,1,15,58,1,15,1,2,15,51,2,2,2,51,0,51,1,2,15,1,2,2,2,58,1,15,51,2,2,51,2,2,58,1,15,51,2,2,52,1,51,2,2,58,1,15,61,1,2,15,52,1,51,51,62,1,2,15,0,1,15,1,15,2,2,58,1,15,57,57,51,2,2,51,51,2,2,51,2,2,51,2,2,1,51,63,51,51,51,63,51,58,1,15,1,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,51,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,15,51,1,1,2,2,51,51,1,2,15,58,1,15,2,2,1,1,1,1,15,15,0,61,1,2,15,1,15,1,15,0,0,0,0,57,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,2,51,2,2,51,2,2,2,58,1,15,1,2,2,15,0,0,0,0,0,2,2,51,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,15,57,57,57,51,64,64,2,1,15,61,1,2,15,62,1,2,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,57,57,0,51,52,1,51,2,2,51,51,2,2,51,1,1,2,2,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,15,1,2,2,15,57,51,2,2,51,2,2,57,1,15,1,1,15,1,15,1,15,51,65,1,2,15,65,1,2,15,65,1,2,15,65,2,65,2,65,1,2,15,65,2,65,2,57,1,2,15,2,51,1,15,1,15,1,1,1,15,1,2,15,65,1,2,15,65,2,65,2,1,15,65,1,2,15,1,15,65,2,65,2,57,15,57,1,15,0,51,1,2,15,15,15,15,15,15,15,15,15,1,2,15,1,2,15,2,57,57,0,62,1,2,15,0,0,16,16,0,16,0,0,0,0,0,0,29,30,16,28,38,29,30,16,28,38,16,28,38,16,28,38,16,29,30,28,38,16,28,38,16,28,28,38,38,29,30,16,28,38,16,29,30,16,28,38,29,30,38,29,30,29,30,16,16,29,30,29,30,30,16,28,38,29,30,66,67,16,28,38,28,38,29,30,16,28,38,29,30,16,28,38,29,30,16,28,38,0,0,0,0,0,0,0,0,68,68,0,0,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,0,0,0,69,69,69,69,69,69,69,69,69,41,41,69,69,69,69,41,41,69,69,69,41,41,41,69,2,41,69,69,69,69,69,69,69,69,69,69,69,69,41,69,2,69,69,69,69,69,69,41,41,41,41,0,0,0,0,0,0,70,0,70,0,42,21,42,21,0,71,21,21,0,58,0,58,0,58,0,58,58,21,58,58,21,42,21,0,58,21,0,58,42,21,42,58,58,58,0,58,0,58,0,42,42,58,0,71,58,0,71,21,42,21,42,21,42,21,21,21,0,0,0,0,0,0,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,33,34,43,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,33,34,0,0,0,0,0,0,33,34,43,44,33,34,43,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,72,72,0,0,0,0,0,0,72,72,0,0,0,0,0,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,46,47,46,46,46,46,46,46,47,46,47,46,46,46,47,46,46,46,46,46,46,46,46,46,46,46,46,46,47,46,46,46,46,46,46,46,46,46,47,47,46,46,46,46,47,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,46,47,46,46,46,46,47,46,47,46,47,46,0,0,0,0,0,0,0,0,0,0,0,73,48,0,73,73,73,73,73,73,73,73,73,0,0,0,0,50,0,48,73,73,73,73,73,73,0,0,0,0,0,0,0,0,0,0,74,75,72,73,0,0,0,0,73,0,0,0,0,0,73,0,0,0,0,0,0,0,0,0,0,51,52,0,51,52,51,51,68,51,51,51,51,51,48,49,48,49,0,0,0,51,51,53,54,76,55,77,0,78,76,79,80,56,0,0,0,51,51,51,51,57,57,81,51,51,51,51,0,51,48,49,49,51,59,48,49,57,60,60,60,60,60,60,60,60,57,50,60,60,60,60,60,60,51,0,51,0,51,48,49,74,51,51,51,52,51,61,52,51,51,62,49,57,57,51,51,51,51,51,51,63,51,51,51,63,51,51,75,82,51,51,51,0,61,0,0,0,57,72,51,51,0,51,81,57,57,57,51,64,83,84,64,85,61,62,0,57,57,0,51,52,51,51,51,51,57,51,51,57,51,65,65,65,65,65,65,65,65,57,51,49,65,65,65,65,65,65,57,57,51,48,49,48,49,48,49,57,57,86,87,88,89,90,91,0,62,0,0,0,63,92,63,93,0,0,0,0,68,0,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,65,65,65,65,65,65,65,65,65,65,65,65,65,65,73,73,73,73,73,73,73,73,73,73,0,0,0,73,73,73,73,73,73,73,73,73,51,94,51,51,51,51,51,51,51,51,51,51,94,94,51,51,51,51,94,51,51,51,51,51,94,51,94,51,94,51,94,51,51,94,51,94,51,94,51,94,51,94,51,94,51,51,51,51,51,51,94,94,51,51,94,94,51,94,51,51,94,51,94,51,94,51,51,51,94,51,94,51,94,51,94,51,51,51,51,51,51,94,51,94,51,51,94,0,0,61,62,0,61,61,62,0,62,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,54,55,77,78,79,80,56,0,0,76,76,81,81,0,74,74,0,0,75,75,82,0,0,0,95,96,97,0,0,0,0,64,83,84,64,85,0,0,0,0,0,0,86,87,88,89,90,91,72,0,0,0,72,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,0,0,52,0,52,52,52,0,52],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[1,1],[2],[[]],[[]],[[]],[[1,1],1],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[1,3],1],[[1,3],1],[[1,4],1],[[1,5],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,7],1],[[1,1],1],[[1,8],1],[[1,1],1],[[1,1],1],[[1,8],1],[[1,9],1],[[1,4],1],[[1,10],1],[[1,11],1],[[1,12],1],[[1,5],1],[[1,13],1],[[1,8],1],[[1,11],1],[[1,10],1],[[1,7],1],[[1,9],1],[[1,13],1],[[1,9],1],[[1,9],1],[[1,12],1],[[1,11],1],[[1,8],1],[[1,13],1],[[1,7],1],[[1,14],1],[[1,6],1],[[1,10],1],[[1,13],1],[[1,3],1],[[1,14],1],[[1,1],1],[[1,12],1],[[1,14],1],[[1,4],1],[[1,5],1],[[1,14],1],[[1,3],1],[[1,12],1],[[1,4],1],[[1,5],1],[[1,7],1],[[1,11],1],[[1,10],1],[[2,2]],[2],[2],[[2,2]],[[2,2]],[2],[2],[[2,2]],[[15,15],15],[[15,13],15],[[15,4],15],[[15,14],15],[[15,9],15],[[15,13],15],[[15,14],15],[[15,15],15],[[15,4],15],[[15,9],15],[[15,6],15],[[15,5],15],[[15,15],15],[[15,6],15],[[15,6],15],[[15,4],15],[[15,14],15],[[15,5],15],[[15,6],15],[[15,13],15],[[15,5],15],[[15,9],15],[[15,5],15],[[15,15],15],[[15,13],15],[[15,4],15],[[15,14],15],[[15,9],15],[[1,6]],[[1,5]],[[1,7]],[[1,12]],[[1,10]],[[1,14]],[[1,1]],[[1,3]],[[1,4]],[[1,9]],[[1,11]],[[1,8]],[[1,13]],[[1,1]],[2],[[2,2]],[[2,2]],[2],[[15,13]],[[15,9]],[[15,6]],[[15,15]],[[15,4]],[[15,5]],[[15,15]],[[15,14]],[2],[2],[2],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[1,16]],[15],[[]],[2,2],[2,2],[[]],[[]],[2,2],[2,2],[[]],[[]],[[]],[[]],0,[[1,14],17],[[15,14],17],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[15,15],15],[[15,15],15],[[15,15],15],[[15,15],15],[[1,1]],[[1,1]],[[15,15]],[[15,15]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[15,15],15],[[15,15],15],[[15,15],15],[[15,15],15],[[1,1]],[[1,1]],[[15,15]],[[15,15]],[1,14],[15,14],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[15,15],15],[[15,15],15],[[15,15],15],[[15,15],15],[[1,1]],[[1,1]],[[15,15]],[[15,15]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],18],[[],18],[[]],[1,1],[1,1],[2,2],[2,2],[15,15],[15,15],[[]],[[],18],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[15,15],[[18,[15]]]],[[],18],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[15,15],[[18,[15]]]],[[],18],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[15,15],[[18,[15]]]],[6,18],[[],18],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[15,15],[[18,[15]]]],[[],2],[[]],[[],19],[1,1],[2,2],[15,15],[[1,1]],[[15,15]],[[]],[[]],[[]],[[1,1],20],[[15,15],20],0,[2,2],[2,2],[[]],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[],5],[15,14],[[],5],[[],1],[[],2],[[],15],[[1,4],1],[[1,10],1],[[1,9],1],[[1,14],1],[[1,13],1],[[1,6],1],[[1,14],1],[[1,3],1],[[1,6],1],[[1,11],1],[[1,9],1],[[1,11],1],[[1,7],1],[[1,13],1],[[1,4],1],[[1,9],1],[[1,11],1],[[1,12],1],[[1,12],1],[[1,13],1],[[1,12],1],[[1,5],1],[[1,5],1],[[1,1],1],[[1,3],1],[[1,8],1],[[1,6],1],[[1,5],1],[[1,9],1],[[1,10],1],[[1,1],1],[[1,1],1],[[1,3],1],[[1,6],1],[[1,7],1],[[1,10],1],[[1,8],1],[[1,14],1],[[1,4],1],[[1,12],1],[[1,8],1],[[1,1],1],[[1,13],1],[[1,8],1],[[1,11],1],[[1,3],1],[[1,7],1],[[1,4],1],[[1,10],1],[[1,7],1],[[1,14],1],[[1,5],1],[[2,2]],[2],[[2,2]],[2],[[2,2]],[2],[2],[[2,2]],[[15,9],15],[[15,5],15],[[15,13],15],[[15,14],15],[[15,5],15],[[15,15],15],[[15,13],15],[[15,9],15],[[15,15],15],[[15,6],15],[[15,15],15],[[15,4],15],[[15,14],15],[[15,4],15],[[15,4],15],[[15,9],15],[[15,4],15],[[15,6],15],[[15,9],15],[[15,6],15],[[15,13],15],[[15,5],15],[[15,6],15],[[15,15],15],[[15,14],15],[[15,13],15],[[15,14],15],[[15,5],15],[[1,13]],[[1,10]],[[1,6]],[[1,9]],[[1,1]],[[1,1]],[[1,3]],[[1,8]],[[1,4]],[[1,12]],[[1,7]],[[1,11]],[[1,5]],[[1,14]],[2],[[2,2]],[[2,2]],[2],[[15,4]],[[15,9]],[[15,13]],[[15,15]],[[15,6]],[[15,15]],[[15,5]],[[15,14]],[[]],[[1,1],1],[[15,15],15],[[]],[[1,1],1],[[15,15],15],[[]],[[1,1]],[[15,15]],[[]],[[1,1]],[[15,15]],[[],17],[[1,1],17],[[15,15],17],[[]],[[1,1],17],[[2,2],17],[[15,15],17],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[],21],[[]],[[1,1]],[[2,2],2],[2,2],[[]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[]],[[],18],[15,1],[11,1],[12,1],[6,1],[5,1],[10,1],[7,1],[8,1],[4,1],[13,1],[14,1],[[]],[3,1],[9,1],[[],2],[[],[[18,[2]]]],[[]],[[],2],[9,15],[4,15],[6,15],[[]],[5,15],[14,15],[13,15],[[]],[[16,15],1],[16,1],[[],15],[16,1],[[],15],[25,18],[25,[[18,[2]]]],[26,18],[26,[[18,[1]]]],[26,[[18,[2]]]],[26,[[18,[15]]]],[8,18],[8,[[18,[1]]]],[8,[[18,[2]]]],[8,[[18,[15]]]],[12,18],[12,[[18,[2]]]],[11,18],[11,[[18,[2]]]],[10,18],[10,[[18,[1]]]],[10,[[18,[2]]]],[10,[[18,[15]]]],[3,18],[3,[[18,[2]]]],[7,18],[7,[[18,[2]]]],[[]],[[],2],[[16,5],[[18,[1]]]],[5,[[18,[15]]]],[[16,5],[[18,[1]]]],[5,[[18,[15]]]],[[],1],[[],1],[16,1],[[],15],[27,[[24,[1,28]]]],[27,[[24,[2]]]],[27,[[24,[15,28]]]],[[27,5],24],[[27,5],[[24,[1,28]]]],[[27,5],[[24,[2]]]],[[27,5],[[24,[15,28]]]],[4,18],[4,[[18,[1]]]],[4,[[18,[2]]]],[4,[[18,[15]]]],[13,18],[13,[[18,[2]]]],[5,18],[5,[[18,[2]]]],[14,18],[14,[[18,[1]]]],[14,[[18,[2]]]],[14,[[18,[15]]]],[9,18],[9,[[18,[2]]]],[6,18],[6,[[18,[2]]]],[[]],[[1,1],1],[[15,15],15],[[]],[[1,1]],[[15,15]],[1],[2],[15],[[]],[[],2],[2],0,[[]],0,[[]],[[]],[[]],[[]],[1],[2],[2],[2,2],[[],17],[1,17],[15,17],[[],17],[2,17],[2,17],[[],17],[2,17],[2,17],[[],17],[[1,1],17],[[15,15],17],[[],17],[2,17],[2,17],[[],17],[1,17],[[],17],[2,17],[2,17],[[],17],[1,17],[15,17],[[],17],[1,17],[2,17],[15,17],[[],17],[1,17],[[],17],[[],17],[[],17],[1,17],[2,17],[15,17],0,[1,29],[15,29],[1,30],[15,30],[2],[2],[[]],[[1,1],1],[[15,15],15],[[],5],[[],5],[[]],[2,2],[2,2],[[]],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[1,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],1],[[15,15],15],[[1,1,1],1],[[15,15,15],15],[[1,12],1],[[1,9],1],[[1,8],1],[[1,6],1],[[1,1],1],[[1,11],1],[[1,14],1],[[1,10],1],[[1,14],1],[[1,6],1],[[1,4],1],[[1,7],1],[[1,11],1],[[1,7],1],[[1,8],1],[[1,3],1],[[1,10],1],[[1,5],1],[[1,3],1],[[1,3],1],[[1,6],1],[[1,7],1],[[1,5],1],[[1,11],1],[[1,6],1],[[1,12],1],[[1,4],1],[[1,9],1],[[1,13],1],[[1,12],1],[[1,11],1],[[1,8],1],[[1,7],1],[[1,4],1],[[1,14],1],[[1,4],1],[[1,5],1],[[1,12],1],[[1,5],1],[[1,13],1],[[1,9],1],[[1,1],1],[[1,10],1],[[1,13],1],[[1,8],1],[[1,9],1],[[1,14],1],[[1,10],1],[[1,3],1],[[1,1],1],[[1,1],1],[[1,13],1],[[2,2]],[2],[[2,2]],[[2,2]],[2],[2],[2],[[2,2]],[[15,15],15],[[15,13],15],[[15,9],15],[[15,4],15],[[15,5],15],[[15,9],15],[[15,13],15],[[15,15],15],[[15,6],15],[[15,5],15],[[15,9],15],[[15,6],15],[[15,4],15],[[15,14],15],[[15,4],15],[[15,5],15],[[15,13],15],[[15,6],15],[[15,6],15],[[15,4],15],[[15,15],15],[[15,14],15],[[15,14],15],[[15,9],15],[[15,14],15],[[15,15],15],[[15,5],15],[[15,13],15],[[]],[[2,2,2],2],[[2,2,2],2],[[2,2,2]],[[2,2,2]],[[1,8]],[[1,6]],[[1,10]],[[1,14]],[[1,3]],[[1,13]],[[1,1]],[[1,5]],[[1,11]],[[1,1]],[[1,7]],[[1,9]],[[1,4]],[[1,12]],[2],[2],[[2,2]],[[2,2]],[[15,13]],[[15,15]],[[15,5]],[[15,4]],[[15,9]],[[15,15]],[[15,6]],[[15,14]],[[]],[1,1],[1,1],[2],[2],[[]],[[]],[[16,[32,[5,31]]],1],[[],2],[[[32,[5,31]]],15],[[]],[[1,1],1],[[15,15],15],[2],[2],[1,1],[1,1],[[1,5],1],[[1,5],1],[[15,5],15],[[15,5],15],[[]],[[]],[[],1],[[],2],[[],15],[5,[[18,[1]]]],[5,[[18,[15]]]],[[1,1],[[18,[20]]]],[[15,15],[[18,[20]]]],0,0,[6],[6],[5],[[1,9],1],[[1,9],1],[[1,4],1],[[1,5],1],[[1,5],1],[[1,9],1],[[1,14],1],[[1,15],1],[[1,14],1],[[1,5],1],[[1,13],1],[[1,5],1],[[1,9],1],[[1,5],1],[[1,6],1],[[1,6],1],[[1,15],1],[[1,15],1],[[1,4],1],[[1,13],1],[[1,15],1],[[1,6],1],[[1,14],1],[[1,13],1],[[1,6],1],[[1,14],1],[[1,4],1],[[1,4],1],[[1,13],1],[[2,25]],[[2,13]],[[2,3]],[[2,2]],[[2,11]],[[2,5]],[[2,10]],[[2,6]],[[2,9]],[[2,4]],[[2,2]],[[2,25]],[[2,10]],[[2,7]],[[2,4]],[[2,26]],[[2,25]],[[2,12]],[[2,26]],[[2,14]],[[2,25]],[[2,2]],[[2,6]],[[2,7]],[[2,8]],[[2,14]],[[2,9]],[[2,3]],[[2,13]],[[2,26]],[[2,5]],[[2,8]],[[2,2]],[[2,11]],[[2,26]],[[2,12]],[[15,14],15],[[15,6],15],[[15,6],15],[[15,14],15],[[15,9],15],[[15,13],15],[[15,6],15],[[15,9],15],[[15,4],15],[[15,5],15],[[15,5],15],[[15,5],15],[[15,15],15],[[15,4],15],[[15,5],15],[[15,9],15],[[15,14],15],[[15,15],15],[[15,4],15],[[15,13],15],[[15,15],15],[[15,15],15],[[15,5],15],[[15,6],15],[[15,13],15],[[15,4],15],[[15,13],15],[[15,9],15],[[15,14],15],[[2,2],2],[[2,2],2],[[]],[2,2],[2,2],[11],[[2,11],2],[[2,11],2],[[2,5],2],[[]],[[1,1],1],[[15,15],15],[[],1],[[],2],[[],2],[[],15],[[],33],[[],34],[[],35],[[],36],0,[2],0,[[]],[2,2],[[1,14],1],[[1,5],1],[[1,13],1],[[1,8],1],[[1,6],1],[[1,13],1],[[1,13],1],[[1,4],1],[[1,9],1],[[1,11],1],[[1,10],1],[[1,13],1],[[1,3],1],[[1,12],1],[[1,14],1],[[1,5],1],[[1,10],1],[[1,7],1],[[1,5],1],[[1,8],1],[[1,11],1],[[1,1],1],[[1,7],1],[[1,9],1],[[1,5],1],[[1,7],1],[[1,9],1],[[1,8],1],[[1,4],1],[[1,3],1],[[1,14],1],[[1,4],1],[[1,7],1],[[1,6],1],[[1,14],1],[[1,1],1],[[1,12],1],[[1,9],1],[[1,10],1],[[1,11],1],[[1,8],1],[[1,1],1],[[1,12],1],[[1,6],1],[[1,12],1],[[1,1],1],[[1,3],1],[[1,3],1],[[1,4],1],[[1,6],1],[[1,10],1],[[1,11],1],[[2,2]],[2],[[2,2]],[[2,2]],[2],[2],[2],[[2,2]],[[15,6],15],[[15,13],15],[[15,15],15],[[15,14],15],[[15,13],15],[[15,4],15],[[15,5],15],[[15,5],15],[[15,15],15],[[15,15],15],[[15,14],15],[[15,6],15],[[15,6],15],[[15,14],15],[[15,4],15],[[15,13],15],[[15,5],15],[[15,6],15],[[15,9],15],[[15,4],15],[[15,9],15],[[15,5],15],[[15,15],15],[[15,9],15],[[15,14],15],[[15,9],15],[[15,13],15],[[15,4],15],[[1,14]],[[1,9]],[[1,4]],[[1,10]],[[1,12]],[[1,1]],[[1,11]],[[1,8]],[[1,1]],[[1,6]],[[1,5]],[[1,13]],[[1,3]],[[1,7]],[2],[[2,2]],[2],[[2,2]],[[15,13]],[[15,15]],[[15,9]],[[15,5]],[[15,4]],[[15,6]],[[15,15]],[[15,14]],[[]],[5],[5],[[]],[[]],[[]],[2,2],[[1,14,17]],[[15,14,17]],[[]],[1],[2],[15],[[]],[1],[2],[15],[[1,12],1],[[1,7],1],[[1,10],1],[[1,8],1],[[1,9],1],[[1,13],1],[[1,6],1],[[1,12],1],[[1,14],1],[[1,3],1],[[1,11],1],[[1,12],1],[[1,5],1],[[1,14],1],[[1,8],1],[[1,7],1],[[1,3],1],[[1,14],1],[[1,10],1],[[1,4],1],[[1,3],1],[[1,11],1],[[1,5],1],[[1,5],1],[[1,9],1],[[1,11],1],[[1,7],1],[[1,12],1],[[1,9],1],[[1,3],1],[[1,8],1],[[1,8],1],[[1,10],1],[[1,13],1],[[1,4],1],[[1,14],1],[[1,4],1],[[1,5],1],[[1,9],1],[[1,6],1],[[1,13],1],[[1,11],1],[[1,6],1],[[1,6],1],[[1,13],1],[[1,10],1],[[1,4],1],[[1,7],1],[[15,5],15],[[15,3],15],[[15,7],15],[[15,12],15],[[15,3],15],[[15,4],15],[[15,10],15],[[15,8],15],[[15,4],15],[[15,3],15],[[15,10],15],[[15,3],15],[[15,5],15],[[15,12],15],[[15,7],15],[[15,14],15],[[15,4],15],[[15,7],15],[[15,10],15],[[15,6],15],[[15,5],15],[[15,5],15],[[15,13],15],[[15,11],15],[[15,14],15],[[15,4],15],[[15,12],15],[[15,9],15],[[15,14],15],[[15,11],15],[[15,10],15],[[15,13],15],[[15,8],15],[[15,9],15],[[15,6],15],[[15,8],15],[[15,6],15],[[15,6],15],[[15,11],15],[[15,7],15],[[15,12],15],[[15,14],15],[[15,9],15],[[15,13],15],[[15,8],15],[[15,9],15],[[15,11],15],[[15,13],15],[[1,9]],[[1,4]],[[1,12]],[[1,4]],[[1,5]],[[1,10]],[[1,5]],[[1,12]],[[1,8]],[[1,11]],[[1,13]],[[1,3]],[[1,14]],[[1,9]],[[1,7]],[[1,13]],[[1,11]],[[1,14]],[[1,8]],[[1,6]],[[1,7]],[[1,6]],[[1,10]],[[1,3]],[[15,10]],[[15,7]],[[15,14]],[[15,5]],[[15,8]],[[15,9]],[[15,6]],[[15,9]],[[15,14]],[[15,7]],[[15,4]],[[15,13]],[[15,4]],[[15,8]],[[15,13]],[[15,6]],[[15,3]],[[15,5]],[[15,11]],[[15,11]],[[15,3]],[[15,12]],[[15,12]],[[15,10]],[[1,10],1],[[1,8],1],[[1,11],1],[[1,4],1],[[1,11],1],[[1,5],1],[[1,10],1],[[1,13],1],[[1,7],1],[[1,13],1],[[1,12],1],[[1,14],1],[[1,12],1],[[1,14],1],[[1,3],1],[[1,9],1],[[1,11],1],[[1,12],1],[[1,8],1],[[1,9],1],[[1,5],1],[[1,7],1],[[1,6],1],[[1,4],1],[[1,5],1],[[1,13],1],[[1,12],1],[[1,7],1],[[1,14],1],[[1,3],1],[[1,8],1],[[1,9],1],[[1,13],1],[[1,8],1],[[1,10],1],[[1,14],1],[[1,3],1],[[1,7],1],[[1,6],1],[[1,4],1],[[1,10],1],[[1,3],1],[[1,11],1],[[1,6],1],[[1,6],1],[[1,4],1],[[1,9],1],[[1,5],1],[[15,11],15],[[15,6],15],[[15,14],15],[[15,14],15],[[15,9],15],[[15,7],15],[[15,6],15],[[15,6],15],[[15,10],15],[[15,13],15],[[15,5],15],[[15,14],15],[[15,9],15],[[15,5],15],[[15,3],15],[[15,7],15],[[15,10],15],[[15,5],15],[[15,12],15],[[15,10],15],[[15,11],15],[[15,8],15],[[15,4],15],[[15,3],15],[[15,7],15],[[15,12],15],[[15,8],15],[[15,13],15],[[15,6],15],[[15,3],15],[[15,4],15],[[15,9],15],[[15,10],15],[[15,13],15],[[15,12],15],[[15,8],15],[[15,5],15],[[15,7],15],[[15,9],15],[[15,12],15],[[15,11],15],[[15,3],15],[[15,4],15],[[15,8],15],[[15,4],15],[[15,11],15],[[15,14],15],[[15,13],15],[[1,3]],[[1,10]],[[1,11]],[[1,6]],[[1,5]],[[1,13]],[[1,4]],[[1,13]],[[1,10]],[[1,5]],[[1,14]],[[1,9]],[[1,9]],[[1,7]],[[1,7]],[[1,14]],[[1,8]],[[1,3]],[[1,12]],[[1,12]],[[1,8]],[[1,4]],[[1,11]],[[1,6]],[[15,8]],[[15,6]],[[15,5]],[[15,13]],[[15,7]],[[15,11]],[[15,10]],[[15,13]],[[15,7]],[[15,12]],[[15,4]],[[15,14]],[[15,6]],[[15,9]],[[15,11]],[[15,5]],[[15,14]],[[15,12]],[[15,9]],[[15,4]],[[15,3]],[[15,8]],[[15,10]],[[15,3]],[1,16],[5],[5],[[]],[[]],[[]],[1,1],[[]],[2,2],[2,2],[[]],[[]],[2,2],[2,2],[[]],[1,1],[1,1],[2,2],[2,2],[15,15],[15,15],[[1,6],1],[[1,11],1],[[1,7],1],[[1,6],1],[[1,12],1],[[1,13],1],[[1,3],1],[[1,11],1],[[1,11],1],[[1,1],1],[[1,4],1],[[1,6],1],[[1,1],1],[[1,13],1],[[1,14],1],[[1,14],1],[[1,8],1],[[1,7],1],[[1,10],1],[[1,10],1],[[1,7],1],[[1,13],1],[[1,5],1],[[1,12],1],[[1,8],1],[[1,5],1],[[1,4],1],[[1,13],1],[[1,3],1],[[1,9],1],[[1,10],1],[[1,3],1],[[1,1],1],[[1,12],1],[[1,8],1],[[1,1],1],[[1,9],1],[[1,5],1],[[1,5],1],[[1,14],1],[[1,3],1],[[1,7],1],[[1,10],1],[[1,6],1],[[1,14],1],[[1,9],1],[[1,9],1],[[1,4],1],[[1,4],1],[[1,11],1],[[1,8],1],[[1,12],1],[[2,2]],[[2,2]],[2],[2],[[2,2]],[2],[2],[[2,2]],[[15,4],15],[[15,5],15],[[15,15],15],[[15,14],15],[[15,9],15],[[15,4],15],[[15,14],15],[[15,5],15],[[15,9],15],[[15,5],15],[[15,13],15],[[15,9],15],[[15,13],15],[[15,13],15],[[15,9],15],[[15,14],15],[[15,6],15],[[15,4],15],[[15,5],15],[[15,15],15],[[15,6],15],[[15,4],15],[[15,6],15],[[15,15],15],[[15,13],15],[[15,15],15],[[15,6],15],[[15,14],15],[[1,11]],[[1,10]],[[1,12]],[[1,8]],[[1,5]],[[1,7]],[[1,9]],[[1,1]],[[1,13]],[[1,3]],[[1,1]],[[1,6]],[[1,14]],[[1,4]],[[2,2]],[[2,2]],[2],[2],[[15,13]],[[15,4]],[[15,14]],[[15,15]],[[15,9]],[[15,5]],[[15,15]],[[15,6]],[[],1],[[],2],[[],2],[[],15],[[]],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[]],[1,[[18,[1]]]],[15,[[18,[1]]]],[1,[[18,[15]]]],[1,[[18,[15]]]],[15,[[18,[15]]]],[1],[15,[[32,[9,31]]]],[1],[15,[[32,[9,31]]]],[[]],[[],[[18,[25]]]],[1,[[18,[25]]]],[2,[[18,[25]]]],[15,[[18,[25]]]],[[],[[18,[26]]]],[1,[[18,[26]]]],[2,[[18,[26]]]],[15,[[18,[26]]]],[[],[[18,[8]]]],[1,[[18,[8]]]],[2,[[18,[8]]]],[15,[[18,[8]]]],[[],[[18,[12]]]],[2,[[18,[12]]]],[[],[[18,[11]]]],[2,[[18,[11]]]],[[],[[18,[10]]]],[1,[[18,[10]]]],[2,[[18,[10]]]],[15,[[18,[10]]]],[[],[[18,[3]]]],[2,[[18,[3]]]],[[],[[18,[7]]]],[2,[[18,[7]]]],[[]],[[]],[[]],[[]],[2],[[]],[[1,5]],[[15,5],[[32,[9,31]]]],[[1,5]],[[15,5],[[32,[9,31]]]],[1,[[32,[9,31]]]],[1,[[32,[9,31]]]],[[1,5],37],[[15,5],37],[[],37],[[],37],[[],37],[[],[[18,[4]]]],[1,[[18,[4]]]],[2,[[18,[4]]]],[15,[[18,[4]]]],[[],[[18,[13]]]],[2,[[18,[13]]]],[[],[[18,[5]]]],[2,[[18,[5]]]],[1],[15,[[32,[5,31]]]],[[],[[18,[14]]]],[1,[[18,[14]]]],[2,[[18,[14]]]],[15,[[18,[14]]]],[1],[15,[[32,[14,31]]]],[[],[[18,[9]]]],[2,[[18,[9]]]],[[],[[18,[6]]]],[2,[[18,[6]]]],[[],5],[15,14],[[],5],[1,[[18,[14]]]],[15,[[18,[14]]]],0,[[]],[[],24],[[],24],[12,[[24,[15,38]]]],[[],24],[7,[[24,[15,38]]]],[11,[[24,[15,38]]]],[10,[[24,[15,38]]]],[1,[[24,[15,[38,[1]]]]]],[3,[[24,[15,38]]]],[8,[[24,[15,38]]]],[1,[[24,[15,38]]]],[[],24],[[],24],[[],24],[[],39],[[],39],[[],39],[2,2],[5],[5],[[]],[[]],[[],1],[[],2],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[28,28],[38,38],[[]],[[]],[[]],[[16,16],20],[29,6],[30,6],[28,27],[38,27],[[16,16],17],[[28,28],17],[[38,38],17],[[16,22],[[24,[23]]]],[[28,22],[[24,[23]]]],[[28,22],[[24,[23]]]],[[38,22],[[24,[23]]]],[[38,22],[[24,[23]]]],[[]],[[]],[[]],[[]],[[]],[16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38],[29,[[18,[5]]]],[30,[[18,[14]]]],[29,6],[30,6],[[16,16],16],[16,16],[29,[[18,[5]]]],[30,[[18,[14]]]],[29,18],[30,18],[[30,6],[[18,[14]]]],[[16,16],[[18,[20]]]],[40],[40],[29],[30],[[],[[18,[1]]]],[[],[[18,[15]]]],[[]],[[]],[[]],[[],37],[[],37],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],39],[[],39],[[],39],[[],39],[[],39],0,0,0,0,0,0,0,0,[[]],[[]],[[],18],[[],18],[[],18],[[],18],[25,18],[25,18],[26,18],[26,18],[8,18],[8,18],[12,18],[12,18],[11,18],[11,18],[10,18],[10,18],[3,18],[3,18],[7,18],[7,18],[4,18],[4,18],[13,18],[13,18],[5,18],[5,18],[14,18],[14,18],[9,18],[9,18],[6,18],[6,18],[[],[[18,[25]]]],[[],[[18,[25]]]],[[],[[18,[26]]]],[[],[[18,[26]]]],[[],[[18,[8]]]],[[],[[18,[8]]]],[[],[[18,[12]]]],[[],[[18,[12]]]],[[],[[18,[11]]]],[[],[[18,[11]]]],[[],[[18,[10]]]],[[],[[18,[10]]]],[[],[[18,[3]]]],[[],[[18,[3]]]],[[],[[18,[7]]]],[[],[[18,[7]]]],[[],[[18,[4]]]],[[],[[18,[4]]]],[[],[[18,[13]]]],[[],[[18,[13]]]],[[],[[18,[5]]]],[[],[[18,[5]]]],[[],[[18,[14]]]],[[],[[18,[14]]]],[[],[[18,[9]]]],[[],[[18,[9]]]],[[],[[18,[6]]]],[[],[[18,[6]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,27],[[41,41],17],[[]],[[]],[[]],[[41,22],[[24,[23]]]],[[41,22],[[24,[23]]]],[[]],[[]],0,[[]],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[2,2],[[]],[11],[40],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],24],[[],24],[[],39],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[21,21],17],[[],21],[[]],[[21,22],[[24,[23]]]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[],42],[42,18],[[]],[5],[5],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],39],[[],39],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[34,34],[35,35],[36,36],[43,43],[44,44],[[]],[[]],[[]],[[]],[[]],[[]],[33,45],[34,45],[43,45],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,18],[34,18],[35,18],[36,18],[43,18],[44,18],[33,18],[34,18],[[],33],[[],43],[[],34],[[],35],[[],44],[[],36],[33],[34],[43],[44],[33,45],[34,45],[43,45],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],0,0,0,0,[6,18],[6,18],[6],[6],[[]],[[]],0,0,0,0,0,0,[46,46],[[46,46],46],[[46,46],46],[[46,46],46],[46,46],[46,46],[[46,46],46],[46,46],[46,46],[[46,46],46],[46],[[46,46]],[[46,46]],[46],[[],[[18,[46]]]],[[]],[[]],[[]],[[]],[46,46],[[46,46],[[18,[46]]]],[[46,46],[[18,[46]]]],[[46,46],[[18,[46]]]],[[46,46],[[18,[46]]]],[46,46],[47,47],[[]],[[]],[[46,46],20],[[],46],[46],[47,27],[46,46],[[46,46],46],[[46,46],46],[46,46],[[46,46],46],[46,46],[46,46],[[46,46],46],[[46,46]],[46],[46],[[46,46]],[[46,46],17],[[47,47],17],[46,46],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[47,22],[[24,[23]]]],[[47,22],[[24,[23]]]],[46,46],[[]],[[],46],[[],46],[[]],[25,[[18,[[46,[9]]]]]],[25,[[18,[[46,[13]]]]]],[25,[[18,[[46,[6]]]]]],[25,[[18,[[46,[11]]]]]],[25,[[18,[[46,[3]]]]]],[25,[[18,[[46,[12]]]]]],[25,[[18,[[46,[10]]]]]],[25,[[18,[[46,[8]]]]]],[25,[[18,[[46,[14]]]]]],[25,[[18,[[46,[4]]]]]],[25,[[18,[[46,[7]]]]]],[25,[[18,[[46,[5]]]]]],[25,[[18,[[46,[1]]]]]],[26,[[18,[[46,[8]]]]]],[26,[[18,[[46,[6]]]]]],[26,[[18,[[46,[14]]]]]],[26,[[18,[[46,[3]]]]]],[26,[[18,[[46,[1]]]]]],[26,[[18,[[46,[7]]]]]],[26,[[18,[[46,[4]]]]]],[26,[[18,[[46,[12]]]]]],[26,[[18,[[46,[9]]]]]],[26,[[18,[[46,[5]]]]]],[26,[[18,[[46,[11]]]]]],[26,[[18,[[46,[10]]]]]],[26,[[18,[[46,[13]]]]]],[[],[[18,[[46,[1]]]]]],[8,[[18,[[46,[11]]]]]],[8,[[18,[[46,[1]]]]]],[8,[[18,[[46,[6]]]]]],[8,[[18,[[46,[14]]]]]],[8,[[18,[[46,[4]]]]]],[8,[[18,[[46,[9]]]]]],[8,[[18,[[46,[8]]]]]],[8,[[18,[[46,[7]]]]]],[8,[[18,[[46,[3]]]]]],[8,[[18,[[46,[12]]]]]],[8,[[18,[[46,[5]]]]]],[8,[[18,[[46,[13]]]]]],[8,[[18,[[46,[10]]]]]],[10,[[18,[[46,[4]]]]]],[10,[[18,[[46,[1]]]]]],[10,[[18,[[46,[11]]]]]],[10,[[18,[[46,[10]]]]]],[10,[[18,[[46,[12]]]]]],[10,[[18,[[46,[13]]]]]],[10,[[18,[[46,[5]]]]]],[10,[[18,[[46,[9]]]]]],[10,[[18,[[46,[3]]]]]],[10,[[18,[[46,[7]]]]]],[10,[[18,[[46,[8]]]]]],[10,[[18,[[46,[14]]]]]],[10,[[18,[[46,[6]]]]]],[[],46],[27,[[24,[46,47]]]],[[27,5],[[24,[46,47]]]],[4,[[18,[[46,[1]]]]]],[4,[[18,[[46,[13]]]]]],[4,[[18,[[46,[6]]]]]],[4,[[18,[[46,[4]]]]]],[4,[[18,[[46,[7]]]]]],[4,[[18,[[46,[11]]]]]],[4,[[18,[[46,[14]]]]]],[4,[[18,[[46,[3]]]]]],[4,[[18,[[46,[5]]]]]],[4,[[18,[[46,[12]]]]]],[4,[[18,[[46,[8]]]]]],[4,[[18,[[46,[10]]]]]],[4,[[18,[[46,[9]]]]]],[14,[[18,[[46,[14]]]]]],[14,[[18,[[46,[13]]]]]],[14,[[18,[[46,[9]]]]]],[14,[[18,[[46,[6]]]]]],[14,[[18,[[46,[4]]]]]],[14,[[18,[[46,[7]]]]]],[14,[[18,[[46,[5]]]]]],[14,[[18,[[46,[12]]]]]],[14,[[18,[[46,[1]]]]]],[14,[[18,[[46,[11]]]]]],[14,[[18,[[46,[8]]]]]],[14,[[18,[[46,[10]]]]]],[14,[[18,[[46,[3]]]]]],[46],[46],[[]],[[]],[46,46],[46,46],[46,17],[46,17],[46,17],[46,17],[46,17],[46,46],[[46,46],46],[46,46],[[46,46],46],[46,46],[[46,46],46],[46,46],[[46,46],46],[[46,46]],[46],[46],[[46,46]],[46,46],[46,46],[[],46],[[],46],[46],[[],46],[[46,46],[[18,[20]]]],[[46,8],46],[[46,14],46],[[46,4],46],[[46,3],46],[[46,11],46],[[46,9],46],[[46,9],46],[[46,9],46],[[46,12],46],[[46,12],46],[[46,4],46],[[46,13],46],[[46,11],46],[[46,7],46],[[46,5],46],[[46,14],46],[[46,3],46],[[46,11],46],[[46,8],46],[[46,4],46],[[46,1],46],[[46,11],46],[[46,14],46],[[46,15],46],[[46,1],46],[[46,13],46],[[46,3],46],[[46,15],46],[[46,10],46],[[46,14],46],[[46,6],46],[[46,12],46],[[46,7],46],[[46,8],46],[[46,10],46],[[46,6],46],[[46,12],46],[[46,6],46],[[46,13],46],[[46,15],46],[[46,15],46],[[46,9],46],[[46,7],46],[[46,1],46],[[46,5],46],[[46,6],46],[[46,5],46],[[46,11],46],[[46,8],46],[[46,13],46],[[46,3],46],[[46,10],46],[[46,7],46],[[46,1],46],[[46,10],46],[[46,5],46],[[46,4],46],[[],46],[[],46],[40],[46,46],[46,46],[[46,46],46],[46,46],[[46,46],46],[[46,46],46],[46,46],[46,46],[46,46],[[46,46],46],[[46,46]],[[46,46]],[46],[46],[46,46],[46],[46],[46,46],[46,46],[[46,46],46],[46,46],[[46,46],46],[[46,46],46],[46,46],[46,46],[[46,46],46],[[46,46]],[[46,46]],[46],[46],[[],46],[[],46],[46,[[18,[26]]]],[46,[[18,[8]]]],[46,[[18,[10]]]],[46],[[]],[[]],[[],37],[[],37],[46,[[18,[4]]]],[46,[[18,[14]]]],[46,46],[[],24],[[],24],[[],24],[[],24],[[],39],[[],39],[[],46],0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,[[]],0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],18],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[6,18],[[],18],[[],18],[5,18],[5,18],[[],18],[[]],[[]],[[]],[[],19],[[]],[[]],[[]],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],0,[[]],[[48,22],[[24,[23]]]],[[49,22],[[24,[23]]]],[[49,22],[[24,[23]]]],[[]],[[],18],[[]],[[]],[[]],[25,18],[26,18],[8,18],[12,18],[11,18],[10,18],[3,18],[7,18],[[]],[[27,5],24],[4,18],[13,18],[5,18],[14,18],[9,18],[6,18],[[]],0,[[]],0,[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[6],[5],[[]],[[]],[11],0,[[]],[[]],[[]],[5],[5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[5],[5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[18,[25]]]],[[],[[18,[26]]]],[[],[[18,[8]]]],[[],[[18,[12]]]],[[],[[18,[11]]]],[[],[[18,[10]]]],[[],[[18,[3]]]],[[],[[18,[7]]]],[[]],[[]],[[],37],[[],[[18,[4]]]],[[],[[18,[13]]]],[[],[[18,[5]]]],[[],[[18,[14]]]],[[],[[18,[9]]]],[[],[[18,[6]]]],[[],5],[[],5],[[]],[[],24],[[],24],[[],24],[[],24],[[],39],[[],39],[5],[5],[[]],[[]],[[]],[5],[5],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[],18],[[],18],[25,18],[26,18],[8,18],[12,18],[11,18],[10,18],[3,18],[7,18],[4,18],[13,18],[5,18],[14,18],[9,18],[6,18],[[],[[18,[25]]]],[[],[[18,[26]]]],[[],[[18,[8]]]],[[],[[18,[12]]]],[[],[[18,[11]]]],[[],[[18,[10]]]],[[],[[18,[3]]]],[[],[[18,[7]]]],[[],[[18,[4]]]],[[],[[18,[13]]]],[[],[[18,[5]]]],[[],[[18,[14]]]],[[],[[18,[9]]]],[[],[[18,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],5],[[],5],[[]],[[]],[[],5],[[],5],[5],[[]],[5],[5],[5],[5],[[]],[[]],[[]],[[],5],[[],5],[5],[5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],18],[[],18],[[],18],[[],18],[[],18],[5,18],[5,18],[[],18],0,0,[[],18],[[],18],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[5],[5],[[]],0,0,[6,18],[6],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],17],[[],17],[[]],[[]]],"p":[[3,"BigInt"],[3,"Complex"],[15,"i8"],[15,"u128"],[15,"u32"],[15,"usize"],[15,"isize"],[15,"i128"],[15,"u8"],[15,"i64"],[15,"i32"],[15,"i16"],[15,"u16"],[15,"u64"],[3,"BigUint"],[4,"Sign"],[15,"bool"],[4,"Option"],[4,"FpCategory"],[4,"Ordering"],[3,"ExtendedGcd"],[3,"Formatter"],[3,"Error"],[4,"Result"],[15,"f32"],[15,"f64"],[15,"str"],[3,"ParseBigIntError"],[3,"U32Digits"],[3,"U64Digits"],[3,"Global"],[3,"Vec"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"String"],[3,"TryFromBigIntError"],[3,"TypeId"],[3,"Demand"],[3,"ParseComplexError"],[3,"IterBinomial"],[3,"RangeFrom"],[3,"RangeStepFrom"],[4,"Bound"],[3,"Ratio"],[3,"ParseRatioError"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Num"],[8,"Float"],[8,"Signed"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedSub"],[8,"PrimInt"],[8,"Integer"],[8,"NumCast"],[8,"FromPrimitive"],[8,"One"],[8,"Zero"],[8,"Bounded"],[8,"Saturating"],[8,"ToPrimitive"],[8,"ToBigInt"],[8,"ToBigUint"],[8,"AsPrimitive"],[8,"ComplexFloat"],[8,"Average"],[8,"Roots"],[8,"Pow"],[8,"FloatConst"],[8,"Inv"],[8,"MulAdd"],[8,"CheckedEuclid"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Euclid"],[8,"MulAddAssign"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"FloatCore"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Real"]]},\
"num_bigint":{"doc":"A Big integer (signed version: <code>BigInt</code>, unsigned version: …","tn":["BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","abs","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","count","count_ones","default","default","description","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","divides","eq","eq","eq","eq","eq","extended_gcd_lcm","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_i128","from_i128","from_i64","from_i64","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","gcd","gcd","gcd_lcm","gcd_lcm","hash","hash","hash","into","into","into","into","into","into","into","into_iter","into_iter","into_original","into_parts","is_even","is_even","is_multiple_of","is_multiple_of","is_negative","is_odd","is_odd","is_one","is_one","is_positive","is_zero","is_zero","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","last","last","lcm","lcm","len","len","magnitude","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","next","next","next_back","next_back","next_multiple_of","next_multiple_of","not","not","nth","nth_root","nth_root","nth_root","nth_root","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prev_multiple_of","prev_multiple_of","product","product","provide","provide","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","set_bit","set_bit","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signum","size_hint","size_hint","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_bigint","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i64","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_string","to_u128","to_u128","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64_digits","to_u64_digits","trailing_ones","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero"],"q":["num_bigint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A big signed integer type.","A big unsigned integer type.","","","","","A Sign is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion …","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal cube root of <code>self</code> – see …","","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of one bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","Greatest common divisor, least common multiple, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Extract the original value, if available. The value will …","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","","","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Negate Sign value.","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets or clears the bit in the given position, using the two…","Sets or clears the bit in the given positioneturns the sign of the <code>BigInt</code> as a <code>Sign</code>.","","","","","Returns the truncated principal square root of <code>self</code> – …","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","","","Converts the value of <code>self</code> to a <code>BigUint</code>.","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Returns the number of least-significant bits that are ones.","Returns the number of least-significant bits that are zero,","Returns the number of least-significant bits that are zero,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,15,15,0,15,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,1,1,1,1,14,14,14,14,1,1,14,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,1,22,23,14,15,18,20,1,22,23,14,15,18,20,1,1,14,14,1,1,14,1,1,14,1,1,14,1,1,14,1,14,15,18,20,1,14,1,14,15,18,20,1,14,15,22,23,14,1,14,18,20,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,14,1,14,15,18,20,1,1,1,1,1,1,1,14,14,14,14,14,14,15,18,18,20,20,1,1,1,1,1,1,1,1,1,1,1,1,1,1,22,23,14,14,14,14,14,14,14,15,18,20,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,15,1,22,23,14,15,18,20,22,23,20,1,1,14,1,14,1,1,14,1,14,1,1,14,1,14,1,14,22,23,1,14,22,23,1,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,1,15,1,14,22,23,22,23,1,14,1,1,23,1,1,14,14,1,14,1,14,1,14,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,14,1,14,18,20,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,22,23,1,1,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,36,1,14,37,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,15,18,20,1,14,1,14,1,1,1,14,1,14,18,20,1,14,1,14,1,14,1,14,14,1,14,1,22,23,14,14,14,14,14,14,14,14,14,15,18,20,1,22,23,14,15,18,20,1,22,23,14,15,18,20,1,14],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[1,1],1],[[1,2],1],[[1,3],1],[[1,4],1],[[1,5],1],[[1,5],1],[[1,5],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,7],1],[[1,2],1],[[1,8],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,2],1],[[1,2],1],[[1,8],1],[[1,8],1],[[1,8],1],[[1,3],1],[[1,3],1],[[1,6],1],[[1,3],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,13],1],[[1,13],1],[[1,13],1],[[1,1],1],[[1,5],1],[[1,1],1],[[1,13],1],[[1,1],1],[[1,1],1],[[14,12],14],[[14,12],14],[[14,7],14],[[14,2],14],[[14,8],14],[[14,7],14],[[14,7],14],[[14,7],14],[[14,2],14],[[14,2],14],[[14,14],14],[[14,14],14],[[14,14],14],[[14,2],14],[[14,8],14],[[14,8],14],[[14,14],14],[[14,8],14],[[14,13],14],[[14,13],14],[[14,11],14],[[14,11],14],[[14,13],14],[[14,13],14],[[14,11],14],[[14,11],14],[[14,12],14],[[14,12],14],[[1,7]],[[1,2]],[[1,6]],[[1,5]],[[1,1]],[[1,1]],[[1,3]],[[1,9]],[[1,10]],[[1,11]],[[1,12]],[[1,13]],[[1,4]],[[1,8]],[[14,12]],[[14,2]],[[14,14]],[[14,8]],[[14,7]],[[14,14]],[[14,11]],[[14,13]],[[1,15]],[14],[[]],[[]],[[]],[[]],[[1,2],16],[[14,2],16],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[1,2],[14,2],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[1,1],[14,14],[14,14],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[14,14],[[17,[14]]]],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[14,14],[[17,[14]]]],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[14,14],[[17,[14]]]],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[14,14],[[17,[14]]]],[1,1],[14,14],[15,15],[18,18],[[[20,[19]]],[[20,[19]]]],[[1,1]],[[14,14]],[[]],[[]],[[]],[[]],[[]],[[1,1],21],[[14,14],21],[[15,15],21],[22,11],[23,11],[14,2],[[],1],[[],14],[18,24],[20,24],[[1,12],1],[[1,1],1],[[1,4],1],[[1,12],1],[[1,6],1],[[1,12],1],[[1,5],1],[[1,4],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,1],1],[[1,5],1],[[1,1],1],[[1,1],1],[[1,13],1],[[1,13],1],[[1,8],1],[[1,8],1],[[1,8],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,4],1],[[1,5],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,8],1],[[1,13],1],[[1,5],1],[[1,6],1],[[1,2],1],[[1,13],1],[[1,7],1],[[1,12],1],[[1,6],1],[[1,6],1],[[1,4],1],[[14,14],14],[[14,7],14],[[14,14],14],[[14,14],14],[[14,14],14],[[14,13],14],[[14,13],14],[[14,13],14],[[14,13],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,11],14],[[14,11],14],[[14,11],14],[[14,11],14],[[14,8],14],[[14,8],14],[[14,8],14],[[14,2],14],[[14,2],14],[[14,2],14],[[14,7],14],[[14,7],14],[[14,7],14],[[14,8],14],[[14,2],14],[[1,11]],[[1,10]],[[1,5]],[[1,7]],[[1,6]],[[1,1]],[[1,1]],[[1,13]],[[1,4]],[[1,2]],[[1,8]],[[1,3]],[[1,9]],[[1,12]],[[14,11]],[[14,14]],[[14,8]],[[14,12]],[[14,13]],[[14,14]],[[14,2]],[[14,7]],[[1,1],1],[[14,14],14],[[1,1],1],[[14,14],14],[[1,1]],[[14,14]],[[1,1]],[[14,14]],[[1,1],16],[[14,14],16],[[1,1],16],[[14,14],16],[[15,15],16],[[18,18],16],[[[20,[25]],20],16],[[1,1]],[[1,26],27],[[1,26],27],[[1,26],27],[[1,26],27],[[1,26],27],[[1,26],27],[[14,26],27],[[14,26],27],[[14,26],27],[[14,26],27],[[14,26],27],[[14,26],27],[[15,26],27],[[18,26],27],[[18,26],27],[[[20,[28]],26],27],[[20,26],27],[14,1],[6,1],[8,1],[12,1],[13,1],[7,1],[2,1],[3,1],[11,1],[4,1],[[]],[9,1],[5,1],[10,1],[[]],[[]],[[]],[11,14],[7,14],[13,14],[12,14],[8,14],[2,14],[[]],[[]],[[]],[[15,14],1],[15,1],[[],14],[15,1],[[],14],[29,[[17,[1]]]],[29,[[17,[14]]]],[5,[[17,[1]]]],[5,[[17,[14]]]],[6,[[17,[1]]]],[6,[[17,[14]]]],[[15,8],[[17,[1]]]],[8,[[17,[14]]]],[[15,8],[[17,[1]]]],[8,[[17,[14]]]],[[],1],[[],1],[15,1],[[],14],[24,[[30,[1,18]]]],[24,[[30,[14,18]]]],[[24,8],[[30,[1,18]]]],[[24,8],[[30,[14,18]]]],[7,[[17,[1]]]],[7,[[17,[14]]]],[2,[[17,[1]]]],[2,[[17,[14]]]],[[1,1],1],[[14,14],14],[[1,1]],[[14,14]],[1],[14],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20],[1],[1,16],[14,16],[[1,1],16],[[14,14],16],[1,16],[1,16],[14,16],[1,16],[14,16],[1,16],[1,16],[14,16],[1,22],[14,22],[1,23],[14,23],[22,[[17,[8]]]],[23,[[17,[2]]]],[[1,1],1],[[14,14],14],[22,11],[23,11],[1,14],[[1,1],1],[[14,14],14],[[1,1,1],1],[[14,14,14],14],[[1,10],1],[[1,13],1],[[1,7],1],[[1,3],1],[[1,7],1],[[1,3],1],[[1,3],1],[[1,8],1],[[1,3],1],[[1,7],1],[[1,9],1],[[1,9],1],[[1,2],1],[[1,8],1],[[1,9],1],[[1,7],1],[[1,9],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,5],1],[[1,5],1],[[1,8],1],[[1,8],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,1],1],[[1,10],1],[[1,10],1],[[1,1],1],[[1,10],1],[[1,11],1],[[1,1],1],[[1,1],1],[[1,13],1],[[1,11],1],[[1,11],1],[[1,13],1],[[1,11],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,5],1],[[1,4],1],[[1,13],1],[[1,5],1],[[1,6],1],[[14,12],14],[[14,11],14],[[14,2],14],[[14,2],14],[[14,8],14],[[14,8],14],[[14,8],14],[[14,7],14],[[14,7],14],[[14,7],14],[[14,8],14],[[14,2],14],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[14,11],14],[[14,2],14],[[14,13],14],[[14,7],14],[[14,11],14],[[14,13],14],[[14,13],14],[[14,13],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,11],14],[[15,15],15],[[1,1]],[[1,1]],[[1,7]],[[1,2]],[[1,5]],[[1,3]],[[1,6]],[[1,4]],[[1,8]],[[1,9]],[[1,10]],[[1,11]],[[1,13]],[[1,12]],[[14,8]],[[14,11]],[[14,12]],[[14,2]],[[14,13]],[[14,7]],[[14,14]],[[14,14]],[1,1],[1,1],[15,15],[[15,[31,[8]]],1],[[[31,[8]]],14],[22,[[17,[8]]]],[23,[[17,[2]]]],[22,17],[23,17],[[1,1],1],[[14,14],14],[1,1],[1,1],[[23,11],[[17,[2]]]],[[1,8],1],[[1,8],1],[[14,8],14],[[14,8],14],[[],1],[[],14],[8,[[17,[1]]]],[8,[[17,[14]]]],[[1,1],[[17,[21]]]],[[14,14],[[17,[21]]]],[[15,15],[[17,[21]]]],[[1,7],1],[[1,12],1],[[1,12],1],[[1,11],1],[[1,12],1],[[1,12],1],[[1,13],1],[[1,13],1],[[1,13],1],[[1,13],1],[[1,2],1],[[1,2],1],[[1,7],1],[[1,11],1],[[1,11],1],[[1,2],1],[[1,2],1],[[1,11],1],[[1,8],1],[[1,8],1],[[1,8],1],[[1,8],1],[[1,8],1],[[1,7],1],[[1,7],1],[[1,14],1],[[1,14],1],[[1,14],1],[[1,14],1],[[14,14],14],[[14,14],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,7],14],[[14,7],14],[[14,7],14],[[14,7],14],[[14,11],14],[[14,8],14],[[14,11],14],[[14,13],14],[[14,11],14],[[14,13],14],[[14,11],14],[[14,2],14],[[14,12],14],[[14,8],14],[[14,14],14],[[14,14],14],[[14,2],14],[[14,13],14],[[14,2],14],[[14,2],14],[[14,8],14],[[14,8],14],[[14,8],14],[[14,13],14],[[1,1],1],[[14,14],14],[[],1],[[],14],[32],[32],[[1,6],1],[[1,13],1],[[1,1],1],[[1,5],1],[[1,1],1],[[1,1],1],[[1,7],1],[[1,1],1],[[1,4],1],[[1,5],1],[[1,5],1],[[1,5],1],[[1,6],1],[[1,6],1],[[1,4],1],[[1,2],1],[[1,4],1],[[1,8],1],[[1,4],1],[[1,7],1],[[1,2],1],[[1,8],1],[[1,8],1],[[1,2],1],[[1,7],1],[[1,6],1],[[1,13],1],[[1,13],1],[[1,13],1],[[1,12],1],[[1,2],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,10],1],[[1,10],1],[[1,8],1],[[1,10],1],[[1,10],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,7],1],[[1,11],1],[[14,7],14],[[14,14],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,11],14],[[14,13],14],[[14,11],14],[[14,11],14],[[14,13],14],[[14,14],14],[[14,2],14],[[14,2],14],[[14,8],14],[[14,7],14],[[14,7],14],[[14,7],14],[[14,13],14],[[14,13],14],[[14,2],14],[[14,14],14],[[14,12],14],[[14,2],14],[[14,11],14],[[14,8],14],[[14,8],14],[[14,8],14],[[14,14],14],[[1,11]],[[1,10]],[[1,9]],[[1,3]],[[1,1]],[[1,1]],[[1,12]],[[1,13]],[[1,5]],[[1,6]],[[1,4]],[[1,7]],[[1,8]],[[1,2]],[[14,2]],[[14,7]],[[14,8]],[[14,11]],[[14,12]],[[14,13]],[[14,14]],[[14,14]],[[1,2,16]],[[14,2,16]],[1],[14],[1],[14],[[1,11],1],[[1,7],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,5],1],[[1,9],1],[[1,2],1],[[1,2],1],[[1,5],1],[[1,2],1],[[1,2],1],[[1,5],1],[[1,8],1],[[1,8],1],[[1,5],1],[[1,8],1],[[1,8],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,13],1],[[1,13],1],[[1,13],1],[[1,13],1],[[1,3],1],[[14,11],14],[[14,7],14],[[14,13],14],[[14,13],14],[[14,13],14],[[14,13],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,8],14],[[14,8],14],[[14,8],14],[[14,8],14],[[14,2],14],[[14,2],14],[[14,2],14],[[14,2],14],[[14,7],14],[[14,7],14],[[14,7],14],[[14,11],14],[[14,11],14],[[14,11],14],[[14,10],14],[[14,10],14],[[14,10],14],[[14,3],14],[[14,3],14],[[14,10],14],[[14,3],14],[[14,3],14],[[14,9],14],[[14,5],14],[[14,5],14],[[14,9],14],[[14,5],14],[[14,5],14],[[14,9],14],[[14,6],14],[[14,6],14],[[14,9],14],[[14,6],14],[[14,6],14],[[14,4],14],[[14,4],14],[[14,4],14],[[14,4],14],[[1,11]],[[1,11]],[[1,10]],[[1,3]],[[1,13]],[[1,3]],[[1,7]],[[1,12]],[[1,12]],[[1,7]],[[1,10]],[[1,6]],[[1,2]],[[1,5]],[[1,8]],[[1,8]],[[1,5]],[[1,9]],[[1,9]],[[1,2]],[[1,4]],[[1,4]],[[1,13]],[[1,6]],[[14,3]],[[14,4]],[[14,2]],[[14,4]],[[14,9]],[[14,2]],[[14,7]],[[14,11]],[[14,8]],[[14,11]],[[14,10]],[[14,8]],[[14,3]],[[14,10]],[[14,12]],[[14,5]],[[14,5]],[[14,12]],[[14,9]],[[14,6]],[[14,13]],[[14,6]],[[14,7]],[[14,13]],[[1,3],1],[[1,13],1],[[1,13],1],[[1,13],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,2],1],[[1,5],1],[[1,5],1],[[1,13],1],[[1,5],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,12],1],[[1,12],1],[[1,5],1],[[1,12],1],[[1,12],1],[[1,11],1],[[1,6],1],[[1,6],1],[[1,11],1],[[1,6],1],[[1,6],1],[[1,8],1],[[1,8],1],[[1,11],1],[[1,11],1],[[1,8],1],[[1,10],1],[[1,10],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,8],1],[[1,2],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,2],1],[[1,2],1],[[1,10],1],[[1,10],1],[[14,2],14],[[14,9],14],[[14,7],14],[[14,11],14],[[14,11],14],[[14,11],14],[[14,7],14],[[14,7],14],[[14,11],14],[[14,7],14],[[14,8],14],[[14,8],14],[[14,2],14],[[14,8],14],[[14,8],14],[[14,2],14],[[14,3],14],[[14,10],14],[[14,3],14],[[14,10],14],[[14,10],14],[[14,3],14],[[14,10],14],[[14,3],14],[[14,5],14],[[14,2],14],[[14,5],14],[[14,5],14],[[14,5],14],[[14,12],14],[[14,12],14],[[14,9],14],[[14,12],14],[[14,6],14],[[14,6],14],[[14,13],14],[[14,13],14],[[14,6],14],[[14,13],14],[[14,13],14],[[14,6],14],[[14,4],14],[[14,4],14],[[14,4],14],[[14,4],14],[[14,9],14],[[14,9],14],[[14,12],14],[[1,3]],[[1,3]],[[1,5]],[[1,5]],[[1,7]],[[1,7]],[[1,6]],[[1,6]],[[1,11]],[[1,9]],[[1,2]],[[1,11]],[[1,2]],[[1,8]],[[1,8]],[[1,4]],[[1,10]],[[1,4]],[[1,9]],[[1,10]],[[1,12]],[[1,12]],[[1,13]],[[1,13]],[[14,2]],[[14,3]],[[14,9]],[[14,8]],[[14,8]],[[14,12]],[[14,13]],[[14,11]],[[14,11]],[[14,4]],[[14,6]],[[14,9]],[[14,2]],[[14,5]],[[14,4]],[[14,10]],[[14,13]],[[14,5]],[[14,10]],[[14,7]],[[14,7]],[[14,6]],[[14,12]],[[14,3]],[1,15],[1,1],[22],[23],[1,1],[1,1],[14,14],[14,14],[[1,10],1],[[1,2],1],[[1,6],1],[[1,12],1],[[1,10],1],[[1,10],1],[[1,6],1],[[1,1],1],[[1,11],1],[[1,10],1],[[1,11],1],[[1,9],1],[[1,4],1],[[1,9],1],[[1,11],1],[[1,6],1],[[1,12],1],[[1,12],1],[[1,11],1],[[1,12],1],[[1,13],1],[[1,9],1],[[1,5],1],[[1,9],1],[[1,3],1],[[1,3],1],[[1,5],1],[[1,3],1],[[1,5],1],[[1,3],1],[[1,4],1],[[1,13],1],[[1,13],1],[[1,8],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,2],1],[[1,2],1],[[1,6],1],[[1,7],1],[[1,1],1],[[1,2],1],[[1,8],1],[[1,8],1],[[1,5],1],[[1,8],1],[[1,1],1],[[1,4],1],[[1,4],1],[[1,13],1],[[1,1],1],[[14,2],14],[[14,2],14],[[14,7],14],[[14,2],14],[[14,14],14],[[14,7],14],[[14,8],14],[[14,14],14],[[14,14],14],[[14,14],14],[[14,13],14],[[14,7],14],[[14,2],14],[[14,13],14],[[14,13],14],[[14,13],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,11],14],[[14,11],14],[[14,11],14],[[14,11],14],[[14,7],14],[[14,8],14],[[14,8],14],[[14,8],14],[[1,3]],[[1,2]],[[1,11]],[[1,12]],[[1,6]],[[1,13]],[[1,10]],[[1,9]],[[1,1]],[[1,5]],[[1,1]],[[1,7]],[[1,8]],[[1,4]],[[14,2]],[[14,7]],[[14,12]],[[14,11]],[[14,8]],[[14,13]],[[14,14]],[[14,14]],[[],1],[[],14],[[],[[17,[1]]]],[1,[[17,[1]]]],[14,[[17,[1]]]],[[],[[17,[14]]]],[1,[[17,[14]]]],[1,[[17,[14]]]],[14,[[17,[14]]]],[1],[14,[[31,[13]]]],[1],[14,[[31,[13]]]],[1,[[17,[33]]]],[14,[[17,[33]]]],[1,[[17,[29]]]],[14,[[17,[29]]]],[1,[[17,[5]]]],[14,[[17,[5]]]],[1,[[17,[6]]]],[14,[[17,[6]]]],[[]],[[]],[[]],[[]],[[]],[[1,8]],[[14,8],[[31,[13]]]],[[1,8]],[[14,8],[[31,[13]]]],[1,[[31,[13]]]],[1,[[31,[13]]]],[[1,8],34],[[14,8],34],[[],34],[[],34],[[],34],[[],34],[1,[[17,[7]]]],[14,[[17,[7]]]],[1],[14,[[31,[8]]]],[1,[[17,[2]]]],[14,[[17,[2]]]],[1],[14,[[31,[2]]]],[14,2],[1,[[17,[2]]]],[14,[[17,[2]]]],[[],30],[[],30],[[],30],[[],30],[1,[[30,[14,20]]]],[1,[[30,[14,[20,[1]]]]]],[5,[[30,[14,20]]]],[10,[[30,[14,20]]]],[3,[[30,[14,20]]]],[6,[[30,[14,20]]]],[4,[[30,[14,20]]]],[9,[[30,[14,20]]]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],1],[[],14]],"p":[[3,"BigInt"],[15,"u64"],[15,"isize"],[15,"i32"],[15,"i128"],[15,"i64"],[15,"u128"],[15,"u32"],[15,"i16"],[15,"i8"],[15,"usize"],[15,"u16"],[15,"u8"],[3,"BigUint"],[4,"Sign"],[15,"bool"],[4,"Option"],[3,"ParseBigIntError"],[8,"Clone"],[3,"TryFromBigIntError"],[4,"Ordering"],[3,"U32Digits"],[3,"U64Digits"],[15,"str"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"f64"],[4,"Result"],[3,"Vec"],[3,"Demand"],[15,"f32"],[3,"String"],[3,"TypeId"],[8,"ToBigInt"],[8,"ToBigUint"]]},\
"num_complex":{"doc":"Complex numbers.","t":[3,6,6,8,3,16,10,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Complex","Complex32","Complex64","ComplexFloat","ParseComplexError","Real","abs","abs","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","arg","arg","arg","as_","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atanh","atanh","atanh","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cis","clone","clone_into","conj","conj","conj","cos","cos","cos","cosh","cosh","cosh","default","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","exp","exp","exp","exp2","exp2","exp2","expf","expf","expf","fdiv","finv","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_polar","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","im","im","into","into","inv","inv","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_normal","is_normal","is_normal","is_one","is_zero","l1_norm","l1_norm","l1_norm","ln","ln","ln","log","log","log","log10","log10","log10","log2","log2","log2","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","norm","norm_sqr","one","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powc","powc","powf","powf","powf","powi","powi","powi","powu","product","product","provide","re","re","re","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sin","sin","sin","sinh","sinh","sinh","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":["num_complexd":["A complex number in Cartesian form.","","","Generic trait for floating point complex numbers.","","The type used to represent the real coefficients of this …","Returns the absolute value of the number. See also …","","Computes the arccosine of a number. Return value is in …","","Computes the principal value of the inverse cosine of <code>self</code>.","Inverse hyperbolic cosine function.","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","","Computes the argument of the number.","Calculate the principal Arg of self.","","","Computes the arcsine of a number. Return value is in …","","Computes the principal value of the inverse sine of <code>self</code>.","Inverse hyperbolic sine function.","Computes the principal value of inverse hyperbolic sine of …","","Computes the arctangent of a number. Return value is in …","","Computes the principal value of the inverse tangent of <code>self</code>…","Inverse hyperbolic tangent function.","","Computes the principal value of inverse hyperbolic tangent …","","","","","Take the cubic root of a number.","","Computes the principal value of the cube root of <code>self</code>.","Create a new Complex with a given phase: <code>exp(i * phase)</code>. …","","","Computes the complex conjugate of the number.","Returns the complex conjugate. i.e. <code>re - i im</code>","","Computes the cosine of a number (in radians).","Computes the cosine of <code>self</code>.","","Hyperbolic cosine function.","","Computes the hyperbolic cosine of <code>self</code>.","","","","","","","","","","","","","","","","","Returns <code>e^(self)</code>, (the exponential function).","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","Returns <code>2^(self)</code>.","","Computes <code>2^(self)</code>.","Returns <code>base^(self)</code>.","Raises a floating point number to the complex power <code>self</code>.","","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Convert a polar representation into a complex number.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns imaginary unit","Returns the imaginary part of the number.","","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>1/self</code>","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","Checks if the given complex number is finite","Returns <code>true</code> if this value is positive infinity or …","","Checks if the given complex number is infinite","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Checks if the given complex number is NaN","","Returns <code>true</code> if the number is neither zero, infinite, …","Checks if the given complex number is normal","","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","","Returns the natural logarithm of the number.","","Computes the principal value of natural logarithm of <code>self</code>.","Returns the logarithm of the number with respect to an …","","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the base 10 logarithm of the number.","","Computes the principal value of log base 10 of <code>self</code>.","Returns the base 2 logarithm of the number.","","Computes the principal value of log base 2 of <code>self</code>.","","","","","","","","","","","","","","","","","","","Create a new Complex","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a real power.","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a signed integer power.","","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","","","","Returns the real part of the number.","","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>. See also …","","","","","","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","Computes the sine of a number (in radians).","Computes the sine of <code>self</code>.","","Hyperbolic sine function.","","Computes the hyperbolic sine of <code>self</code>.","Take the square root of a number.","","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","","","","","Computes the tangent of a number (in radians).","","Computes the tangent of <code>self</code>.","Hyperbolic tangent function.","","Computes the hyperbolic tangent of <code>self</code>.","","","","","","","","","","Convert to polar form (r, theta), such that …","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,0,45,45,3,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,3,3,45,3,3,3,45,3,3,45,3,3,45,3,3,45,3,3,3,10,3,10,45,3,3,3,3,3,45,3,3,45,3,3,45,3,3,3,10,3,3,3,3,3,3,3,3,3,3,3,3,3,10,45,3,3,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,10,10,3,3,3,3,10,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,45,3,3,3,10,3,3,3,45,3,3,45,3,3,45,3,3,45,3,3,3,3,45,3,3,45,3,3,45,3,3,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,45,3,3,45,3,3,45,3,3,3,3,3,10,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,45,3,3,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,3,10,3,3,3,3,3,3,3,10,3,10,3,10,3,3],"f":[0,0,0,0,0,0,[[]],[[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[3,[3,[[0,[4,5]]]]]],[[3,3]],[3],[[[3,[[0,[4,5]]]],3]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]]]],[[3,[0,[4,5]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]]]],[[]],[[[3,[1]]],1],[[[3,[[0,[1,2]]]]]],[3],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[1,[[3,[1]]]],[[[3,[4]]],[[3,[4]]]],[[]],[[]],[[[3,[[0,[4,5,7]]]]],[[3,[[0,[4,5,7]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[],[[3,[8]]]],[[[10,[9]]],11],[[3,[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],3]],[[[3,[[0,[4,5]]]]]],[[3,[0,[4,5]]]],[3],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[3,3]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]]]],[[[3,[12]],3],13],[[[10,[12]],10],13],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]],1],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[[3,[1]]],[[3,[1]]]],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[[3,[16]],14],15],[[[10,[16]],14],15],[[[10,[17]],14],15],[[[0,[4,5]]],[[3,[[0,[4,5]]]]]],[18,[[20,[[3,[[0,[19,5]]]]]]]],[[],[[3,[[0,[4,5]]]]]],[[]],[[]],[21,[[20,[[3,[[0,[22,5]]]]]]]],[23,[[20,[[3,[[0,[22,5]]]]]]]],[24,[[20,[[3,[[0,[22,5]]]]]]]],[25,[[20,[[3,[[0,[22,5]]]]]]]],[26,[[20,[[3,[[0,[22,5]]]]]]]],[27,[[20,[[3,[[0,[22,5]]]]]]]],[28,[[20,[[3,[[0,[22,5]]]]]]]],[29,[[20,[[3,[[0,[22,5]]]]]]]],[[1,1],[[3,[1]]]],[11,[[30,[3]]]],[[11,31],[[30,[[3,[[0,[5,4]]]]]]]],[32,[[20,[[3,[[0,[22,5]]]]]]]],[33,[[20,[[3,[[0,[22,5]]]]]]]],[31,[[20,[[3,[[0,[22,5]]]]]]]],[34,[[20,[[3,[[0,[22,5]]]]]]]],[35,[[20,[[3,[[0,[22,5]]]]]]]],[36,[[20,[[3,[[0,[22,5]]]]]]]],[[[3,[37]]]],[[],[[3,[[0,[4,5]]]]]],[[]],[[[3,[[0,[1,2]]]]]],0,[[]],[[]],[[[3,[[0,[4,5,7]]]]]],[3],[[[3,[[0,[4,5,7]]]]],[[3,[[0,[4,5,7]]]]]],[[],13],[[[3,[[0,[1,2]]]]],13],[[[3,[38]]],13],[[],13],[[[3,[[0,[1,2]]]]],13],[[[3,[38]]],13],[[],13],[[[3,[38]]],13],[[[3,[[0,[1,2]]]]],13],[[],13],[[[3,[38]]],13],[[[3,[[0,[1,2]]]]],13],[[[3,[[0,[4,5]]]]],13],[[[3,[[0,[4,5]]]]],13],[[]],[[[3,[[0,[4,39]]]]],[[0,[4,39]]]],[[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]],1],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[3],[[3,[0,[4,5]]]],[[[3,[[0,[4,5]]]],3]],[[3,[3,[[0,[4,5]]]]]],[[3,3]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[3,3,3],[[3,[[0,[4,5,40]]]]]],[[[3,[[0,[4,5,40]]]],[3,[[0,[4,5,40]]]],[3,[[0,[4,5,40]]]]],[[3,[[0,[4,5,40]]]]]],[[[3,[[0,[4,6,41]]]],3,3]],[[[3,[[0,[4,6,41]]]],[3,[[0,[4,6,41]]]],[3,[[0,[4,6,41]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[3],[[[3,[[0,[4,5,7]]]]]],[[],3],[[[3,[1]]],1],[[[3,[[0,[4,5]]]]],[[0,[4,5]]]],[[],[[3,[[0,[4,5]]]]]],[[3,23]],[[[3,[1]],23]],[[3,26]],[[3,26]],[[3,34]],[[3,34]],[[3,27]],[[3,27]],[[3,36]],[[3,25]],[[3,25]],[[3,33]],[[3,36]],[[3,31]],[[3,29]],[[3,33]],[[3,29]],[[3,28]],[[[3,[1]],[3,[1]]]],[[3,28]],[[3,32]],[[3,32]],[[3,3]],[[3,[3,[1]]]],[[3,24]],[[[3,[1]],23]],[[3,35]],[[[3,[1]],3]],[[3,35]],[[3,23]],[[[3,[1]],21]],[[[3,[1]],21]],[[3,21]],[[3,21]],[[3,24]],[[3,31]],[3,3],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]],3],3],[[]],[[[3,[1]],1],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[26],[[[3,[[0,[1,2]]]],26],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5,7]]]],26],[[3,[[0,[4,5,7]]]]]],[[[3,[[0,[4,5]]]],31],[[3,[[0,[4,5]]]]]],[[],[[3,[[0,[5,4]]]]]],[[],[[3,[[0,[5,4]]]]]],[42],[[]],[[[3,[[0,[1,2]]]]]],0,[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],3]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[3,[0,[4,5]]]],[3],[[3,[3,[[0,[4,5]]]]]],[[3,3]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[4,5]]]],3]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[3,[3,[[0,[4,5]]]]]],[[3,3]],[[[3,[[0,[4,5]]]]]],[[3,[0,[4,5]]]],[3],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[],[[3,[[0,[5,4]]]]]],[[],[[3,[[0,[5,4]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[18,5]]]]],[[20,[21]]]],[[[3,[[0,[18,5]]]]],[[20,[23]]]],[[[3,[[0,[18,5]]]]],[[20,[24]]]],[[[3,[[0,[18,5]]]]],[[20,[25]]]],[[[3,[[0,[18,5]]]]],[[20,[26]]]],[[[3,[[0,[18,5]]]]],[[20,[27]]]],[[[3,[[0,[18,5]]]]],[[20,[28]]]],[[[3,[[0,[18,5]]]]],[[20,[29]]]],[[]],[[[3,[1]]]],[[],43],[[],43],[[[3,[[0,[18,5]]]]],[[20,[32]]]],[[[3,[[0,[18,5]]]]],[[20,[33]]]],[[[3,[[0,[18,5]]]]],[[20,[31]]]],[[[3,[[0,[18,5]]]]],[[20,[34]]]],[[[3,[[0,[18,5]]]]],[[20,[35]]]],[[[3,[[0,[18,5]]]]],[[20,[36]]]],[[],30],[[],30],[[],30],[[],30],[[],44],[[],44],[[[3,[[0,[4,5]]]],[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[],[[3,[[0,[4,5]]]]]]],"p":[[8,"Float"],[8,"FloatConst"],[3,"Complex"],[8,"Clone"],[8,"Num"],[8,"NumAssign"],[8,"Neg"],[8,"Default"],[8,"Error"],[3,"ParseComplexError"],[15,"str"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Display"],[8,"ToPrimitive"],[8,"NumCast"],[4,"Option"],[15,"f32"],[8,"FromPrimitive"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[4,"Result"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Hash"],[8,"FloatCore"],[8,"Signed"],[8,"MulAdd"],[8,"MulAddAssign"],[3,"Demand"],[3,"String"],[3,"TypeId"],[8,"ComplexFloat"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,11,12,12],"n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,11,5,11,5,0,4,4,5,5,0,2,0,2,0,2,0,2,2,5,2,2,5,11,5,0,2,5,0,2,11,5,11,2,2,2,0,2,0,2,0,11,11,2,0,4,2,0,4,4,5,11,5,11,5,11,5,5,5],"f":[0,0,0,0,0,[[1,1],1],[[]],[[1,1],1],[[]],[[[0,[2,3]],[0,[2,3]]],[[0,[2,3]]]],[[]],[[]],[[]],[[]],[4,4],[[]],[[]],[[[5,[3]]],[[5,[3]]]],[[]],[[2,2],2],[[]],[[2,2],2],[[]],[[2,2]],[[]],[[2,2]],[[]],[[],6],[[[5,[7]],5],6],[[],5],[[]],[[[5,[8]],9],10],[[]],[[]],[[2,2],2],[[]],0,[[2,2]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[2,2],2],[[]],[[2,2],2],[[]],[[]],[[],11],[11,12],[[]],[[4,13],4],[13],[[]],[4,4],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,0],"p":[[8,"Average"],[8,"Integer"],[8,"Clone"],[8,"Roots"],[3,"ExtendedGcd"],[15,"bool"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"IterBinomial"],[4,"Option"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"num_iter":{"doc":"External iterators for generic mathematics","t":[3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","end_bound","end_bound","end_bound","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","start_bound","start_bound","start_bound","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["num_iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,6,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,0,0,0,0,0,0,2,3,6,7,2,3,6,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[3,[1]]],[[3,[1]]]],[[[4,[1]]],[[4,[1]]]],[[[5,[1]]],[[5,[1]]]],[[[6,[1]]],[[6,[1]]]],[[[7,[1]]],[[7,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[2,8],[3,8],[6,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[2,9],[3,9],[[],2],[[],6],[[],3],[[],4],[[],7],[[],5],[2],[3],[6],[7],[2,8],[3,8],[6,8],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11]],"p":[[8,"Clone"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"],[4,"Bound"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"num_rational":{"doc":"Rational numbers","tn":["BigRational","ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","denom","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_float","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","provide","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_i128","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":["num_rationald":["Alias for arbitrary precision rationals.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Returns zero","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a float into a rational number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,13,4,13,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,13,13,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,13,4,13,4,13,4],"f":[0,0,0,0,0,0,[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2,3]]]],4],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[4,4],[[4,4],4],[[4,4],[[4,[[0,[1,2]]]]]],[4,[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[0,[6,7]]],[[9,[[4,[[0,[2,3,8,7,1]]]]]]]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,10,11]]]],4],[[9,[[4,[[0,[1,2,10,11]]]]]]]],[[4,4],[[9,[4]]]],[[4,4],[[9,[4]]]],[[[4,[[0,[1,2,10,12]]]],4],[[9,[[4,[[0,[1,2,10,12]]]]]]]],[[[4,[1]]],[[4,[1]]]],[13,13],[[]],[[]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],14],[[],[[4,[[0,[1,2]]]]]],[4],[13,15],[[4,4],4],[4,4],[[4,4],4],[4,4],[[4,4],[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[4,[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],16],[[13,13],16],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[17,1,2]]]],18],19],[[[4,[[0,[20,1,2]]]],18],19],[[[4,[[0,[21,1,2]]]],18],19],[[[4,[22]],18],19],[[[4,[[0,[23,1,2]]]],18],19],[[[4,[[0,[24,1,2]]]],18],19],[[[4,[[0,[25,1,2]]]],18],19],[[[4,[[0,[26,1,2]]]],18],19],[[13,18],19],[[13,18],19],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[]],[[],4],[[],4],[[]],[27,[[9,[[4,[28]]]]]],[27,[[9,[[4,[29]]]]]],[27,[[9,[[4,[30]]]]]],[27,[[9,[[4,[31]]]]]],[27,[[9,[[4,[32]]]]]],[27,[[9,[[4,[33]]]]]],[27,[[9,[[4,[34]]]]]],[27,[[9,[[4,[35]]]]]],[27,[[9,[[4,[36]]]]]],[27,[[9,[[4,[37]]]]]],[27,[[9,[[4,[38]]]]]],[27,[[9,[[4,[39]]]]]],[27,[[9,[[4,[40]]]]]],[41,[[9,[[4,[35]]]]]],[41,[[9,[[4,[28]]]]]],[41,[[9,[[4,[38]]]]]],[41,[[9,[[4,[29]]]]]],[41,[[9,[[4,[30]]]]]],[41,[[9,[[4,[40]]]]]],[41,[[9,[[4,[34]]]]]],[41,[[9,[[4,[31]]]]]],[41,[[9,[[4,[33]]]]]],[41,[[9,[[4,[32]]]]]],[41,[[9,[[4,[36]]]]]],[41,[[9,[[4,[39]]]]]],[41,[[9,[[4,[37]]]]]],[6,[[9,[42]]]],[37,[[9,[[4,[40]]]]]],[37,[[9,[[4,[31]]]]]],[37,[[9,[[4,[28]]]]]],[37,[[9,[[4,[32]]]]]],[37,[[9,[[4,[39]]]]]],[37,[[9,[[4,[38]]]]]],[37,[[9,[[4,[37]]]]]],[37,[[9,[[4,[29]]]]]],[37,[[9,[[4,[36]]]]]],[37,[[9,[[4,[34]]]]]],[37,[[9,[[4,[30]]]]]],[37,[[9,[[4,[33]]]]]],[37,[[9,[[4,[35]]]]]],[39,[[9,[[4,[30]]]]]],[39,[[9,[[4,[31]]]]]],[39,[[9,[[4,[28]]]]]],[39,[[9,[[4,[40]]]]]],[39,[[9,[[4,[39]]]]]],[39,[[9,[[4,[29]]]]]],[39,[[9,[[4,[33]]]]]],[39,[[9,[[4,[35]]]]]],[39,[[9,[[4,[38]]]]]],[39,[[9,[[4,[36]]]]]],[39,[[9,[[4,[34]]]]]],[39,[[9,[[4,[32]]]]]],[39,[[9,[[4,[37]]]]]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[15,[[44,[[4,[[0,[43,1,2]]]],13]]]],[[15,40],[[44,[[4,[[0,[1,2]]]],13]]]],[38,[[9,[[4,[34]]]]]],[38,[[9,[[4,[39]]]]]],[38,[[9,[[4,[31]]]]]],[38,[[9,[[4,[40]]]]]],[38,[[9,[[4,[30]]]]]],[38,[[9,[[4,[29]]]]]],[38,[[9,[[4,[32]]]]]],[38,[[9,[[4,[36]]]]]],[38,[[9,[[4,[33]]]]]],[38,[[9,[[4,[35]]]]]],[38,[[9,[[4,[38]]]]]],[38,[[9,[[4,[28]]]]]],[38,[[9,[[4,[37]]]]]],[29,[[9,[[4,[35]]]]]],[29,[[9,[[4,[37]]]]]],[29,[[9,[[4,[36]]]]]],[29,[[9,[[4,[39]]]]]],[29,[[9,[[4,[28]]]]]],[29,[[9,[[4,[38]]]]]],[29,[[9,[[4,[32]]]]]],[29,[[9,[[4,[33]]]]]],[29,[[9,[[4,[29]]]]]],[29,[[9,[[4,[34]]]]]],[29,[[9,[[4,[40]]]]]],[29,[[9,[[4,[30]]]]]],[29,[[9,[[4,[31]]]]]],[[[4,[[0,[1,2,45]]]]]],[4],[[]],[[]],[4,4],[4,4],[[[4,[[0,[1,2]]]]],16],[[[4,[[0,[1,2,3]]]]],16],[[[4,[[0,[1,2]]]]],16],[[[4,[[0,[1,2,3]]]]],16],[[[4,[[0,[1,2]]]]],16],[[4,4],4],[[4,4],4],[4,4],[[4,4],4],[4,[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[4,4],[4,4],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[4,4],[4,4],[[[0,[1,2]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[],4],[4],[[],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[9,[14]]]],[[[4,[[0,[1,2,[46,[33]]]]]],33],[[4,[[0,[1,2,[46,[33]]]]]]]],[[[4,[[0,[1,2,[46,[40]]]]]],40],[[4,[[0,[1,2,[46,[40]]]]]]]],[[[4,[[0,[1,2,[46,[47]]]]]],47],[[4,[[0,[1,2,[46,[47]]]]]]]],[[[4,[[0,[1,2]]]],28],[[4,[[0,[1,2]]]]]],[[4,47],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[47]]]]]],47],[[4,[[0,[1,2,[46,[47]]]]]]]],[[4,36],[[4,[[0,[1,2]]]]]],[[4,30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[47]]]]]],30],[[4,[[0,[1,2,[46,[47]]]]]]]],[[4,30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[32]]]]]],36],[[4,[[0,[1,2,[46,[32]]]]]]]],[[4,36],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[32]]]]]],36],[[4,[[0,[1,2,[46,[32]]]]]]]],[[[4,[[0,[1,2,[46,[47]]]]]],30],[[4,[[0,[1,2,[46,[47]]]]]]]],[[4,37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[38]]]]]],37],[[4,[[0,[1,2,[46,[38]]]]]]]],[[4,37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[38]]]]]],37],[[4,[[0,[1,2,[46,[38]]]]]]]],[[4,39],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[29]]]]]],39],[[4,[[0,[1,2,[46,[29]]]]]]]],[[4,39],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[29]]]]]],39],[[4,[[0,[1,2,[46,[29]]]]]]]],[[4,28],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[40]]]]]],28],[[4,[[0,[1,2,[46,[40]]]]]]]],[[4,28],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[40]]]]]],28],[[4,[[0,[1,2,[46,[40]]]]]]]],[[4,35],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[31]]]]]],35],[[4,[[0,[1,2,[46,[31]]]]]]]],[[4,35],[[4,[[0,[1,2]]]]]],[[4,47],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[33]]]]]],33],[[4,[[0,[1,2,[46,[33]]]]]]]],[[[4,[[0,[1,2,[46,[31]]]]]],35],[[4,[[0,[1,2,[46,[31]]]]]]]],[[4,34],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[33]]]]]],34],[[4,[[0,[1,2,[46,[33]]]]]]]],[[4,34],[[4,[[0,[1,2]]]]]],[[4,33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[33]]]]]],34],[[4,[[0,[1,2,[46,[33]]]]]]]],[[4,32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[32]]]]]],32],[[4,[[0,[1,2,[46,[32]]]]]]]],[[4,32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[32]]]]]],32],[[4,[[0,[1,2,[46,[32]]]]]]]],[[4,33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[31]]]]]],31],[[4,[[0,[1,2,[46,[31]]]]]]]],[[4,38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[38]]]]]],38],[[4,[[0,[1,2,[46,[38]]]]]]]],[[4,38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[38]]]]]],38],[[4,[[0,[1,2,[46,[38]]]]]]]],[[4,31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[31]]]]]],31],[[4,[[0,[1,2,[46,[31]]]]]]]],[[4,29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[29]]]]]],29],[[4,[[0,[1,2,[46,[29]]]]]]]],[[4,29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[29]]]]]],29],[[4,[[0,[1,2,[46,[29]]]]]]]],[[4,31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[40]]]]]],40],[[4,[[0,[1,2,[46,[40]]]]]]]],[[4,40],[[4,[[0,[1,2]]]]]],[[4,40],[[4,[[0,[1,2]]]]]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[48],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[4,4],4],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[4,4],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[4,[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[4,4],[4,[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[4,4],4],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[[[4,[[0,[1,2,49,50]]]]],[[9,[41]]]],[[[4,[[0,[1,2,49,50]]]]],[[9,[37]]]],[[[4,[[0,[1,2,49,50]]]]],[[9,[39]]]],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[[]],[[]],[[],51],[[],51],[[[4,[[0,[1,2,49,50]]]]],[[9,[38]]]],[[[4,[[0,[1,2,49,50]]]]],[[9,[29]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],44],[[],44],[[],44],[[],44],[[],52],[[],52],[[],[[4,[[0,[1,2]]]]]]],"p":[[8,"Clone"],[8,"Integer"],[8,"Signed"],[3,"Ratio"],[8,"NumAssign"],[8,"FloatCore"],[8,"NumCast"],[8,"Bounded"],[4,"Option"],[8,"CheckedMul"],[8,"CheckedAdd"],[8,"CheckedSub"],[3,"ParseRatioError"],[4,"Ordering"],[15,"str"],[15,"bool"],[8,"Display"],[3,"Formatter"],[6,"Result"],[8,"Octal"],[8,"Binary"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"LowerExp"],[8,"UpperExp"],[15,"f32"],[15,"i32"],[15,"u64"],[3,"BigInt"],[15,"u16"],[15,"usize"],[15,"u8"],[15,"i8"],[15,"i16"],[15,"isize"],[15,"i128"],[15,"u128"],[15,"i64"],[15,"u32"],[15,"f64"],[6,"BigRational"],[8,"FromStr"],[4,"Result"],[8,"Hash"],[8,"Pow"],[3,"BigUint"],[3,"Demand"],[8,"ToPrimitive"],[8,"ToBigInt"],[3,"String"],[3,"TypeId"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[2,2,2,2,2,2,2,2,2,2,2,13,2,2,2,4,2,16,2,13,2,2,8,8,8,8,2,8,8,2,3,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,11,0,0,2,2,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,2,0,0,2,0,0,2,11,11,11,11,11,11,11,2,8,8,8,10,10,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,11,10,10,11,10,10,10,10,10,10,10,11,10,10,10,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,8,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","","","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::euclid","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,35,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,35,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,36,37,36,38,0,0,0,0,39,0,11,40,40,40,40,40,40,40,40,40,40,40,40,40,40,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41,41,41,41,41,41,41,41,41,0,0,0,41,41,41,41,41,41,41,41,41,42,43,42,42,42,42,42,42,42,42,42,42,43,43,42,42,42,42,43,42,42,42,42,42,43,42,43,42,43,42,43,42,42,43,42,43,42,43,42,43,42,43,42,43,42,42,42,42,42,42,43,43,42,42,43,43,42,43,42,42,43,42,43,42,43,42,42,42,43,42,43,42,43,42,43,42,42,42,42,42,42,43,42,43,42,42,43,0,0,29,30,0,29,29,30,0,30,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,46,32,47,48,49,50,51,0,0,52,52,53,53,0,54,54,0,0,55,55,56,0,0,0,57,58,59,0,0,0,0,60,61,62,60,63,0,0,0,0,0,0,64,65,66,67,68,69,70,0,0,0,70,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,34,0,34,34,34,0,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],9],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[11,[[12,[11]]]],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[7,12],[24,12],[25,12],[26,12],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[7]]]],[[],[[12,[24]]]],[[],[[12,[25]]]],[[],[[12,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],28],[[],28],[[],29],[[]],[[]],[[]],[[],30],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[7,12],[7,12],[[],12],0,0,[[],12],[[],12],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[31,29,32]],26],[[12,[[0,[31,29,32]]]]]],[[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,33]]]]]]]]]]]]]]]]]],26],[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,33]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[34,34],[[]],[[34,34],34],[[]],[[],28],[[],28],[34,34],[[]]],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[4,"FpCategory"],[15,"bool"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"secret_integers":{"doc":"This crate defines simple wrappers around Rust’s integer …","tn":["I128","I128_from_I16","I128_from_I32","I128_from_I64","I128_from_I8","I16","I16_from_I128","I16_from_I32","I16_from_I64","I16_from_I8","I32","I32_from_I128","I32_from_I16","I32_from_I64","I32_from_I8","I64","I64_from_I128","I64_from_I16","I64_from_I32","I64_from_I8","I8","I8_from_I128","I8_from_I16","I8_from_I32","I8_from_I64","U128","U128_from_U16","U128_from_U32","U128_from_U64","U128_from_U8","U128_from_usize","U16","U16_from_U128","U16_from_U32","U16_from_U64","U16_from_U8","U32","U32_from_U128","U32_from_U16","U32_from_U64","U32_from_U8","U64","U64_from_U128","U64_from_U16","U64_from_U32","U64_from_U8","U64_from_usize","U8","U8_from_U128","U8_from_U16","U8_from_U32","U8_from_U64","U8_from_usize","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","classify","classify","classify","classify","classify","classify","classify","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","declassify","declassify","declassify","declassify","declassify","declassify","declassify","declassify","declassify","declassify","declassify_u128_from_U128","declassify_u128_from_U32","declassify_u128_from_U64","declassify_u128_from_U8","declassify_u16_from_U16","declassify_u16_from_U8","declassify_u32_from_U16","declassify_u32_from_U32","declassify_u32_from_U8","declassify_u64_from_U16","declassify_u64_from_U32","declassify_u64_from_U64","declassify_u64_from_U8","declassify_u8_from_U8","declassify_usize_from_U8","default","default","default","default","default","default","default","default","default","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","into","into","into","into","into","into","into","into","into","into","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","not","not","not","not","not","not","not","not","not","not","one","one","one","one","one","one","one","one","one","one","ones","ones","ones","ones","ones","ones","ones","ones","ones","ones","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_from_U16","u16_from_U128","u16_from_U32","u16_from_U64","u32_from_U128","u32_from_U64","u64_from_U128","u8_from_U128","u8_from_U16","u8_from_U32","u8_from_U64","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero"],"q":["secret_integersd":["","","","","","","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","","","<strong>Warning:</strong> wrapping semantics.","","<strong>Warning:</strong> wrapping semantics.","","","<strong>Warning:</strong> wrapping semantics.","","","","","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","","","","","","","","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","","","<strong>Warning:</strong> wrapping semantics.","","<strong>Warning:</strong> wrapping semantics.","","","<strong>Warning:</strong> wrapping semantics.","","","","","","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","<strong>Warning:</strong> wrapping semantics.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","<strong>Warning:</strong> panics when overflow.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","Produces a new integer which is all ones if the two …","Produces a new integer which is all ones if the two …","Produces a new integer which is all ones if the two …","Produces a new integer which is all ones if the two …","","","","","","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","Produces a new integer which is all ones if the first …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> use with caution, breaks the constant-time …","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","<strong>Warning:</strong> conversion can be lossy!","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codestrong>Warning:</strong> conversion can be lossy!","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,6,8,9,7,5,1,3,4,2,10,10,10,6,6,6,8,8,8,9,9,9,7,7,7,5,5,5,1,1,1,3,3,3,4,4,4,2,2,2,10,10,10,10,10,10,10,10,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,7,7,7,7,7,7,7,7,7,7,7,7,5,5,5,5,5,5,5,1,1,1,1,1,1,1,3,3,3,3,3,3,3,4,4,4,4,4,4,4,2,2,2,2,2,2,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,10,6,8,9,7,5,1,3,4,2,0,0,0,0,0,0,0,0,0,0,0,10,6,8,9,7,5,1,3,4,2],"f":[0,[1,2],[3,2],[4,2],[5,2],0,[2,1],[3,1],[4,1],[5,1],0,[2,3],[1,3],[4,3],[5,3],0,[2,4],[1,4],[3,4],[5,4],0,[2,5],[1,5],[3,5],[4,5],0,[6,7],[8,7],[9,7],[10,7],[11,7],0,[7,6],[8,6],[9,6],[10,6],0,[7,8],[6,8],[9,8],[10,8],0,[7,9],[6,9],[8,9],[10,9],[11,9],0,[7,10],[6,10],[8,10],[9,10],[11,10],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10]],[[6,6]],[[8,8]],[[9,9]],[[7,7]],[[5,5]],[[1,1]],[[3,3]],[[4,4]],[[2,2]],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10]],[[6,6]],[[8,8]],[[9,9]],[[7,7]],[[5,5]],[[1,1]],[[3,3]],[[4,4]],[[2,2]],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10]],[[6,6]],[[8,8]],[[9,9]],[[7,7]],[[5,5]],[[1,1]],[[3,3]],[[4,4]],[[2,2]],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10]],[[6,6]],[[8,8]],[[9,9]],[[7,7]],[[5,5]],[[1,1]],[[3,3]],[[4,4]],[[2,2]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[[13,[12]]],10],[[[13,[14]]],6],[[[13,[15]]],8],[[[13,[16]]],9],[[[13,[17]]],7],[[[13,[18]]],5],[[[13,[19]]],1],[[[13,[20]]],3],[[[13,[21]]],4],[[[13,[22]]],2],[10,10],[6,6],[8,8],[9,9],[7,7],[5,5],[1,1],[3,3],[4,4],[2,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[10,12],[6,14],[8,15],[9,16],[7,17],[5,18],[1,19],[3,20],[4,21],[2,22],[7,17],[8,17],[9,17],[10,17],[6,14],[10,14],[6,15],[8,15],[10,15],[6,16],[8,16],[9,16],[10,16],[10,12],[10,11],[[],10],[[],6],[[],8],[[],9],[[],7],[[],5],[[],1],[[],3],[[],4],[[],2],[[10,23],24],[[10,23],24],[[10,23],24],[[6,23],24],[[6,23],24],[[6,23],24],[[8,23],24],[[8,23],24],[[8,23],24],[[9,23],24],[[9,23],24],[[9,23],24],[[7,23],24],[[7,23],24],[[7,23],24],[[5,23],24],[[5,23],24],[[5,23],24],[[1,23],24],[[1,23],24],[[1,23],24],[[3,23],24],[[3,23],24],[[3,23],24],[[4,23],24],[[4,23],24],[[4,23],24],[[2,23],24],[[2,23],24],[[2,23],24],[9,10],[7,10],[8,10],[[]],[6,10],[11,10],[5,10],[12,10],[10,6],[12,6],[14,6],[7,6],[9,6],[[]],[1,6],[8,6],[9,8],[10,8],[14,8],[12,8],[3,8],[[]],[6,8],[15,8],[7,8],[11,9],[15,9],[14,9],[12,9],[4,9],[16,9],[7,9],[10,9],[8,9],[[]],[6,9],[15,7],[9,7],[2,7],[6,7],[14,7],[12,7],[[]],[11,7],[8,7],[16,7],[10,7],[17,7],[2,5],[10,5],[3,5],[18,5],[1,5],[[]],[4,5],[3,1],[6,1],[19,1],[4,1],[5,1],[[]],[2,1],[5,3],[[]],[4,3],[2,3],[8,3],[20,3],[1,3],[9,4],[2,4],[1,4],[21,4],[5,4],[3,4],[[]],[22,2],[5,2],[4,2],[3,2],[1,2],[7,2],[[]],[[],[[25,[10]]]],[[],[[25,[6]]]],[[],[[25,[8]]]],[[],[[25,[9]]]],[[],[[25,[7]]]],[[],[[25,[5]]]],[[],[[25,[1]]]],[[],[[25,[3]]]],[[],[[25,[4]]]],[[],[[25,[2]]]],[[],[[25,[10]]]],[[],[[25,[6]]]],[[],[[25,[8]]]],[[],[[25,[9]]]],[[],[[25,[7]]]],[[],[[25,[5]]]],[[],[[25,[1]]]],[[],[[25,[3]]]],[[],[[25,[4]]]],[[],[[25,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],6],[[],8],[[],9],[[],7],[[],5],[[],1],[[],3],[[],4],[[],2],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10]],[[6,6]],[[8,8]],[[9,9]],[[7,7]],[[5,5]],[[1,1]],[[3,3]],[[4,4]],[[2,2]],[10,10],[6,6],[8,8],[9,9],[7,7],[5,5],[1,1],[3,3],[4,4],[2,2],[10,10],[6,6],[8,8],[9,9],[7,7],[5,5],[1,1],[3,3],[4,4],[2,2],[[],10],[[],6],[[],8],[[],9],[[],7],[[],5],[[],1],[[],3],[[],4],[[],2],[[],10],[[],6],[[],8],[[],9],[[],7],[[],5],[[],1],[[],3],[[],4],[[],2],[[10,11],10],[[6,11],6],[[8,11],8],[[9,11],9],[[7,11],7],[[5,11],5],[[1,11],1],[[3,11],3],[[4,11],4],[[2,11],2],[[10,11],10],[[6,11],6],[[8,11],8],[[9,11],9],[[7,11],7],[[5,11],5],[[1,11],1],[[3,11],3],[[4,11],4],[[2,11],2],[[10,11],10],[[6,11],6],[[8,11],8],[[9,11],9],[[7,11],7],[[5,11],5],[[1,11],1],[[3,11],3],[[4,11],4],[[2,11],2],[[10,11]],[[6,11]],[[8,11]],[[9,11]],[[7,11]],[[5,11]],[[1,11]],[[3,11]],[[4,11]],[[2,11]],[[10,11],10],[[6,11],6],[[8,11],8],[[9,11],9],[[7,11],7],[[5,11],5],[[1,11],1],[[3,11],3],[[4,11],4],[[2,11],2],[[10,11]],[[6,11]],[[8,11]],[[9,11]],[[7,11]],[[5,11]],[[1,11]],[[3,11]],[[4,11]],[[2,11]],[[10,10],10],[[6,6],6],[[8,8],8],[[9,9],9],[[7,7],7],[[5,5],5],[[1,1],1],[[3,3],3],[[4,4],4],[[2,2],2],[[10,10]],[[6,6]],[[8,8]],[[9,9]],[[7,7]],[[5,5]],[[1,1]],[[3,3]],[[4,4]],[[2,2]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[],[[25,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[6,17],[14,7],[14,8],[14,9],[15,7],[15,9],[16,7],[12,7],[12,6],[12,8],[12,9],[[],10],[[],6],[[],8],[[],9],[[],7],[[],5],[[],1],[[],3],[[],4],[[],2]],"p":[[3,"I16"],[3,"I128"],[3,"I32"],[3,"I64"],[3,"I8"],[3,"U16"],[3,"U128"],[3,"U32"],[3,"U64"],[3,"U8"],[15,"usize"],[15,"u8"],[8,"Into"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u128"],[15,"i8"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i128"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[3,"String"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
