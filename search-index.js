var searchIndex = JSON.parse('{\
"hacspec_halo2":{"doc":"Protocol","t":[6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["CRS","Polyx","add_polyx","add_scalar_polyx","calculate_L_or_R","check_equal_polyx","check_not_zero_polyx","commit_polyx","compute_vanishing_polynomial","degree_polyx","divide_leading_terms","divide_polyx","eval_polyx","gen_one_polyx","gen_zero_polyx","inner_product","lagrange_basis","lagrange_polyx","msm","mul_polyx","mul_scalar_polyx","multi_poly_with_x","multi_poly_with_x_pow","rotate_polyx","sigma","step_10","step_11","step_12","step_13","step_14","step_15","step_16","step_17","step_18","step_19","step_20","step_21","step_22","step_23","step_24","step_25","step_26","step_4","step_5","step_6","step_7","step_8","step_9","sub_polyx","sub_scalar_polyx","trim_polyx"],"q":["hacspec_halo2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Common Reference Struct","A polynomial represented by its coefficient form, such …","Add two polynomials, return resulting polynomial","Add a scalar (constant) from a polynomial, return …","Auxilary function for computing L_j or R_j in step 24","","Checks if all entries in a polynomial is 0","Pedersen vector commitment","Compute vanishing polynomial over n-order multiplicative …","Get the degree of a polynomial","divide the leading terms of two polynomials, returning a …","Perform polynomial long division, returning the quotient …","Evaluate a polynomial at point, return the evaluation","","","Inner product, between to equal length vectors of field …","Finds the Lagrange basis for a set of <code>points</code> and a single …","Find lowest degree polynomial passing through a set points …","Multiscalar multiplicatoin, auxiliary function for …","Polynomial multiplication using sparse multiplication. …","Multiply a polynomial by a scalar, return resulting …","Wrapper function for multiplying a polynomial with the …","Wrapper function for multiplying a polynomial with the …","Rotate a polynomial","Implementation of the σ mapping from the protocol","Step 10 This function initializes the s sequence of length …","Step 11 Get the list of Q’s (Q_0, …, Q_{n_q - 1})","Step 12 Get the list of q’s (q_0, …, q_{n_q - 1}) and …","Step 13 Get the list of r’s (r_0, …, r_{n_q - 1})","Step 14 Get the commitment Q’, poly q’ and the …","Step 15 This function emulates sending a challenge.","Step 16 Get the u ∈ F^{n_q} vector","Step 17 This function emulates sending a challenge.","Step 18 Get P and the v","Step 19 Get the p(X) polynomial","Step 20 Get the commitment S and the blindness used","Step 21 Get the xi and z challenges. They have to be fed …","Step 22 Get the P’ curve-point/group-element","Step 23 Get the p’(X) polynomial and p’ blindness","Step 24 Get <strong>G</strong>‘, <strong>p</strong>’, <strong>b</strong>, L, R, and {L,R} blinds","Step 25 Get the zeroth entry in <strong>p</strong> and synthetic blinding …","Step 26 Verifiers final check of the protocol","Step 4 Beginning of the vanishing argument","Step 5 split polynomial of degree n_g(n-1)-n up into n_…","Step 6 commit to each h_i polynomial keeping them in the …","Step 7 Computes the sum from step 7 in the protocol …","Step 8 This functions calculates h’(X) from the h_i …","Step 9 This functions returns r(x) and creates a seq …","Subtract two polynomials, return resulting polynomial","Subtract a scalar (constant) from a polynomial, return …","Trim a polynomial of trailing zeros (zero-terms) and …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[1,1],1],[[1,2],1],[[1,1,[4,[3]],2,3,3,2],3],[[1,1],5],[1,5],[[1,2],3],[[2,6],1],[1,6],[[1,1],1],[[1,1]],[[1,2],2],[[],1],[[],1],[[1,1],2],[[4,2],1],[4,1],[[1,[4,[3]]],3],[[1,1],1],[[1,2],1],[1,1],[[1,7],1],[[1,2],1],[[6,[4,[6]],[4,[[4,[6]]]]],[[4,[6]]]],[[2,[4,[[4,[6]]]],2,[4,[1]]],[[4,[1]]]],[[6,2,2,3,3,[4,[3]],[4,[[4,[6]]]],[4,[6]]]],[[6,2,1,1,[4,[1]],[4,[[4,[6]]]],[4,[6]],1,2,2]],[[6,2,2,2,2,[4,[1]],[4,[[4,[6]]]],[4,[6]],[4,[1]],1],[[4,[1]]]],[[2,[4,[1]],[4,[1]],[4,[[4,[6]]]],2,2,2]],[2,2],[[6,2,[4,[1]]],1],[2,2],[[2,2,2,2,2,2,3,[4,[3]],1,[4,[1]],[4,[[4,[6]]]]]],[[2,1,[4,[1]],1,2]],[[1,2]],[[2,2]],[[3,3,3,2,2],3],[[1,1,2,2,2,2]],[[1,[4,[3]],2,2,3,3,6,7,1,1,1]],[[1,1,1,2,1]],[[1,[4,[3]],3,[4,[3]],2,3,2,2,3,2,3],5],[[1,2,6],1],[[1,6,6],[[4,[1]]]],[[[4,[1]],1],[[4,[3]]]],[[[4,[3]],2,6],3],[[[4,[1]],2,6,[4,[2]]]],[[1,[4,[1]],2,[4,[[4,[6]]]],2]],[[1,1],1],[[1,2],1],[1,1]],"p":[[6,"Polyx"],[3,"FpVesta"],[6,"G1_pallas"],[3,"Seq"],[15,"bool"],[15,"u128"],[15,"usize"]]},\
"hacspec_pasta":{"doc":"","t":[3,3,6,6,11,11,11,11,3,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FpPallas","FpVesta","G1_pallas","G1_vesta","ONE","ONE","ONE","ONE","PallasCanvas","TWO","TWO","TWO","TWO","VestaCanvas","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","add","add","add","add","add_mod","add_mod","add_mod","add_mod","b","b","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","declassify","declassify","default","default","default","default","div","div","div","div","divide","divide","divide","divide","eq","eq","eq","eq","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_secret_literal","from_secret_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","g1_default_pallas","g1_default_vesta","g1_is_identity_pallas","g1_is_identity_vesta","g1_on_curve_pallas","g1_on_curve_vesta","g1add_a_pallas","g1add_a_vesta","g1add_pallas","g1add_vesta","g1double_a_pallas","g1double_a_vesta","g1double_pallas","g1double_vesta","g1mul_pallas","g1mul_vesta","g1neg_pallas","g1neg_vesta","get_bit","get_bit","get_bit","get_bit","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","hex_string_to_bytes","hex_string_to_bytes","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max","max","max_val","max_val","max_val","max_val","max_value","max_value","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","set","set","set","set","set_bit","set_bit","set_bit","set_bit","shl","shl","shl","shl","shr","shr","shr","shr","sign","sign","signed","signed","signed_modulo","signed_modulo","signed_modulo","signed_modulo","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_pastad":["","","","","","","","","","","","","","","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","","","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","Division.","Division.","Division.","Division.","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","","Invert self modulo n.","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,3,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,2,2,2,3,3,3,4,4,4,1,1,1,2,2,3,3,3,4,4,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,2,2,3,3,4,4,1,2,3,4,2,4,2,4,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,3,1,1,1,2,2,3,3,3,4,4,2,4,1,1,2,2,3,3,4,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,3,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,2,3,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,3,1,3,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],"f":[0,0,0,0,[[],1],[[],2],[[],3],[[],4],0,[[],1],[[],2],[[],3],[[],4],0,[[],1],[[],2],[[],3],[[],4],[1,1],[2,2],[3,3],[4,4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],0,0,[[1,5],6],[[2,5],6],[[3,5],6],[[4,5],6],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[2,8],[4,8],[[],1],[[],2],[[],3],[[],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[1,10],11],[[1,10],11],[[1,10],11],[[2,10],11],[[2,10],11],[[2,10],11],[[3,10],11],[[3,10],11],[[3,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[]],[12,1],[8,1],[[]],[1,2],[8,3],[[]],[12,3],[[]],[3,4],[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[[14,[13]]],2],[[[14,[13]]],4],[1,2],[3,4],[15,1],[15,2],[15,3],[15,4],[16,1],[16,2],[16,3],[16,4],[[],1],[[],2],[[],3],[[],4],[17,1],[17,1],[17,2],[17,2],[17,3],[17,3],[17,4],[17,4],[[[14,[18]]],1],[[[14,[18]]],2],[[[14,[18]]],3],[[[14,[18]]],4],[[[14,[18]]],2],[[[14,[18]]],4],[19,2],[19,4],[20,1],[20,2],[20,3],[20,4],[[],21],[[],22],[21,6],[22,6],[21,6],[22,6],[[21,21],21],[[22,22],22],[[21,21],21],[[22,22],22],[21,21],[22,22],[21,21],[22,22],[[4,21],21],[[2,22],22],[21,21],[22,22],[[1,5],1],[[2,5],2],[[3,5],3],[[4,5],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[15,[[23,[18]]]],[15,[[23,[18]]]],[1,8],[1,12],[[]],[2,1],[[]],[3,12],[[]],[3,8],[4,3],[[]],[2,1],[4,3],[[1,1],1],[[1,1],1],[[2,2],2],[2,2],[[3,3],3],[[3,3],3],[[4,4],4],[4,4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[],8],[[],1],[[],8],[[],3],[[],1],[[],2],[[],3],[[],4],[[],1],[[],3],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[2,2],[4,4],[1],[2],[3],[4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],[[24,[7]]]],[[2,2],[[24,[7]]]],[[3,3],[[24,[7]]]],[[4,4],[[24,[7]]]],[[1,17,1],1],[[2,17],2],[[3,17,3],3],[[4,17],4],[5,1],[5,2],[5,3],[5,4],[[1,1,1],1],[[2,2],2],[[3,3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[1,1],1],[[2,2],2],[[3,3],3],[[3,3],3],[[4,4],4],[[1,5],1],[[2,5],2],[[3,5],3],[[4,5],4],[[1,5],1],[[2,5],2],[[3,5],3],[[4,5],4],[[1,5,1,5],1],[[2,5,2,5],2],[[3,5,3,5],3],[[4,5,4,5],4],[[1,1,5],1],[[2,2,5],2],[[3,3,5],3],[[4,4,5],4],[[1,5]],[[2,5]],[[3,5]],[[4,5]],[[1,5]],[[2,5]],[[3,5]],[[4,5]],0,0,0,0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[1],[2,[[23,[18]]]],[3],[4,[[23,[18]]]],[1,[[25,[13]]]],[2,[[25,[13]]]],[3,[[25,[13]]]],[4,[[25,[13]]]],[2,[[25,[13]]]],[4,[[25,[13]]]],[1],[2,[[23,[18]]]],[3],[4,[[23,[18]]]],[[]],[[]],[[]],[[]],[2,[[25,[18]]]],[4,[[25,[18]]]],[2,[[25,[18]]]],[4,[[25,[18]]]],[[],16],[[],16],[[],16],[[],16],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],27],[[],27],[[],27],[[],27],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4]],"p":[[3,"PallasCanvas"],[3,"FpPallas"],[3,"VestaCanvas"],[3,"FpVesta"],[15,"usize"],[15,"bool"],[4,"Ordering"],[3,"BigInt"],[15,"u32"],[3,"Formatter"],[6,"Result"],[3,"BigUint"],[3,"U8"],[8,"SeqTrait"],[15,"str"],[3,"String"],[15,"u128"],[15,"u8"],[3,"U128"],[15,"i128"],[6,"G1_pallas"],[6,"G1_vesta"],[3,"Vec"],[4,"Option"],[3,"Seq"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
